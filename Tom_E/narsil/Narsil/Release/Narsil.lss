
Narsil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00001d68  00001dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  008000a2  008000a2  00001e3e  2**0
                  ALLOC
  3 .noinit       00000001  008000f1  008000f1  00001e3e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001e3e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002631  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007c3  00000000  00000000  000045bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019b1  00000000  00000000  00004d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c8  00000000  00000000  00006734  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a17  00000000  00000000  000069fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001436  00000000  00000000  00007413  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a8  00000000  00000000  00008849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	ff c0       	rjmp	.+510    	; 0x202 <__bad_interrupt>
       4:	75 c2       	rjmp	.+1258   	; 0x4f0 <__vector_2>
       6:	fd c0       	rjmp	.+506    	; 0x202 <__bad_interrupt>
       8:	fc c0       	rjmp	.+504    	; 0x202 <__bad_interrupt>
       a:	fb c0       	rjmp	.+502    	; 0x202 <__bad_interrupt>
       c:	fa c0       	rjmp	.+500    	; 0x202 <__bad_interrupt>
       e:	f9 c0       	rjmp	.+498    	; 0x202 <__bad_interrupt>
      10:	01 c3       	rjmp	.+1538   	; 0x614 <__vector_8>
      12:	f7 c0       	rjmp	.+494    	; 0x202 <__bad_interrupt>
      14:	f6 c0       	rjmp	.+492    	; 0x202 <__bad_interrupt>
      16:	f5 c0       	rjmp	.+490    	; 0x202 <__bad_interrupt>
      18:	73 c3       	rjmp	.+1766   	; 0x700 <__vector_12>
      1a:	f3 c0       	rjmp	.+486    	; 0x202 <__bad_interrupt>
      1c:	f2 c0       	rjmp	.+484    	; 0x202 <__bad_interrupt>
      1e:	fd cc       	rjmp	.-1542   	; 0xfffffa1a <__eeprom_end+0xff7efa1a>
      20:	e6 cc       	rjmp	.-1588   	; 0xfffff9ee <__eeprom_end+0xff7ef9ee>
      22:	a9 cd       	rjmp	.-1198   	; 0xfffffb76 <__eeprom_end+0xff7efb76>
      24:	b4 cd       	rjmp	.-1176   	; 0xfffffb8e <__eeprom_end+0xff7efb8e>
      26:	be cd       	rjmp	.-1156   	; 0xfffffba4 <__eeprom_end+0xff7efba4>
      28:	18 ce       	rjmp	.-976    	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      2a:	2f ce       	rjmp	.-930    	; 0xfffffc8a <__eeprom_end+0xff7efc8a>

0000002c <__trampolines_end>:
      2c:	00 00       	nop
      2e:	00 00       	nop
      30:	a6 0e       	add	r10, r22
      32:	f9 15       	cp	r31, r9
      34:	4c 1d       	adc	r20, r12
      36:	f2 2b       	or	r31, r18
      38:	3e 49       	sbci	r19, 0x9E	; 158
      3a:	8a 66       	ori	r24, 0x6A	; 106

0000003c <modeSetCnts>:
      3c:	01 02 03 04 05 06 07 03 03 03 03 04                 ............

00000048 <mode7135Set12>:
      48:	14 e6 ff 00                                         ....

0000004c <modeFetSet12>:
      4c:	00 00 5a ff                                         ..Z.

00000050 <mode7135Set11>:
      50:	ff ff 00                                            ...

00000053 <modeFetSet11>:
      53:	00 46 ff                                            .F.

00000056 <mode7135Set10>:
      56:	1e ff 00                                            ...

00000059 <modeFetSet10>:
      59:	00 50 ff                                            .P.

0000005c <mode7135Set9>:
      5c:	1e ff 00                                            ...

0000005f <modeFetSet9>:
      5f:	00 19 ff                                            ...

00000062 <mode7135Set8>:
      62:	ff ff ff                                            ...

00000065 <modeFetSet8>:
      65:	00 25 6e                                            .%n

00000068 <mode7135Set7>:
      68:	18 3f 96 ff ff ff 00                                .?.....

0000006f <modeFetSet7>:
      6f:	00 00 00 00 46 8c ff                                ....F..

00000076 <mode7135Set6>:
      76:	14 6e ff ff ff 00                                   .n....

0000007c <modeFetSet6>:
      7c:	00 00 07 38 89 ff                                   ...8..

00000082 <mode7135Set5>:
      82:	1e 78 ff ff 00                                      .x...

00000087 <modeFetSet5>:
      87:	00 00 00 50 ff                                      ...P.

0000008c <mode7135Set4>:
      8c:	1e ff ff 00                                         ....

00000090 <modeFetSet4>:
      90:	00 00 50 ff                                         ..P.

00000094 <mode7135Set3>:
      94:	78 ff 00                                            x..

00000097 <modeFetSet3>:
      97:	00 46 ff                                            .F.

0000009a <mode7135Set2>:
      9a:	ff 00                                               ..

0000009c <modeFetSet2>:
      9c:	00 ff                                               ..

0000009e <mode7135Set1>:
	...

0000009f <modeFetSet1>:
      9f:	ff                                                  .

000000a0 <ramp_FET>:
	...
      e0:	00 02 03 04 05 07 08 09 0b 0c 0e 0f 11 12 14 16     ................
      f0:	17 19 1b 1d 1e 20 22 24 26 28 2a 2c 2f 31 33 35     ..... "$&(*,/135
     100:	38 3a 3c 3f 42 44 47 49 4c 4f 52 55 57 5a 5d 60     8:<?BDGILORUWZ]`
     110:	64 67 6a 6d 71 74 77 7b 7e 82 86 89 8d 91 95 99     dgjmqtw{~.......
     120:	9d a1 a5 a9 ad b2 b6 ba bf c4 c8 cd d2 d6 db e0     ................
     130:	e5 ea ef f4 fa ff                                   ......

00000136 <ramp_7135>:
     136:	03 03 03 04 04 04 05 05 06 06 07 08 09 0a 0b 0c     ................
     146:	0d 0e 0f 11 12 14 16 18 1a 1c 1e 21 23 26 29 2c     ...........!#&),
     156:	2f 33 36 3a 3e 42 46 4a 4f 53 58 5d 63 68 6e 74     /36:>BFJOSX]chnt
     166:	7a 80 87 8e 95 9c a4 ac b4 bc c4 cd d6 df e9 f3     z...............
     176:	fd ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     186:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     196:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1a6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1b6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1c6:	ff ff ff ff ff 00                                   ......

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf e5       	ldi	r28, 0x5F	; 95
     1d2:	d2 e0       	ldi	r29, 0x02	; 2
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	10 e0       	ldi	r17, 0x00	; 0
     1da:	a0 e6       	ldi	r26, 0x60	; 96
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e8 e6       	ldi	r30, 0x68	; 104
     1e0:	fd e1       	ldi	r31, 0x1D	; 29
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a2 3a       	cpi	r26, 0xA2	; 162
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	a2 ea       	ldi	r26, 0xA2	; 162
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	a1 3f       	cpi	r26, 0xF1	; 241
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	e3 d6       	rcall	.+3526   	; 0xfc6 <main>
     200:	b1 cd       	rjmp	.-1182   	; 0xfffffd64 <__eeprom_end+0xff7efd64>

00000202 <__bad_interrupt>:
     202:	fe ce       	rjmp	.-516    	; 0x0 <__vectors>

00000204 <_delay_ms>:
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
	ALT_PWM_LVL = pwm7135;
     204:	20 ed       	ldi	r18, 0xD0	; 208
     206:	37 e0       	ldi	r19, 0x07	; 7
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	20 f0       	brcs	.+8      	; 0x214 <_delay_ms+0x10>
     20c:	f9 01       	movw	r30, r18
     20e:	31 97       	sbiw	r30, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <_delay_ms+0xa>
     212:	fa cf       	rjmp	.-12     	; 0x208 <_delay_ms+0x4>
     214:	08 95       	ret

00000216 <TurnOnBoardLed>:
     216:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <onboardLedEnable>
     21a:	99 23       	and	r25, r25
     21c:	49 f0       	breq	.+18     	; 0x230 <TurnOnBoardLed+0x1a>
     21e:	88 23       	and	r24, r24
     220:	21 f0       	breq	.+8      	; 0x22a <TurnOnBoardLed+0x14>
     222:	83 e1       	ldi	r24, 0x13	; 19
     224:	87 bb       	out	0x17, r24	; 23
     226:	c4 9a       	sbi	0x18, 4	; 24
     228:	08 95       	ret
     22a:	83 e0       	ldi	r24, 0x03	; 3
     22c:	87 bb       	out	0x17, r24	; 23
     22e:	c4 98       	cbi	0x18, 4	; 24
     230:	08 95       	ret

00000232 <SetLevel.part.1>:
     232:	81 50       	subi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	fc 01       	movw	r30, r24
     238:	ea 5c       	subi	r30, 0xCA	; 202
     23a:	fe 4f       	sbci	r31, 0xFE	; 254
     23c:	24 91       	lpm	r18, Z
     23e:	fc 01       	movw	r30, r24
     240:	e0 56       	subi	r30, 0x60	; 96
     242:	ff 4f       	sbci	r31, 0xFF	; 255
     244:	84 91       	lpm	r24, Z
     246:	88 bd       	out	0x28, r24	; 40
     248:	29 bd       	out	0x29, r18	; 41
     24a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <locatorLed>
     24e:	88 23       	and	r24, r24
     250:	11 f0       	breq	.+4      	; 0x256 <SetLevel.part.1+0x24>
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	e0 cf       	rjmp	.-64     	; 0x216 <TurnOnBoardLed>
     256:	08 95       	ret

00000258 <Strobe>:
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	1f 92       	push	r1
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	9f ef       	ldi	r25, 0xFF	; 255
     264:	98 bd       	out	0x28, r25	; 40
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	69 83       	std	Y+1, r22	; 0x01
     26a:	cc df       	rcall	.-104    	; 0x204 <_delay_ms>
     26c:	18 bc       	out	0x28, r1	; 40
     26e:	69 81       	ldd	r22, Y+1	; 0x01
     270:	86 2f       	mov	r24, r22
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0f 90       	pop	r0
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	c4 cf       	rjmp	.-120    	; 0x204 <_delay_ms>

0000027c <SetLevel>:
* SetLevel - uses the ramping levels to set the PWM output
* ========		(0 is OFF, 1..RAMP_SIZE is the ramping index level)
**************************************************************************************/
void SetLevel(byte level)
{
	if (level == 0)
     27c:	81 11       	cpse	r24, r1
     27e:	08 c0       	rjmp	.+16     	; 0x290 <SetLevel+0x14>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     280:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
     282:	19 bc       	out	0x29, r1	; 41
void SetLevel(byte level)
{
	if (level == 0)
	{
		SetOutput(0,0);
		if (locatorLed)
     284:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <locatorLed>
     288:	88 23       	and	r24, r24
     28a:	19 f0       	breq	.+6      	; 0x292 <SetLevel+0x16>
			TurnOnBoardLed(1);
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	c3 cf       	rjmp	.-122    	; 0x216 <TurnOnBoardLed>
     290:	d0 cf       	rjmp	.-96     	; 0x232 <SetLevel.part.1>
     292:	08 95       	ret

00000294 <EnterSpecialModes>:
* EnterSpecialModes - enter special/strobe(s) modes
* =================
**************************************************************************************/
void EnterSpecialModes ()
{
	prevRamping = ramping;
     294:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     298:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <prevRamping>
	ramping = 0;				// disable ramping while in special/strobe modes
     29c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <ramping>
	
	specModeIdx = 0;
     2a0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <specModeIdx>
	modeIdx = specialModes[specModeIdx];
     2a4:	8b e5       	ldi	r24, 0x5B	; 91
     2a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
										
	TurnOnBoardLed(0);	// be sure the on board LED is OFF here
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	b4 cf       	rjmp	.-152    	; 0x216 <TurnOnBoardLed>

000002ae <ExitSpecialModes>:
* ExitSpecialModes - exit special/strobe mode(s)
* ================
**************************************************************************************/
void ExitSpecialModes ()
{
	ramping = prevRamping;	// restore ramping state
     2ae:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <prevRamping>
     2b2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ramping>
	rampingLevel = 0;
     2b6:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
	
	if (ramping)				// for ramping, force mode back to 0
     2ba:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     2be:	88 23       	and	r24, r24
     2c0:	19 f0       	breq	.+6      	; 0x2c8 <ExitSpecialModes+0x1a>
		modeIdx = 0;
     2c2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
     2c6:	08 95       	ret
	else
		modeIdx = prevModeIdx;
     2c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <prevModeIdx>
     2cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
     2d0:	08 95       	ret

000002d2 <Blink>:
/**************************************************************************************
* Blink - do a # of blinks with a speed in msecs
* =====
**************************************************************************************/
void Blink(byte val, word speed)
{
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	c8 2f       	mov	r28, r24
     2e0:	8b 01       	movw	r16, r22
		SetOutput(BLINK_BRIGHTNESS);
		_delay_ms(speed);
		
		TurnOnBoardLed(0);
		SetOutput(0,0);
		_delay_ms(speed<<2);	// 4X delay OFF
     2e2:	7b 01       	movw	r14, r22
     2e4:	ee 0c       	add	r14, r14
     2e6:	ff 1c       	adc	r15, r15
     2e8:	ee 0c       	add	r14, r14
     2ea:	ff 1c       	adc	r15, r15
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
	ALT_PWM_LVL = pwm7135;
     2ec:	d8 e2       	ldi	r29, 0x28	; 40
* Blink - do a # of blinks with a speed in msecs
* =====
**************************************************************************************/
void Blink(byte val, word speed)
{
	for (; val>0; val--)
     2ee:	cc 23       	and	r28, r28
     2f0:	71 f0       	breq	.+28     	; 0x30e <Blink+0x3c>
	{
		TurnOnBoardLed(1);
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 df       	rcall	.-224    	; 0x216 <TurnOnBoardLed>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     2f6:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
     2f8:	d9 bd       	out	0x29, r29	; 41
{
	for (; val>0; val--)
	{
		TurnOnBoardLed(1);
		SetOutput(BLINK_BRIGHTNESS);
		_delay_ms(speed);
     2fa:	c8 01       	movw	r24, r16
     2fc:	83 df       	rcall	.-250    	; 0x204 <_delay_ms>
		
		TurnOnBoardLed(0);
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	8a df       	rcall	.-236    	; 0x216 <TurnOnBoardLed>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     302:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
     304:	19 bc       	out	0x29, r1	; 41
		SetOutput(BLINK_BRIGHTNESS);
		_delay_ms(speed);
		
		TurnOnBoardLed(0);
		SetOutput(0,0);
		_delay_ms(speed<<2);	// 4X delay OFF
     306:	c7 01       	movw	r24, r14
     308:	7d df       	rcall	.-262    	; 0x204 <_delay_ms>
* Blink - do a # of blinks with a speed in msecs
* =====
**************************************************************************************/
void Blink(byte val, word speed)
{
	for (; val>0; val--)
     30a:	c1 50       	subi	r28, 0x01	; 1
     30c:	f0 cf       	rjmp	.-32     	; 0x2ee <Blink+0x1c>
		
		TurnOnBoardLed(0);
		SetOutput(0,0);
		_delay_ms(speed<<2);	// 4X delay OFF
	}
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	08 95       	ret

0000031c <NumBlink>:
/**************************************************************************************
* NumBlink - do a # of blinks with a speed in msecs
* ========
**************************************************************************************/
void NumBlink(byte val, byte blinkModeIdx)
{
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	c8 2f       	mov	r28, r24
     324:	d6 2f       	mov	r29, r22
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
	ALT_PWM_LVL = pwm7135;
     326:	18 e2       	ldi	r17, 0x28	; 40
* NumBlink - do a # of blinks with a speed in msecs
* ========
**************************************************************************************/
void NumBlink(byte val, byte blinkModeIdx)
{
	for (; val>0; val--)
     328:	cc 23       	and	r28, r28
     32a:	01 f1       	breq	.+64     	; 0x36c <NumBlink+0x50>
	{
		if (modeIdx != blinkModeIdx)	// if the mode changed, bail out
     32c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     330:	8d 13       	cpse	r24, r29
     332:	1c c0       	rjmp	.+56     	; 0x36c <NumBlink+0x50>
			break;
			
#ifdef ONBOARD_LED_PIN
		TurnOnBoardLed(1);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	6f df       	rcall	.-290    	; 0x216 <TurnOnBoardLed>
#endif
		
		if ((onboardLedEnable == 0) || (bvldLedOnly == 0))
     338:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <onboardLedEnable>
     33c:	88 23       	and	r24, r24
     33e:	21 f0       	breq	.+8      	; 0x348 <NumBlink+0x2c>
     340:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <bvldLedOnly>
     344:	81 11       	cpse	r24, r1
     346:	02 c0       	rjmp	.+4      	; 0x34c <NumBlink+0x30>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     348:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
     34a:	19 bd       	out	0x29, r17	; 41
#endif
		
		if ((onboardLedEnable == 0) || (bvldLedOnly == 0))
			SetOutput(BLINK_BRIGHTNESS);
			
		_delay_ms(250);
     34c:	8a ef       	ldi	r24, 0xFA	; 250
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	59 df       	rcall	.-334    	; 0x204 <_delay_ms>
		
#ifdef ONBOARD_LED_PIN
		TurnOnBoardLed(0);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	60 df       	rcall	.-320    	; 0x216 <TurnOnBoardLed>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     356:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
     358:	19 bc       	out	0x29, r1	; 41
#ifdef ONBOARD_LED_PIN
		TurnOnBoardLed(0);
#endif

		SetOutput(0,0);
		_delay_ms(375);
     35a:	87 e7       	ldi	r24, 0x77	; 119
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	52 df       	rcall	.-348    	; 0x204 <_delay_ms>
		
		if (modeIdx != blinkModeIdx)	// if the mode changed, bail out
     360:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     364:	8d 13       	cpse	r24, r29
     366:	02 c0       	rjmp	.+4      	; 0x36c <NumBlink+0x50>
* NumBlink - do a # of blinks with a speed in msecs
* ========
**************************************************************************************/
void NumBlink(byte val, byte blinkModeIdx)
{
	for (; val>0; val--)
     368:	c1 50       	subi	r28, 0x01	; 1
     36a:	de cf       	rjmp	.-68     	; 0x328 <NumBlink+0xc>
		_delay_ms(375);
		
		if (modeIdx != blinkModeIdx)	// if the mode changed, bail out
			break;
	}
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	08 95       	ret

00000374 <BlinkOutNumber>:
/**************************************************************************************
* BlinkOutNumber - blinks out a # in 2 decimal digits
* ==============
**************************************************************************************/
void BlinkOutNumber(byte num, byte blinkMode)
{
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	d6 2f       	mov	r29, r22
	NumBlink(num / 10, blinkMode);
     37c:	6a e0       	ldi	r22, 0x0A	; 10
     37e:	b7 dc       	rcall	.-1682   	; 0xfffffcee <__eeprom_end+0xff7efcee>
     380:	19 2f       	mov	r17, r25
     382:	6d 2f       	mov	r22, r29
     384:	cb df       	rcall	.-106    	; 0x31c <NumBlink>
	if (modeIdx != blinkMode)		return;
     386:	c0 91 c1 00 	lds	r28, 0x00C1	; 0x8000c1 <modeIdx>
     38a:	cd 13       	cpse	r28, r29
     38c:	10 c0       	rjmp	.+32     	; 0x3ae <BlinkOutNumber+0x3a>
	_delay_ms(800);
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	93 e0       	ldi	r25, 0x03	; 3
     392:	38 df       	rcall	.-400    	; 0x204 <_delay_ms>
	NumBlink(num % 10, blinkMode);
     394:	6c 2f       	mov	r22, r28
     396:	81 2f       	mov	r24, r17
     398:	c1 df       	rcall	.-126    	; 0x31c <NumBlink>
	if (modeIdx != blinkMode)		return;
     39a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     39e:	8c 13       	cpse	r24, r28
     3a0:	06 c0       	rjmp	.+12     	; 0x3ae <BlinkOutNumber+0x3a>
	_delay_ms(2000);
     3a2:	80 ed       	ldi	r24, 0xD0	; 208
     3a4:	97 e0       	ldi	r25, 0x07	; 7
}
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
	NumBlink(num / 10, blinkMode);
	if (modeIdx != blinkMode)		return;
	_delay_ms(800);
	NumBlink(num % 10, blinkMode);
	if (modeIdx != blinkMode)		return;
	_delay_ms(2000);
     3ac:	2b cf       	rjmp	.-426    	; 0x204 <_delay_ms>
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	08 95       	ret

000003b6 <BlinkLVP>:
* BlinkLVP - blinks the specified time for use by LVP
* ========
*  Supports both ramping and mode set modes.
**************************************************************************************/
void BlinkLVP(byte BlinkCnt)
{
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
	int nMsecs = 250;
	if (BlinkCnt > 5)
     3c0:	86 30       	cpi	r24, 0x06	; 6
     3c2:	18 f0       	brcs	.+6      	; 0x3ca <BlinkLVP+0x14>
		nMsecs = 150;
     3c4:	06 e9       	ldi	r16, 0x96	; 150
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <BlinkLVP+0x18>
* ========
*  Supports both ramping and mode set modes.
**************************************************************************************/
void BlinkLVP(byte BlinkCnt)
{
	int nMsecs = 250;
     3ca:	0a ef       	ldi	r16, 0xFA	; 250
     3cc:	10 e0       	ldi	r17, 0x00	; 0
		TurnOnBoardLed(1);
		if (ramping)
			SetLevel(outLevel);
		else
			SetOutput(currOutLvl1, currOutLvl2);
		_delay_ms(nMsecs*2);
     3ce:	78 01       	movw	r14, r16
     3d0:	ee 0c       	add	r14, r14
     3d2:	ff 1c       	adc	r15, r15
     3d4:	c8 2f       	mov	r28, r24
	int nMsecs = 250;
	if (BlinkCnt > 5)
		nMsecs = 150;
		
	// Flash 'n' times before lowering
	while (BlinkCnt-- > 0)
     3d6:	cc 23       	and	r28, r28
     3d8:	d1 f0       	breq	.+52     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     3da:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
     3dc:	19 bc       	out	0x29, r1	; 41
		
	// Flash 'n' times before lowering
	while (BlinkCnt-- > 0)
	{
		SetOutput(0,0);
		_delay_ms(nMsecs);
     3de:	c8 01       	movw	r24, r16
     3e0:	11 df       	rcall	.-478    	; 0x204 <_delay_ms>
		TurnOnBoardLed(1);
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	18 df       	rcall	.-464    	; 0x216 <TurnOnBoardLed>
		if (ramping)
     3e6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     3ea:	88 23       	and	r24, r24
     3ec:	21 f0       	breq	.+8      	; 0x3f6 <BlinkLVP+0x40>
			SetLevel(outLevel);
     3ee:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
     3f2:	44 df       	rcall	.-376    	; 0x27c <SetLevel>
     3f4:	06 c0       	rjmp	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		else
			SetOutput(currOutLvl1, currOutLvl2);
     3f6:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <currOutLvl2>
     3fa:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <currOutLvl1>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     3fe:	98 bd       	out	0x28, r25	; 40
	ALT_PWM_LVL = pwm7135;
     400:	89 bd       	out	0x29, r24	; 41
		TurnOnBoardLed(1);
		if (ramping)
			SetLevel(outLevel);
		else
			SetOutput(currOutLvl1, currOutLvl2);
		_delay_ms(nMsecs*2);
     402:	c7 01       	movw	r24, r14
     404:	ff de       	rcall	.-514    	; 0x204 <_delay_ms>
		TurnOnBoardLed(0);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	06 df       	rcall	.-500    	; 0x216 <TurnOnBoardLed>
     40a:	c1 50       	subi	r28, 0x01	; 1
     40c:	e4 cf       	rjmp	.-56     	; 0x3d6 <BlinkLVP+0x20>
	}
}
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	08 95       	ret

0000041a <BlinkIndLed>:
/**************************************************************************************
* BlinkIndLed - blinks the indicator LED given time and count
* ===========
**************************************************************************************/
void BlinkIndLed(int nMsecs, byte nBlinkCnt)
{
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	8c 01       	movw	r16, r24
	while (nBlinkCnt-- > 0)
	{
		TurnOnBoardLed(1);
		_delay_ms(nMsecs);
		TurnOnBoardLed(0);
		_delay_ms(nMsecs >> 1);		// make it 1/2 the time for OFF
     426:	7c 01       	movw	r14, r24
     428:	f5 94       	asr	r15
     42a:	e7 94       	ror	r14
* BlinkIndLed - blinks the indicator LED given time and count
* ===========
**************************************************************************************/
void BlinkIndLed(int nMsecs, byte nBlinkCnt)
{
	while (nBlinkCnt-- > 0)
     42c:	c6 2f       	mov	r28, r22
     42e:	cc 23       	and	r28, r28
     430:	51 f0       	breq	.+20     	; 0x446 <BlinkIndLed+0x2c>
	{
		TurnOnBoardLed(1);
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	f0 de       	rcall	.-544    	; 0x216 <TurnOnBoardLed>
		_delay_ms(nMsecs);
     436:	c8 01       	movw	r24, r16
     438:	e5 de       	rcall	.-566    	; 0x204 <_delay_ms>
		TurnOnBoardLed(0);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	ec de       	rcall	.-552    	; 0x216 <TurnOnBoardLed>
		_delay_ms(nMsecs >> 1);		// make it 1/2 the time for OFF
     43e:	c7 01       	movw	r24, r14
     440:	e1 de       	rcall	.-574    	; 0x204 <_delay_ms>
     442:	c1 50       	subi	r28, 0x01	; 1
     444:	f4 cf       	rjmp	.-24     	; 0x42e <BlinkIndLed+0x14>
	}
}
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	08 95       	ret

00000452 <ConfigBlink>:
/**************************************************************************************
* ConfigBlink - do 2 quick blinks, followed by num count of long blinks
* ===========
**************************************************************************************/
void ConfigBlink(byte num)
{
     452:	cf 93       	push	r28
     454:	c8 2f       	mov	r28, r24
	Blink(2, 40);
     456:	68 e2       	ldi	r22, 0x28	; 40
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	3a df       	rcall	.-396    	; 0x2d2 <Blink>
	_delay_ms(240);
     45e:	80 ef       	ldi	r24, 0xF0	; 240
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	d0 de       	rcall	.-608    	; 0x204 <_delay_ms>
	Blink(num, 100);
     464:	64 e6       	ldi	r22, 0x64	; 100
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	8c 2f       	mov	r24, r28
     46a:	33 df       	rcall	.-410    	; 0x2d2 <Blink>

	configIdleTime = 0;		// reset the timeout after the blinks complete
     46c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <configIdleTime>
}
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <IsPressed>:
{
	static byte pressed = 0;
	// Keep track of last switch values polled
	static byte buffer = 0x00;
	// Shift over and tack on the latest value, 0 being low for pressed, 1 for pulled-up for released
	buffer = (buffer << 1) | ((PINB & (1 << SWITCH_PIN)) == 0);
     474:	86 b3       	in	r24, 0x16	; 22
     476:	83 fb       	bst	r24, 3
     478:	88 27       	eor	r24, r24
     47a:	80 f9       	bld	r24, 0
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	98 27       	eor	r25, r24
     480:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <buffer.1911>
     484:	88 0f       	add	r24, r24
     486:	89 2b       	or	r24, r25
     488:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <buffer.1911>
	
	if (pressed) {
     48c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <pressed.1910>
     490:	99 23       	and	r25, r25
     492:	11 f0       	breq	.+4      	; 0x498 <IsPressed+0x24>
		// Need to look for a release indicator by seeing if the last switch status has been 0 for n number of polls
		pressed = (buffer & DB_REL_DUR);
     494:	8f 70       	andi	r24, 0x0F	; 15
     496:	01 c0       	rjmp	.+2      	; 0x49a <IsPressed+0x26>
	} else {
		// Need to look for pressed indicator by seeing if the last switch status was 1 for n number of polls
		pressed = ((buffer & DB_PRES_DUR) == DB_PRES_DUR);
     498:	81 70       	andi	r24, 0x01	; 1
     49a:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <pressed.1910>
	}

	return pressed;
     49e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <pressed.1910>
}
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	08 95       	ret

000004a6 <NextMode>:
* NextMode - switch's to next mode, higher output mode
* =========
**************************************************************************************/
void NextMode()
{
	if (modeIdx < 16)	// 11/16/14 TE: bug fix to exit strobe mode when doing a long press in strobe mode
     4a6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     4aa:	80 31       	cpi	r24, 0x10	; 16
     4ac:	20 f4       	brcc	.+8      	; 0x4b6 <NextMode+0x10>
		prevModeIdx	= modeIdx;
     4ae:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     4b2:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <prevModeIdx>

	if (++modeIdx >= modesCnt)
     4b6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     4ba:	8f 5f       	subi	r24, 0xFF	; 255
     4bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
     4c0:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <modesCnt>
     4c4:	89 17       	cp	r24, r25
     4c6:	10 f0       	brcs	.+4      	; 0x4cc <NextMode+0x26>
	{
		// Wrap around
		modeIdx = 0;
     4c8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
     4cc:	08 95       	ret

000004ce <PrevMode>:
* PrevMode - switch's to previous mode, lower output mode
* =========
**************************************************************************************/
void PrevMode()
{
	prevModeIdx	 = modeIdx;
     4ce:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     4d2:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <prevModeIdx>

	if (modeIdx == 0)
     4d6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     4da:	81 11       	cpse	r24, r1
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <PrevMode+0x16>
		modeIdx = modesCnt - 1;	// Wrap around
     4de:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <modesCnt>
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <PrevMode+0x1a>
	else
		--modeIdx;
     4e4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     4e8:	81 50       	subi	r24, 0x01	; 1
     4ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
     4ee:	08 95       	ret

000004f0 <__vector_2>:
	GIMSK &= ~(1 << PCIE);
}

// Need an interrupt for when pin change is enabled to ONLY wake us from sleep.
// All logic of what to do when we wake up will be handled in the main loop.
EMPTY_INTERRUPT(PCINT0_vect);
     4f0:	18 95       	reti

000004f2 <WrEEPROM>:
* WrEEPROM - writes a byte at the given EEPROM location (only byte address supported)
* ========
**************************************************************************************/
void WrEEPROM (byte flashAddr, byte value)
{
	EEARL=flashAddr;   EEDR=value; EECR=32+4; EECR=32+4+2;  //WRITE  //32:write only (no erase)  4:enable  2:go
     4f2:	8e bb       	out	0x1e, r24	; 30
     4f4:	6d bb       	out	0x1d, r22	; 29
     4f6:	84 e2       	ldi	r24, 0x24	; 36
     4f8:	8c bb       	out	0x1c, r24	; 28
     4fa:	86 e2       	ldi	r24, 0x26	; 38
     4fc:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     4fe:	e1 99       	sbic	0x1c, 1	; 28
     500:	fe cf       	rjmp	.-4      	; 0x4fe <WrEEPROM+0xc>
}
     502:	08 95       	ret

00000504 <SaveConfig>:
*   bit    4: 1: moonlight mode - 1=enabled, 0=disabled
*   bit  5-6: blinky mode config: 1=strobe only, 2=all blinkies, 0=disable
*
**************************************************************************************/
void SaveConfig()
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
	
	// Pack all settings into one byte
	config1 = (byte)(word)(modeIdx | (modeSetIdx << 3) | (ramping << 7));
     508:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <modeIdx>
     50c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <modeSetIdx>
     510:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <ramping>
     514:	88 0f       	add	r24, r24
     516:	88 0f       	add	r24, r24
     518:	88 0f       	add	r24, r24
     51a:	97 95       	ror	r25
     51c:	99 27       	eor	r25, r25
     51e:	97 95       	ror	r25
     520:	69 2f       	mov	r22, r25
     522:	68 2b       	or	r22, r24
     524:	62 2b       	or	r22, r18
     526:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <config1>
	config2 = (byte)(word)(highToLow | (modeMemoryEnabled << 1) | (moonlightLevel << 2) | (stepdownMode << 5));
     52a:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <highToLow>
     52e:	30 91 cf 00 	lds	r19, 0x00CF	; 0x8000cf <modeMemoryEnabled>
     532:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <moonlightLevel>
     536:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepdownMode>
     53a:	33 0f       	add	r19, r19
     53c:	99 0f       	add	r25, r25
     53e:	99 0f       	add	r25, r25
     540:	93 2b       	or	r25, r19
     542:	92 2b       	or	r25, r18
     544:	82 95       	swap	r24
     546:	88 0f       	add	r24, r24
     548:	80 7e       	andi	r24, 0xE0	; 224
     54a:	89 2b       	or	r24, r25
     54c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <config2>
	config3 = (byte)(word)(OffTimeEnable | (onboardLedEnable << 1) | (locatorLedOn << 2) | (bvldLedOnly << 3) | (moonLightEnable << 4) | (blinkyMode << 5));
     550:	40 91 cd 00 	lds	r20, 0x00CD	; 0x8000cd <OffTimeEnable>
     554:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <onboardLedEnable>
     558:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <locatorLedOn>
     55c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <bvldLedOnly>
     560:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <moonLightEnable>
     564:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <blinkyMode>
     568:	55 0f       	add	r21, r21
     56a:	33 0f       	add	r19, r19
     56c:	33 0f       	add	r19, r19
     56e:	35 2b       	or	r19, r21
     570:	34 2b       	or	r19, r20
     572:	99 0f       	add	r25, r25
     574:	99 0f       	add	r25, r25
     576:	99 0f       	add	r25, r25
     578:	29 2f       	mov	r18, r25
     57a:	23 2b       	or	r18, r19
     57c:	82 95       	swap	r24
     57e:	80 7f       	andi	r24, 0xF0	; 240
     580:	98 2f       	mov	r25, r24
     582:	92 2b       	or	r25, r18
     584:	87 2f       	mov	r24, r23
     586:	82 95       	swap	r24
     588:	88 0f       	add	r24, r24
     58a:	80 7e       	andi	r24, 0xE0	; 224
     58c:	89 2b       	or	r24, r25
     58e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <config3>
	
	byte oldpos = eepos;
     592:	c0 91 ab 00 	lds	r28, 0x00AB	; 0x8000ab <eepos>
     596:	d0 91 ac 00 	lds	r29, 0x00AC	; 0x8000ac <eepos+0x1>
	
	eepos = (eepos+4) & 127;  // wear leveling, use next cell
     59a:	ce 01       	movw	r24, r28
     59c:	04 96       	adiw	r24, 0x04	; 4
     59e:	8f 77       	andi	r24, 0x7F	; 127
     5a0:	99 27       	eor	r25, r25
     5a2:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <eepos+0x1>
     5a6:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <eepos>
	
	// Write the current settings (3 bytes)
	WrEEPROM (eepos, config1);
     5aa:	a3 df       	rcall	.-186    	; 0x4f2 <WrEEPROM>
	WrEEPROM (eepos+1, config2);
     5ac:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <eepos>
     5b0:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <config2>
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	9d df       	rcall	.-198    	; 0x4f2 <WrEEPROM>
	WrEEPROM (eepos+2, config3);
     5b8:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <eepos>
     5bc:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <config3>
     5c0:	8e 5f       	subi	r24, 0xFE	; 254
     5c2:	97 df       	rcall	.-210    	; 0x4f2 <WrEEPROM>
//	while(EECR & 2)  ; // wait for completion
//	EEARL=eepos+2; EEDR=config3; EECR=32+4; EECR=32+4+2;  //WRITE  //32:write only (no erase)  4:enable  2:go
//	while(EECR & 2)  ; // wait for completion
	
	// Erase the last settings (4 bytes)
	EEARL=oldpos;   EECR=16+4; EECR=16+4+2;  //ERASE  //16:erase only (no write)  4:enable  2:go
     5c4:	ce bb       	out	0x1e, r28	; 30
     5c6:	84 e1       	ldi	r24, 0x14	; 20
     5c8:	8c bb       	out	0x1c, r24	; 28
     5ca:	86 e1       	ldi	r24, 0x16	; 22
     5cc:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     5ce:	e1 99       	sbic	0x1c, 1	; 28
     5d0:	fe cf       	rjmp	.-4      	; 0x5ce <SaveConfig+0xca>
	EEARL=oldpos+1; EECR=16+4; EECR=16+4+2;  //ERASE  //16:erase only (no write)  4:enable  2:go
     5d2:	8c 2f       	mov	r24, r28
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
     5d6:	8e bb       	out	0x1e, r24	; 30
     5d8:	84 e1       	ldi	r24, 0x14	; 20
     5da:	8c bb       	out	0x1c, r24	; 28
     5dc:	86 e1       	ldi	r24, 0x16	; 22
     5de:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     5e0:	e1 99       	sbic	0x1c, 1	; 28
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <SaveConfig+0xdc>
	EEARL=oldpos+2; EECR=16+4; EECR=16+4+2;  //ERASE  //16:erase only (no write)  4:enable  2:go
     5e4:	8c 2f       	mov	r24, r28
     5e6:	8e 5f       	subi	r24, 0xFE	; 254
     5e8:	8e bb       	out	0x1e, r24	; 30
     5ea:	84 e1       	ldi	r24, 0x14	; 20
     5ec:	8c bb       	out	0x1c, r24	; 28
     5ee:	86 e1       	ldi	r24, 0x16	; 22
     5f0:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     5f2:	e1 99       	sbic	0x1c, 1	; 28
     5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <SaveConfig+0xee>
	EEARL=oldpos+3; EECR=16+4; EECR=16+4+2;  //ERASE  //16:erase only (no write)  4:enable  2:go
     5f6:	cd 5f       	subi	r28, 0xFD	; 253
     5f8:	ce bb       	out	0x1e, r28	; 30
     5fa:	84 e1       	ldi	r24, 0x14	; 20
     5fc:	8c bb       	out	0x1c, r24	; 28
     5fe:	86 e1       	ldi	r24, 0x16	; 22
     600:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     602:	e1 99       	sbic	0x1c, 1	; 28
     604:	fe cf       	rjmp	.-4      	; 0x602 <SaveConfig+0xfe>
	
	// Write the validation marker byte out
	WrEEPROM (eepos+3, 0x5d);
     606:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <eepos>
     60a:	6d e5       	ldi	r22, 0x5D	; 93
     60c:	8d 5f       	subi	r24, 0xFD	; 253
//	EEARL=eepos+3; EEDR=0x5d; EECR=32+4; EECR=32+4+2;  //WRITE  //32:write only (no erase)  4:enable  2:go
//	while(EECR & 2)  ; // wait for completion
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
	while(EECR & 2)  ; // wait for completion
	EEARL=oldpos+3; EECR=16+4; EECR=16+4+2;  //ERASE  //16:erase only (no write)  4:enable  2:go
	while(EECR & 2)  ; // wait for completion
	
	// Write the validation marker byte out
	WrEEPROM (eepos+3, 0x5d);
     612:	6f cf       	rjmp	.-290    	; 0x4f2 <WrEEPROM>

00000614 <__vector_8>:
/**************************************************************************************** 
* ADC_vect - ADC done interrupt service routine
* ========
****************************************************************************************/
ISR(ADC_vect)
{
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
	word wAdcVal = ADC;	// Read in the ADC 10 bit value (0..1023)
     62c:	64 b1       	in	r22, 0x04	; 4
     62e:	75 b1       	in	r23, 0x05	; 5

	// Voltage Monitoring
	if (adc_step == 1)									// ignore first ADC value from step 0
     630:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <adc_step>
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	21 f5       	brne	.+72     	; 0x680 <__vector_8+0x6c>
	{
	  #ifdef VOLT_MON_R1R2
		byVoltage = (byte)(wAdcVal >> 2);		// convert to 8 bits, throw away 2 LSB's
	  #else
		// Read cell voltage, applying the 
		wAdcVal = (11264 + (wAdcVal >> 1))/wAdcVal + D1_DIODE;		// in volts * 10: 10 * 1.1 * 1024 / ADC + D1_DIODE, rounded
     638:	cb 01       	movw	r24, r22
     63a:	96 95       	lsr	r25
     63c:	87 95       	ror	r24
     63e:	94 5d       	subi	r25, 0xD4	; 212
     640:	62 db       	rcall	.-2364   	; 0xfffffd06 <__eeprom_end+0xff7efd06>
     642:	6d 5f       	subi	r22, 0xFD	; 253
     644:	7f 4f       	sbci	r23, 0xFF	; 255
		if (byVoltage > 0)
     646:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <byVoltage>
     64a:	88 23       	and	r24, r24
     64c:	b9 f0       	breq	.+46     	; 0x67c <__vector_8+0x68>
		{
			if (byVoltage < wAdcVal)			// crude low pass filter
     64e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <byVoltage>
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	86 17       	cp	r24, r22
     656:	97 07       	cpc	r25, r23
     658:	28 f4       	brcc	.+10     	; 0x664 <__vector_8+0x50>
				++byVoltage;
     65a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <byVoltage>
     65e:	8f 5f       	subi	r24, 0xFF	; 255
     660:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <byVoltage>
			if (byVoltage > wAdcVal)
     664:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <byVoltage>
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	68 17       	cp	r22, r24
     66c:	79 07       	cpc	r23, r25
     66e:	40 f4       	brcc	.+16     	; 0x680 <__vector_8+0x6c>
				--byVoltage;
     670:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <byVoltage>
     674:	81 50       	subi	r24, 0x01	; 1
     676:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <byVoltage>
     67a:	02 c0       	rjmp	.+4      	; 0x680 <__vector_8+0x6c>
		}
		else
			byVoltage = (byte)wAdcVal;							// prime on first read
     67c:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <byVoltage>
	  #endif
	} 
	
	// Temperature monitoring
	if (adc_step == 3)									// ignore first ADC value from step 2
     680:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <adc_step>
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	f9 f4       	brne	.+62     	; 0x6c6 <__vector_8+0xb2>
	{
		//----------------------------------------------------------------------------------
		// Read the MCU temperature, applying a calibration offset value
		//----------------------------------------------------------------------------------
		wAdcVal = wAdcVal - 275 + TEMP_CAL_OFFSET;			// 300 = 25 degC
     688:	60 51       	subi	r22, 0x10	; 16
     68a:	71 40       	sbci	r23, 0x01	; 1
		
		if (byTempReading > 0)
     68c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <byTempReading>
     690:	88 23       	and	r24, r24
     692:	b9 f0       	breq	.+46     	; 0x6c2 <__vector_8+0xae>
		{
			if (byTempReading < wAdcVal)	// crude low pass filter
     694:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <byTempReading>
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	86 17       	cp	r24, r22
     69c:	97 07       	cpc	r25, r23
     69e:	28 f4       	brcc	.+10     	; 0x6aa <__vector_8+0x96>
				++byTempReading;
     6a0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <byTempReading>
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <byTempReading>
			if (byTempReading > wAdcVal)
     6aa:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <byTempReading>
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	68 17       	cp	r22, r24
     6b2:	79 07       	cpc	r23, r25
     6b4:	40 f4       	brcc	.+16     	; 0x6c6 <__vector_8+0xb2>
				--byTempReading;
     6b6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <byTempReading>
     6ba:	81 50       	subi	r24, 0x01	; 1
     6bc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <byTempReading>
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <__vector_8+0xb2>
		}
		else
			byTempReading = wAdcVal;						// prime on first read
     6c2:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <byTempReading>
	}
	
	//adc_step = (adc_step +1) & 0x3;	// increment but keep in range of 0..3
	if (++adc_step > 3)		// increment but keep in range of 0..3
     6c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <adc_step>
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <adc_step>
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	10 f0       	brcs	.+4      	; 0x6d8 <__vector_8+0xc4>
		adc_step = 0;
     6d4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <adc_step>
		
	if (adc_step < 2)							// steps 0, 1 read voltage, steps 2, 3 read temperature
     6d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <adc_step>
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	10 f4       	brcc	.+4      	; 0x6e4 <__vector_8+0xd0>
	{
	  #ifdef VOLT_MON_R1R2
		ADMUX = ADCMUX_VCC_R1R2;			// 1.1v reference, not left-adjust, ADC1/PB2
	#else
		ADMUX  = ADCMUX_VCC_INTREF;		// not left-adjust, Vbg
     6e0:	8c e0       	ldi	r24, 0x0C	; 12
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <__vector_8+0xd2>
	  #endif
	}
	else
		ADMUX = ADCMUX_TEMP;	// temperature
     6e4:	8f e8       	ldi	r24, 0x8F	; 143
     6e6:	87 b9       	out	0x07, r24	; 7
}
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	7f 91       	pop	r23
     6f2:	6f 91       	pop	r22
     6f4:	5f 91       	pop	r21
     6f6:	0f 90       	pop	r0
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	0f 90       	pop	r0
     6fc:	1f 90       	pop	r1
     6fe:	18 95       	reti

00000700 <__vector_12>:
/**************************************************************************************
* WDT_vect - The watchdog timer - this is invoked every 16ms
* ========
**************************************************************************************/
ISR(WDT_vect)
{
     700:	1f 92       	push	r1
     702:	0f 92       	push	r0
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	4f 93       	push	r20
     710:	5f 93       	push	r21
     712:	6f 93       	push	r22
     714:	7f 93       	push	r23
     716:	8f 93       	push	r24
     718:	9f 93       	push	r25
     71a:	af 93       	push	r26
     71c:	bf 93       	push	r27
     71e:	ef 93       	push	r30
     720:	ff 93       	push	r31
	static word adc_ticks = ADC_DELAY;
	static byte lowbatt_cnt = 0;
  #endif

	// Enforce a start-up delay so no switch actions processed initially  
	if (byStartupDelayTime > 0)
     722:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <byStartupDelayTime>
     726:	88 23       	and	r24, r24
     728:	21 f0       	breq	.+8      	; 0x732 <__vector_12+0x32>
	{
		--byStartupDelayTime;
     72a:	81 50       	subi	r24, 0x01	; 1
     72c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <byStartupDelayTime>
		return;
     730:	39 c4       	rjmp	.+2162   	; 0xfa4 <__vector_12+0x8a4>
	}

	if (wThermalTicks > 0)	// decrement each tick if active
     732:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <wThermalTicks>
     736:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <wThermalTicks+0x1>
     73a:	89 2b       	or	r24, r25
     73c:	49 f0       	breq	.+18     	; 0x750 <__vector_12+0x50>
		--wThermalTicks;
     73e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <wThermalTicks>
     742:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <wThermalTicks+0x1>
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <wThermalTicks+0x1>
     74c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <wThermalTicks>
	//---------------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------------
   // Button is pressed
	//---------------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------------
	if (IsPressed())
     750:	91 de       	rcall	.-734    	; 0x474 <IsPressed>
     752:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <wPressDuration>
     756:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <wPressDuration+0x1>
     75a:	89 2b       	or	r24, r25
     75c:	09 f4       	brne	.+2      	; 0x760 <__vector_12+0x60>
     75e:	ba c1       	rjmp	.+884    	; 0xad4 <__vector_12+0x3d4>
	{
		if (wPressDuration < 2000)
     760:	20 3d       	cpi	r18, 0xD0	; 208
     762:	87 e0       	ldi	r24, 0x07	; 7
     764:	38 07       	cpc	r19, r24
     766:	30 f4       	brcc	.+12     	; 0x774 <__vector_12+0x74>
			wPressDuration++;
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	30 93 be 00 	sts	0x00BE, r19	; 0x8000be <wPressDuration+0x1>
     770:	20 93 bd 00 	sts	0x00BD, r18	; 0x8000bd <wPressDuration>

		//---------------------------------------------------------------------------------------
		// Handle "button stuck" safety timeout
		//---------------------------------------------------------------------------------------
		if (wPressDuration == 1250)	// 20 seconds
     774:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <wPressDuration>
     778:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <wPressDuration+0x1>
     77c:	82 3e       	cpi	r24, 0xE2	; 226
     77e:	24 e0       	ldi	r18, 0x04	; 4
     780:	92 07       	cpc	r25, r18
     782:	71 f4       	brne	.+28     	; 0x7a0 <__vector_12+0xa0>
		{
			modeIdx = outLevel = rampingLevel = 0;
     784:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
     788:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <outLevel>
     78c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
			rampState = 0;
     790:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <rampState>
			byLockOutSet = 1;		// set "LOCK OUT"
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <byLockOutSet>
			ConfigMode = 0;
     79a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <ConfigMode>
			return;
     79e:	02 c4       	rjmp	.+2052   	; 0xfa4 <__vector_12+0x8a4>
		}
		
		//---------------------------------------------------------------------------------------
		// Handle config mode specially right here:
		//---------------------------------------------------------------------------------------
		if (ConfigMode > 0)
     7a0:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <ConfigMode>
     7a4:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <holdHandled>
     7a8:	33 23       	and	r19, r19
     7aa:	b1 f0       	breq	.+44     	; 0x7d8 <__vector_12+0xd8>
		{
			configIdleTime = 0;
     7ac:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <configIdleTime>
			
			if (!holdHandled)
     7b0:	21 11       	cpse	r18, r1
     7b2:	f8 c3       	rjmp	.+2032   	; 0xfa4 <__vector_12+0x8a4>
			{
				if (wPressDuration == 35)		// hold time for skipping: 35*16 = 560 msecs
     7b4:	83 32       	cpi	r24, 0x23	; 35
     7b6:	91 05       	cpc	r25, r1
     7b8:	21 f4       	brne	.+8      	; 0x7c2 <__vector_12+0xc2>
					++ConfigMode;
     7ba:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
     7be:	8f 5f       	subi	r24, 0xFF	; 255
     7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <__vector_12+0xd2>
				else if (wPressDuration == 70)	// hold time for bailing out: 70*16 = 1.1 secs
     7c2:	86 34       	cpi	r24, 0x46	; 70
     7c4:	91 05       	cpc	r25, r1
     7c6:	09 f0       	breq	.+2      	; 0x7ca <__vector_12+0xca>
     7c8:	ed c3       	rjmp	.+2010   	; 0xfa4 <__vector_12+0x8a4>
				{
					holdHandled = 1;		// suppress more hold events on this hold
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <holdHandled>
					ConfigMode = 15;		// Exit Config mode
     7d0:	8f e0       	ldi	r24, 0x0F	; 15
     7d2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <ConfigMode>
     7d6:	e6 c3       	rjmp	.+1996   	; 0xfa4 <__vector_12+0x8a4>
				}
			}
			return;
		}

		if (!holdHandled)
     7d8:	21 11       	cpse	r18, r1
     7da:	71 c1       	rjmp	.+738    	; 0xabe <__vector_12+0x3be>
		{
			//------------------------------------------------------------------------------
			//	Ramping - pressed button
			//------------------------------------------------------------------------------
			if (ramping)
     7dc:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <ramping>
     7e0:	22 23       	and	r18, r18
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <__vector_12+0xe6>
     7e4:	9d c0       	rjmp	.+314    	; 0x920 <__vector_12+0x220>
			{
				if ((wPressDuration >= SHORT_CLICK_DUR) && !byLockOutSet && !byDelayRamping && (modeIdx < BATT_CHECK_MODE))
     7e6:	42 97       	sbiw	r24, 0x12	; 18
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <__vector_12+0xec>
     7ea:	9a c0       	rjmp	.+308    	; 0x920 <__vector_12+0x220>
     7ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
     7f0:	81 11       	cpse	r24, r1
     7f2:	96 c0       	rjmp	.+300    	; 0x920 <__vector_12+0x220>
     7f4:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <byDelayRamping>
     7f8:	81 11       	cpse	r24, r1
     7fa:	92 c0       	rjmp	.+292    	; 0x920 <__vector_12+0x220>
     7fc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     800:	80 35       	cpi	r24, 0x50	; 80
     802:	08 f0       	brcs	.+2      	; 0x806 <__vector_12+0x106>
     804:	8d c0       	rjmp	.+282    	; 0x920 <__vector_12+0x220>
				{
					switch (rampState)
     806:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <rampState>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	09 f4       	brne	.+2      	; 0x810 <__vector_12+0x110>
     80e:	59 c0       	rjmp	.+178    	; 0x8c2 <__vector_12+0x1c2>
     810:	38 f0       	brcs	.+14     	; 0x820 <__vector_12+0x120>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	09 f4       	brne	.+2      	; 0x818 <__vector_12+0x118>
     816:	5d c0       	rjmp	.+186    	; 0x8d2 <__vector_12+0x1d2>
     818:	83 30       	cpi	r24, 0x03	; 3
     81a:	09 f4       	brne	.+2      	; 0x81e <__vector_12+0x11e>
     81c:	64 c0       	rjmp	.+200    	; 0x8e6 <__vector_12+0x1e6>
     81e:	80 c0       	rjmp	.+256    	; 0x920 <__vector_12+0x220>
					{
					 case 0:		// ramping not initialized yet
						if (rampingLevel == 0)
     820:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     824:	81 11       	cpse	r24, r1
     826:	20 c0       	rjmp	.+64     	; 0x868 <__vector_12+0x168>
						{
							rampState = 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <rampState>
							rampPauseCntDn = RAMP_MOON_PAUSE;	// delay a little on moon
     82e:	87 e1       	ldi	r24, 0x17	; 23
     830:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <rampPauseCntDn>

							SetOutput(0,moonlightLevel);
     834:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <moonlightLevel>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     838:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
     83a:	89 bd       	out	0x29, r24	; 41
						{
							rampState = 1;
							rampPauseCntDn = RAMP_MOON_PAUSE;	// delay a little on moon

							SetOutput(0,moonlightLevel);
							if (locatorLed)
     83c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <locatorLed>
     840:	88 23       	and	r24, r24
     842:	11 f0       	breq	.+4      	; 0x848 <__vector_12+0x148>
								TurnOnBoardLed(0);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	e7 dc       	rcall	.-1586   	; 0x216 <TurnOnBoardLed>
								
							// set this to the 1st level for the current mode
							outLevel = rampingLevel = 255;
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rampingLevel>
     84e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <outLevel>
							
							if (savedLevel == 0)
     852:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <savedLevel>
     856:	81 11       	cpse	r24, r1
     858:	04 c0       	rjmp	.+8      	; 0x862 <__vector_12+0x162>
								savedLevel = rampingLevel;
     85a:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     85e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <savedLevel>

							dontToggleDir = 0;						// clear it in case it got set from a timeout
     862:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <dontToggleDir>
     866:	5c c0       	rjmp	.+184    	; 0x920 <__vector_12+0x220>
						}
						else
						{
							#ifdef RAMPING_REVERSE
								if (dontToggleDir)
     868:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <dontToggleDir>
     86c:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <rampLastDirState>
     870:	88 23       	and	r24, r24
     872:	29 f0       	breq	.+10     	; 0x87e <__vector_12+0x17e>
								{
									rampState = rampLastDirState;			// keep it in the same
     874:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <rampState>
									dontToggleDir = 0;						//clear it so it can't happen again til another timeout
     878:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <dontToggleDir>
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__vector_12+0x186>
								}
								else
									rampState = 5 - rampLastDirState;	// 2->3, or 3->2
     87e:	85 e0       	ldi	r24, 0x05	; 5
     880:	89 1b       	sub	r24, r25
     882:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <rampState>
							#else
								rampState = 2;	// lo->hi
							#endif
							if (rampingLevel == MAX_RAMP_LEVEL)
     886:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     88a:	86 39       	cpi	r24, 0x96	; 150
     88c:	21 f4       	brne	.+8      	; 0x896 <__vector_12+0x196>
							{
								rampState = 3;	// hi->lo
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <rampState>
     894:	0a c0       	rjmp	.+20     	; 0x8aa <__vector_12+0x1aa>
								outLevel = MAX_RAMP_LEVEL;
								SetLevel(outLevel);
							}
							else if (rampingLevel == 255)	// If stopped in ramping moon mode, start from lowest
     896:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     89a:	8f 3f       	cpi	r24, 0xFF	; 255
     89c:	51 f4       	brne	.+20     	; 0x8b2 <__vector_12+0x1b2>
							{
								rampState = 2; // lo->hi
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <rampState>
								outLevel = rampingLevel = 1;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rampingLevel>
     8aa:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <outLevel>
     8ae:	c1 dc       	rcall	.-1662   	; 0x232 <SetLevel.part.1>
     8b0:	37 c0       	rjmp	.+110    	; 0x920 <__vector_12+0x220>
								SetLevel(outLevel);
							}
							else if (rampingLevel == 1)
     8b2:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	99 f5       	brne	.+102    	; 0x920 <__vector_12+0x220>
								rampState = 2;	// lo->hi
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <rampState>
     8c0:	2f c0       	rjmp	.+94     	; 0x920 <__vector_12+0x220>
						}
						break;
						
					 case 1:		// in moon mode
						if (--rampPauseCntDn == 0)
     8c2:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <rampPauseCntDn>
     8c6:	81 50       	subi	r24, 0x01	; 1
     8c8:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <rampPauseCntDn>
     8cc:	81 11       	cpse	r24, r1
     8ce:	28 c0       	rjmp	.+80     	; 0x920 <__vector_12+0x220>
     8d0:	e6 cf       	rjmp	.-52     	; 0x89e <__vector_12+0x19e>
							SetLevel(outLevel);
						}
						break;
						
					 case 2:		// lo->hi
						rampLastDirState = 2;
     8d2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <rampLastDirState>
						if (rampingLevel < MAX_RAMP_LEVEL)
     8d6:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     8da:	86 39       	cpi	r24, 0x96	; 150
     8dc:	b0 f4       	brcc	.+44     	; 0x90a <__vector_12+0x20a>
						{
							outLevel = ++rampingLevel;
     8de:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     8e2:	8f 5f       	subi	r24, 0xFF	; 255
     8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__vector_12+0x1f8>
						}
						SetLevel(outLevel);
						break;
						
					 case 3:		// hi->lo
						rampLastDirState = 3;
     8e6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <rampLastDirState>
						if (rampingLevel > 1)
     8ea:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	60 f0       	brcs	.+24     	; 0x90a <__vector_12+0x20a>
						{
							outLevel = --rampingLevel;
     8f2:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     8f6:	81 50       	subi	r24, 0x01	; 1
     8f8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rampingLevel>
     8fc:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <outLevel>
							savedLevel = rampingLevel;
     900:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     904:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <savedLevel>
     908:	08 c0       	rjmp	.+16     	; 0x91a <__vector_12+0x21a>
						}
						else
						{
							rampState = 4;
     90a:	84 e0       	ldi	r24, 0x04	; 4
     90c:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <rampState>
							SetLevel(0);		// Do a quick blink
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	b4 dc       	rcall	.-1688   	; 0x27c <SetLevel>
							_delay_ms(7);
     914:	87 e0       	ldi	r24, 0x07	; 7
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	75 dc       	rcall	.-1814   	; 0x204 <_delay_ms>
						}
						SetLevel(outLevel);
     91a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
     91e:	ae dc       	rcall	.-1700   	; 0x27c <SetLevel>
			} // ramping
			
			//---------------------------------------------------------------------------------------
			// LONG hold - for previous mode
			//---------------------------------------------------------------------------------------
			if (!ramping && (wPressDuration == LONG_PRESS_DUR) && !byLockOutSet)
     920:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     924:	81 11       	cpse	r24, r1
     926:	2c c0       	rjmp	.+88     	; 0x980 <__vector_12+0x280>
     928:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <wPressDuration>
     92c:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <wPressDuration+0x1>
     930:	48 97       	sbiw	r24, 0x18	; 24
     932:	31 f5       	brne	.+76     	; 0x980 <__vector_12+0x280>
     934:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
     938:	81 11       	cpse	r24, r1
     93a:	22 c0       	rjmp	.+68     	; 0x980 <__vector_12+0x280>
			{
				if (modeIdx < 16)
     93c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     940:	80 31       	cpi	r24, 0x10	; 16
     942:	40 f4       	brcc	.+16     	; 0x954 <__vector_12+0x254>
				{
					// Long press
					if (highToLow)
     944:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <highToLow>
     948:	88 23       	and	r24, r24
     94a:	11 f0       	breq	.+4      	; 0x950 <__vector_12+0x250>
						NextMode();
     94c:	ac dd       	rcall	.-1192   	; 0x4a6 <NextMode>
     94e:	18 c0       	rjmp	.+48     	; 0x980 <__vector_12+0x280>
					else
						PrevMode();
     950:	be dd       	rcall	.-1156   	; 0x4ce <PrevMode>
     952:	16 c0       	rjmp	.+44     	; 0x980 <__vector_12+0x280>
				}
				else if (modeIdx > SPECIAL_MODES)
     954:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     958:	8b 35       	cpi	r24, 0x5B	; 91
     95a:	90 f0       	brcs	.+36     	; 0x980 <__vector_12+0x280>
				{
					if (specModeIdx > 0)
     95c:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <specModeIdx>
     960:	ee 23       	and	r30, r30
     962:	51 f0       	breq	.+20     	; 0x978 <__vector_12+0x278>
					{
						--specModeIdx;
     964:	e1 50       	subi	r30, 0x01	; 1
     966:	e0 93 f0 00 	sts	0x00F0, r30	; 0x8000f0 <specModeIdx>
						modeIdx = specialModes[specModeIdx];
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	e3 56       	subi	r30, 0x63	; 99
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	80 81       	ld	r24, Z
     972:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
     976:	04 c0       	rjmp	.+8      	; 0x980 <__vector_12+0x280>
					}
					else
					{
						byDelayRamping = 1;		// ensure no ramping handling takes place for this hold
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <byDelayRamping>
						ExitSpecialModes();		// bail out of special modes
     97e:	97 dc       	rcall	.-1746   	; 0x2ae <ExitSpecialModes>
			}

			//---------------------------------------------------------------------------------------
			// XLONG hold - for strobes, battery check, or lock-out (depending on preceding quick clicks)
			//---------------------------------------------------------------------------------------
			if (wPressDuration == XLONG_PRESS_DUR)
     980:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <wPressDuration>
     984:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <wPressDuration+0x1>
     988:	84 34       	cpi	r24, 0x44	; 68
     98a:	91 05       	cpc	r25, r1
     98c:	09 f0       	breq	.+2      	; 0x990 <__vector_12+0x290>
     98e:	68 c0       	rjmp	.+208    	; 0xa60 <__vector_12+0x360>
			{
				if ((byLockOutEnable == 1) && (quickClicks == 2) && (wIdleTicks < LOCK_OUT_TICKS))
     990:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <byLockOutEnable>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	29 f5       	brne	.+74     	; 0x9e2 <__vector_12+0x2e2>
     998:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	09 f5       	brne	.+66     	; 0x9e2 <__vector_12+0x2e2>
     9a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <wIdleTicks>
     9a4:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
     9a8:	0e 97       	sbiw	r24, 0x0e	; 14
     9aa:	d8 f4       	brcc	.+54     	; 0x9e2 <__vector_12+0x2e2>
				{
				  #ifndef ADV_RAMP_OPTIONS
					if (!ramping || (byLockOutSet == 1))
     9ac:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     9b0:	88 23       	and	r24, r24
     9b2:	29 f0       	breq	.+10     	; 0x9be <__vector_12+0x2be>
     9b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	09 f0       	breq	.+2      	; 0x9be <__vector_12+0x2be>
     9bc:	51 c0       	rjmp	.+162    	; 0xa60 <__vector_12+0x360>
				  #endif
					{
						modeIdx = outLevel = rampingLevel = 0;
     9be:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
     9c2:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <outLevel>
     9c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
						rampState = 0;
     9ca:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <rampState>
						byLockOutSet = 1 - byLockOutSet;		// invert "LOCK OUT"
     9ce:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <byLockOutSet>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	28 2f       	mov	r18, r24
     9d6:	29 1b       	sub	r18, r25
     9d8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <byLockOutSet>
						byDelayRamping = 1;		// don't act on ramping button presses
     9dc:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <byDelayRamping>
     9e0:	3f c0       	rjmp	.+126    	; 0xa60 <__vector_12+0x360>
					}
				}
				else if (byLockOutSet == 0)
     9e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
     9e6:	81 11       	cpse	r24, r1
     9e8:	3b c0       	rjmp	.+118    	; 0xa60 <__vector_12+0x360>
				{
					if ((quickClicks == 1) && (wIdleTicks < LOCK_OUT_TICKS))
     9ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	99 f4       	brne	.+38     	; 0xa18 <__vector_12+0x318>
     9f2:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <wIdleTicks>
     9f6:	30 91 ba 00 	lds	r19, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
     9fa:	2e 30       	cpi	r18, 0x0E	; 14
     9fc:	31 05       	cpc	r19, r1
     9fe:	60 f4       	brcc	.+24     	; 0xa18 <__vector_12+0x318>
					{
					  #ifndef ADV_RAMP_OPTIONS
						if (!ramping)
     a00:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <ramping>
     a04:	91 11       	cpse	r25, r1
     a06:	2c c0       	rjmp	.+88     	; 0xa60 <__vector_12+0x360>
					  #endif
						{
							modeIdx = BATT_CHECK_MODE;
     a08:	90 e5       	ldi	r25, 0x50	; 80
     a0a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <modeIdx>
							byDelayRamping = 1;		// don't act on ramping button presses
     a0e:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <byDelayRamping>
							PWM_LVL = 0;				// suppress main LED output
     a12:	18 bc       	out	0x28, r1	; 40
							ALT_PWM_LVL = 0;
     a14:	19 bc       	out	0x29, r1	; 41
     a16:	24 c0       	rjmp	.+72     	; 0xa60 <__vector_12+0x360>
						}
					}
					else if (modeIdx > SPECIAL_MODES)
     a18:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     a1c:	8b 35       	cpi	r24, 0x5B	; 91
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <__vector_12+0x324>
					{
						ExitSpecialModes ();		// restore previous state (normal mode and ramping)
     a20:	46 dc       	rcall	.-1908   	; 0x2ae <ExitSpecialModes>
     a22:	1e c0       	rjmp	.+60     	; 0xa60 <__vector_12+0x360>
					}
					else if (modeIdx == BATT_CHECK_MODE)
     a24:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     a28:	80 35       	cpi	r24, 0x50	; 80
     a2a:	69 f4       	brne	.+26     	; 0xa46 <__vector_12+0x346>
					{
						modeIdx = 0;		// clear main mode
     a2c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
						PWM_LVL = 0;		// suppress main LED output
     a30:	18 bc       	out	0x28, r1	; 40
						ALT_PWM_LVL = 0;
     a32:	19 bc       	out	0x29, r1	; 41
			
						ConfigMode = 21;		// Initialize Advanced Config mode
     a34:	85 e1       	ldi	r24, 0x15	; 21
     a36:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <ConfigMode>
						configClicks = 0;
     a3a:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <configClicks>
						holdHandled = 1;		// suppress more hold events on this hold
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <holdHandled>
     a44:	0d c0       	rjmp	.+26     	; 0xa60 <__vector_12+0x360>
					}
					else if (!ramping && (blinkyMode > 0) && (modeIdx != BATT_CHECK_MODE))
     a46:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     a4a:	81 11       	cpse	r24, r1
     a4c:	09 c0       	rjmp	.+18     	; 0xa60 <__vector_12+0x360>
     a4e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <blinkyMode>
     a52:	88 23       	and	r24, r24
     a54:	29 f0       	breq	.+10     	; 0xa60 <__vector_12+0x360>
     a56:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     a5a:	80 35       	cpi	r24, 0x50	; 80
     a5c:	09 f0       	breq	.+2      	; 0xa60 <__vector_12+0x360>
					{
						// Engage first special mode!
						EnterSpecialModes ();
     a5e:	1a dc       	rcall	.-1996   	; 0x294 <EnterSpecialModes>
			}
			
			//---------------------------------------------------------------------------------------
			// CONFIG hold - if it is not locked out or lock-out was just exited on this hold
			//---------------------------------------------------------------------------------------
			if (byLockOutSet == 0)
     a60:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
     a64:	81 11       	cpse	r24, r1
     a66:	2b c0       	rjmp	.+86     	; 0xabe <__vector_12+0x3be>
			{
				if ((!ramping && (wPressDuration == CONFIG_ENTER_DUR) && (quickClicks != 2) && (modeIdx != BATT_CHECK_MODE))
     a68:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     a6c:	81 11       	cpse	r24, r1
     a6e:	0f c0       	rjmp	.+30     	; 0xa8e <__vector_12+0x38e>
     a70:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <wPressDuration>
     a74:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <wPressDuration+0x1>
     a78:	80 3a       	cpi	r24, 0xA0	; 160
     a7a:	91 05       	cpc	r25, r1
     a7c:	41 f4       	brne	.+16     	; 0xa8e <__vector_12+0x38e>
     a7e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	21 f0       	breq	.+8      	; 0xa8e <__vector_12+0x38e>
     a86:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     a8a:	80 35       	cpi	r24, 0x50	; 80
     a8c:	59 f4       	brne	.+22     	; 0xaa4 <__vector_12+0x3a4>
											||
					 (ramping && (wPressDuration == 500)))	// 8 secs in ramping mode
     a8e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
			// CONFIG hold - if it is not locked out or lock-out was just exited on this hold
			//---------------------------------------------------------------------------------------
			if (byLockOutSet == 0)
			{
				if ((!ramping && (wPressDuration == CONFIG_ENTER_DUR) && (quickClicks != 2) && (modeIdx != BATT_CHECK_MODE))
											||
     a92:	88 23       	and	r24, r24
     a94:	a1 f0       	breq	.+40     	; 0xabe <__vector_12+0x3be>
					 (ramping && (wPressDuration == 500)))	// 8 secs in ramping mode
     a96:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <wPressDuration>
     a9a:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <wPressDuration+0x1>
     a9e:	84 3f       	cpi	r24, 0xF4	; 244
     aa0:	91 40       	sbci	r25, 0x01	; 1
     aa2:	69 f4       	brne	.+26     	; 0xabe <__vector_12+0x3be>
				{
					modeIdx = 0;
     aa4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
					rampingLevel = 0;
     aa8:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
					rampState = 0;
     aac:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <rampState>
					
					// turn the light off initially
					PWM_LVL = 0;
     ab0:	18 bc       	out	0x28, r1	; 40
					ALT_PWM_LVL = 0;
     ab2:	19 bc       	out	0x29, r1	; 41
				
					ConfigMode = 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <ConfigMode>
					configClicks = 0;
     aba:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <configClicks>
				}
			}
		}

		wStepdownTicks = 0;		// Just always reset stepdown timer whenever the button is pressed
     abe:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <wStepdownTicks.1978+0x1>
     ac2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <wStepdownTicks.1978>

		//LowBattState = 0;		// reset the Low Battery State upon a button press (NO - keep it active!)

	  #ifdef VOLTAGE_MON
		adc_ticks = ADC_DELAY;	// Same with the ramp down delay
     ac6:	88 e3       	ldi	r24, 0x38	; 56
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     ace:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     ad2:	5e c2       	rjmp	.+1212   	; 0xf90 <__vector_12+0x890>
   // Not pressed (debounced qualified)
	//---------------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------------
	else
	{
		holdHandled = 0;		// free up any hold suppressed state
     ad4:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <holdHandled>

		if (ConfigMode > 0)
     ad8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
     adc:	88 23       	and	r24, r24
     ade:	a1 f0       	breq	.+40     	; 0xb08 <__vector_12+0x408>
		{
			if (wPressDuration > 0)
     ae0:	21 15       	cp	r18, r1
     ae2:	31 05       	cpc	r19, r1
     ae4:	59 f0       	breq	.+22     	; 0xafc <__vector_12+0x3fc>
			{
				if (wPressDuration < LONG_PRESS_DUR)
     ae6:	28 31       	cpi	r18, 0x18	; 24
     ae8:	31 05       	cpc	r19, r1
     aea:	28 f4       	brcc	.+10     	; 0xaf6 <__vector_12+0x3f6>
					++configClicks;
     aec:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <configClicks>
				configIdleTime = 0;
     af6:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <configIdleTime>
     afa:	46 c2       	rjmp	.+1164   	; 0xf88 <__vector_12+0x888>
			}
			else
			{
				++configIdleTime;
     afc:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <configIdleTime>
     b00:	8f 5f       	subi	r24, 0xFF	; 255
     b02:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <configIdleTime>
     b06:	40 c2       	rjmp	.+1152   	; 0xf88 <__vector_12+0x888>
			}
			wPressDuration = 0;
		} // config mode
		
		else if (wPressDuration > 0)
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	09 f4       	brne	.+2      	; 0xb10 <__vector_12+0x410>
     b0e:	6a c1       	rjmp	.+724    	; 0xde4 <__vector_12+0x6e4>
   		// Was previously pressed

			//------------------------------------------------------------------------------
			//	Ramping - button released
			//------------------------------------------------------------------------------
			if (ramping)
     b10:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     b14:	88 23       	and	r24, r24
     b16:	09 f4       	brne	.+2      	; 0xb1a <__vector_12+0x41a>
     b18:	c8 c0       	rjmp	.+400    	; 0xcaa <__vector_12+0x5aa>
			{
				rampState = 0;	// reset state to not ramping
     b1a:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <rampState>
				
				if (wPressDuration < SHORT_CLICK_DUR)
     b1e:	22 31       	cpi	r18, 0x12	; 18
     b20:	31 05       	cpc	r19, r1
     b22:	08 f0       	brcs	.+2      	; 0xb26 <__vector_12+0x426>
     b24:	b6 c0       	rjmp	.+364    	; 0xc92 <__vector_12+0x592>
				{
					// normal short click processing

					++quickClicks;	// track quick clicks in a row from OFF or ON (doesn't matter in ramping)
     b26:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <quickClicks>

					if (quickClicks == 1)
     b30:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	21 f5       	brne	.+72     	; 0xb80 <__vector_12+0x480>
					{
						byModeForClicks = modeIdx;		// save current mode
     b38:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     b3c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <byModeForClicks.1979>
						if ((modeIdx < 16) && (rampingLevel == MAX_RAMP_LEVEL))
     b40:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     b44:	80 31       	cpi	r24, 0x10	; 16
     b46:	38 f4       	brcc	.+14     	; 0xb56 <__vector_12+0x456>
     b48:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     b4c:	86 39       	cpi	r24, 0x96	; 150
     b4e:	19 f4       	brne	.+6      	; 0xb56 <__vector_12+0x456>
							byModeForClicks = 255;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <byModeForClicks.1979>
						
						if ((modeIdx == BATT_CHECK_MODE) || (modeIdx == TEMP_CHECK_MODE) || (modeIdx == FIRM_VERS_MODE))
     b56:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     b5a:	80 35       	cpi	r24, 0x50	; 80
     b5c:	41 f0       	breq	.+16     	; 0xb6e <__vector_12+0x46e>
     b5e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     b62:	81 35       	cpi	r24, 0x51	; 81
     b64:	21 f0       	breq	.+8      	; 0xb6e <__vector_12+0x46e>
     b66:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     b6a:	82 35       	cpi	r24, 0x52	; 82
     b6c:	49 f4       	brne	.+18     	; 0xb80 <__vector_12+0x480>
						{
							modeIdx = 0;			// battery check - reset to OFF
     b6e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
							outLevel = rampingLevel = 0;	// 08/28/16 TE: zero out outLevel here as well (used in LVP)
     b72:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
     b76:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <outLevel>
							byDelayRamping = 1;		// don't act on ramping button presses
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <byDelayRamping>
						}
					}
							
					if ((byModeForClicks == BATT_CHECK_MODE) || (byModeForClicks == TEMP_CHECK_MODE))	// battery check - multi-click checks
     b80:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <byModeForClicks.1979>
     b84:	90 eb       	ldi	r25, 0xB0	; 176
     b86:	98 0f       	add	r25, r24
     b88:	92 30       	cpi	r25, 0x02	; 2
     b8a:	90 f4       	brcc	.+36     	; 0xbb0 <__vector_12+0x4b0>
					{
						if (quickClicks == 2)			// --> double click: blink out the firmware vers #
     b8c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <quickClicks>
     b90:	92 30       	cpi	r25, 0x02	; 2
     b92:	09 f0       	breq	.+2      	; 0xb96 <__vector_12+0x496>
     b94:	87 c0       	rjmp	.+270    	; 0xca4 <__vector_12+0x5a4>
						{
							if (byModeForClicks == BATT_CHECK_MODE)
     b96:	80 35       	cpi	r24, 0x50	; 80
     b98:	11 f4       	brne	.+4      	; 0xb9e <__vector_12+0x49e>
								modeIdx = TEMP_CHECK_MODE;
     b9a:	81 e5       	ldi	r24, 0x51	; 81
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <__vector_12+0x4a0>
							else
								modeIdx = FIRM_VERS_MODE;
     b9e:	82 e5       	ldi	r24, 0x52	; 82
     ba0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
							byDelayRamping = 1;		// don't act on ramping button presses
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <byDelayRamping>
							PWM_LVL = 0;				// suppress main LED output
     baa:	18 bc       	out	0x28, r1	; 40
							ALT_PWM_LVL = 0;
     bac:	19 bc       	out	0x29, r1	; 41
     bae:	7a c0       	rjmp	.+244    	; 0xca4 <__vector_12+0x5a4>
						}
					}
					
					else   // for other modes - multi-click checks
					{
						if ((quickClicks == 4) && byLockOutEnable)	// --> 4X clicks: do a lock-out
     bb0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	a1 f4       	brne	.+40     	; 0xbe0 <__vector_12+0x4e0>
     bb8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <byLockOutEnable>
     bbc:	88 23       	and	r24, r24
     bbe:	81 f0       	breq	.+32     	; 0xbe0 <__vector_12+0x4e0>
						{
							modeIdx = outLevel = rampingLevel = 0;
     bc0:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
     bc4:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <outLevel>
     bc8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
							rampState = 0;
							byLockOutSet = 1 - byLockOutSet;		// invert "LOCK OUT"
     bcc:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <byLockOutSet>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	28 2f       	mov	r18, r24
     bd4:	29 1b       	sub	r18, r25
     bd6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <byLockOutSet>
							byDelayRamping = 1;		// don't act on ramping button presses (ramping ON/OFF code below)
     bda:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <byDelayRamping>
     bde:	62 c0       	rjmp	.+196    	; 0xca4 <__vector_12+0x5a4>
						}
						else
						{
							if (!byLockOutSet)
     be0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
     be4:	81 11       	cpse	r24, r1
     be6:	5e c0       	rjmp	.+188    	; 0xca4 <__vector_12+0x5a4>
							{
							  #ifdef TRIPLE_CLICK_BATT
								if (quickClicks == 3)						// --> triple click: display battery check/status
     be8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	41 f4       	brne	.+16     	; 0xc00 <__vector_12+0x500>
								{
									modeIdx = BATT_CHECK_MODE;
     bf0:	80 e5       	ldi	r24, 0x50	; 80
     bf2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
									byDelayRamping = 1;		// don't act on ramping button presses
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <byDelayRamping>
									PWM_LVL = 0;				// suppress main LED output
     bfc:	18 bc       	out	0x28, r1	; 40
									ALT_PWM_LVL = 0;
     bfe:	19 bc       	out	0x29, r1	; 41
								}
							  #endif

								if (quickClicks == 2)						// --> double click: set to MAX level
     c00:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	71 f4       	brne	.+28     	; 0xc24 <__vector_12+0x524>
								{
									if (byModeForClicks == 255)
     c08:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <byModeForClicks.1979>
     c0c:	8f 3f       	cpi	r24, 0xFF	; 255
     c0e:	11 f4       	brne	.+4      	; 0xc14 <__vector_12+0x514>
									{
										// Engage first special mode!
										EnterSpecialModes ();
     c10:	41 db       	rcall	.-2430   	; 0x294 <EnterSpecialModes>
     c12:	48 c0       	rjmp	.+144    	; 0xca4 <__vector_12+0x5a4>
									}
									else
									{
										rampingLevel = MAX_RAMP_LEVEL;
     c14:	86 e9       	ldi	r24, 0x96	; 150
     c16:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rampingLevel>
										outLevel = rampingLevel;
     c1a:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     c1e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <outLevel>
     c22:	35 c0       	rjmp	.+106    	; 0xc8e <__vector_12+0x58e>
										SetLevel(outLevel);
									}
								}

								else if (!byDelayRamping)
     c24:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <byDelayRamping>
     c28:	81 11       	cpse	r24, r1
     c2a:	3c c0       	rjmp	.+120    	; 0xca4 <__vector_12+0x5a4>
								{
									//---------------------------------
									// Normal click ON in ramping mode
									//---------------------------------
									if (rampingLevel == 0)  // light is OFF, turn it ON
     c2c:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     c30:	81 11       	cpse	r24, r1
     c32:	1a c0       	rjmp	.+52     	; 0xc68 <__vector_12+0x568>
									{
										if (savedLevel == 0)
     c34:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <savedLevel>
     c38:	81 11       	cpse	r24, r1
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <__vector_12+0x542>
											savedLevel = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <savedLevel>

										dontToggleDir = 1;		// force direction to be lo->hi for a switch ON
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <dontToggleDir>
										rampLastDirState = 2;	// lo->hi
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <rampLastDirState>
									
										// Restore the saved level (last mode memory)
										outLevel = rampingLevel = savedLevel;
     c4e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <savedLevel>
     c52:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <rampingLevel>
     c56:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <outLevel>
										
										if (onboardLedEnable)
     c5a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <onboardLedEnable>
     c5e:	99 23       	and	r25, r25
     c60:	39 f0       	breq	.+14     	; 0xc70 <__vector_12+0x570>
											byBlinkActiveChan = 1;
     c62:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <byBlinkActiveChan>
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <__vector_12+0x570>
									}
									else        				// light is ON, turn it OFF
									{
										outLevel = rampingLevel = 0;
     c68:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
     c6c:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <outLevel>
									}
								
									if (outLevel == 255)
     c70:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
     c74:	8f 3f       	cpi	r24, 0xFF	; 255
     c76:	59 f4       	brne	.+22     	; 0xc8e <__vector_12+0x58e>
									{
										SetOutput(0,moonlightLevel);
     c78:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <moonlightLevel>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
     c7c:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
     c7e:	89 bd       	out	0x29, r24	; 41
									}
								
									if (outLevel == 255)
									{
										SetOutput(0,moonlightLevel);
										if (locatorLed)
     c80:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <locatorLed>
     c84:	88 23       	and	r24, r24
     c86:	71 f0       	breq	.+28     	; 0xca4 <__vector_12+0x5a4>
											TurnOnBoardLed(0);
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	c5 da       	rcall	.-2678   	; 0x216 <TurnOnBoardLed>
     c8c:	0b c0       	rjmp	.+22     	; 0xca4 <__vector_12+0x5a4>
									}
									else
										SetLevel(outLevel);
     c8e:	f6 da       	rcall	.-2580   	; 0x27c <SetLevel>
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <__vector_12+0x5a4>
						} // else not 4X
					} // non Battery Check mode support
				} // short click
				else
				{
					quickClicks = 0;	// reset quick clicks for long holds
     c92:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <quickClicks>
					
					if (onboardLedEnable)
     c96:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <onboardLedEnable>
     c9a:	88 23       	and	r24, r24
     c9c:	19 f0       	breq	.+6      	; 0xca4 <__vector_12+0x5a4>
						byBlinkActiveChan = 1;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <byBlinkActiveChan>
				}
				
				wPressDuration = 0;
				
				byDelayRamping = 0;	// restore acting on ramping button presses, if disabled
     ca4:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <byDelayRamping>
     ca8:	98 c0       	rjmp	.+304    	; 0xdda <__vector_12+0x6da>
			} // ramping

			//------------------------------------------------------------------------------
			//	Non-Ramping - button released
			//------------------------------------------------------------------------------
			else if (wPressDuration < LONG_PRESS_DUR)
     caa:	28 31       	cpi	r18, 0x18	; 24
     cac:	31 05       	cpc	r19, r1
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <__vector_12+0x5b2>
     cb0:	78 c0       	rjmp	.+240    	; 0xda2 <__vector_12+0x6a2>
			{
				// normal short click
				if ((modeIdx == BATT_CHECK_MODE) || (modeIdx == TEMP_CHECK_MODE) || (modeIdx == FIRM_VERS_MODE))		// battery check/firmware vers - reset to OFF
     cb2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     cb6:	80 35       	cpi	r24, 0x50	; 80
     cb8:	09 f4       	brne	.+2      	; 0xcbc <__vector_12+0x5bc>
     cba:	4b c0       	rjmp	.+150    	; 0xd52 <__vector_12+0x652>
     cbc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     cc0:	81 35       	cpi	r24, 0x51	; 81
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <__vector_12+0x5c6>
     cc4:	46 c0       	rjmp	.+140    	; 0xd52 <__vector_12+0x652>
     cc6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     cca:	82 35       	cpi	r24, 0x52	; 82
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__vector_12+0x5d0>
     cce:	41 c0       	rjmp	.+130    	; 0xd52 <__vector_12+0x652>
					modeIdx = 0;
				else
				{
					// track quick clicks in a row from OFF
					if ((modeIdx == 0) && !quickClicks)
     cd0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     cd4:	81 11       	cpse	r24, r1
     cd6:	06 c0       	rjmp	.+12     	; 0xce4 <__vector_12+0x5e4>
     cd8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     cdc:	81 11       	cpse	r24, r1
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <__vector_12+0x5e4>
						quickClicks = 1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	07 c0       	rjmp	.+14     	; 0xcf2 <__vector_12+0x5f2>
					else if (quickClicks)
     ce4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     ce8:	88 23       	and	r24, r24
     cea:	29 f0       	breq	.+10     	; 0xcf6 <__vector_12+0x5f6>
						++quickClicks;
     cec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     cf0:	8f 5f       	subi	r24, 0xFF	; 255
     cf2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <quickClicks>

					if (byLockOutSet == 0)
     cf6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
     cfa:	81 11       	cpse	r24, r1
     cfc:	6e c0       	rjmp	.+220    	; 0xdda <__vector_12+0x6da>
					{
						if (modeMemoryEnabled && (modeMemoryLastModeIdx > 0) && (modeIdx == 0))
     cfe:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <modeMemoryEnabled>
     d02:	88 23       	and	r24, r24
     d04:	79 f0       	breq	.+30     	; 0xd24 <__vector_12+0x624>
     d06:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <modeMemoryLastModeIdx>
     d0a:	88 23       	and	r24, r24
     d0c:	59 f0       	breq	.+22     	; 0xd24 <__vector_12+0x624>
     d0e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     d12:	81 11       	cpse	r24, r1
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <__vector_12+0x624>
						{
							modeIdx = modeMemoryLastModeIdx;
     d16:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <modeMemoryLastModeIdx>
     d1a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
							modeMemoryLastModeIdx = 0;
     d1e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <modeMemoryLastModeIdx>
     d22:	5b c0       	rjmp	.+182    	; 0xdda <__vector_12+0x6da>
						}
						else if (modeIdx < 16)
     d24:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     d28:	80 31       	cpi	r24, 0x10	; 16
     d2a:	f0 f4       	brcc	.+60     	; 0xd68 <__vector_12+0x668>
						{
							if ((modeIdx > 0) && (wIdleTicks >= IDLE_TIME))
     d2c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     d30:	88 23       	and	r24, r24
     d32:	91 f0       	breq	.+36     	; 0xd58 <__vector_12+0x658>
     d34:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <wIdleTicks>
     d38:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
     d3c:	8b 34       	cpi	r24, 0x4B	; 75
     d3e:	91 05       	cpc	r25, r1
     d40:	58 f0       	brcs	.+22     	; 0xd58 <__vector_12+0x658>
							{
								modeMemoryLastModeIdx = modeIdx;
     d42:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     d46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <modeMemoryLastModeIdx>
								prevModeIdx = modeIdx;
     d4a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     d4e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <prevModeIdx>
								modeIdx = 0;	// Turn OFF the light
     d52:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
     d56:	41 c0       	rjmp	.+130    	; 0xdda <__vector_12+0x6da>
							}
							else
							{
								// Short press - normal modes
								if (highToLow)
     d58:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <highToLow>
     d5c:	88 23       	and	r24, r24
     d5e:	11 f0       	breq	.+4      	; 0xd64 <__vector_12+0x664>
									PrevMode();
     d60:	b6 db       	rcall	.-2196   	; 0x4ce <PrevMode>
     d62:	3b c0       	rjmp	.+118    	; 0xdda <__vector_12+0x6da>
								else
									NextMode();
     d64:	a0 db       	rcall	.-2240   	; 0x4a6 <NextMode>
     d66:	39 c0       	rjmp	.+114    	; 0xdda <__vector_12+0x6da>
							}
						}
						else  // special modes
						{
							// Bail out if timed out the click
							if (wIdleTicks >= IDLE_TIME)
     d68:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <wIdleTicks>
     d6c:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
     d70:	8b 34       	cpi	r24, 0x4B	; 75
     d72:	91 05       	cpc	r25, r1
     d74:	10 f0       	brcs	.+4      	; 0xd7a <__vector_12+0x67a>
								ExitSpecialModes ();		// restore previous state (normal mode and ramping)
     d76:	9b da       	rcall	.-2762   	; 0x2ae <ExitSpecialModes>
     d78:	30 c0       	rjmp	.+96     	; 0xdda <__vector_12+0x6da>
								
							// Bail out if configured for only one blinky mode
							else if (blinkyMode == 1)
     d7a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <blinkyMode>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	d1 f3       	breq	.-12     	; 0xd76 <__vector_12+0x676>
								ExitSpecialModes ();		// restore previous state (normal mode and ramping)
								
							// Bail out if at last blinky mode
							else if (++specModeIdx >= specialModesCnt)
     d82:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <specModeIdx>
     d86:	ef 5f       	subi	r30, 0xFF	; 255
     d88:	e0 93 f0 00 	sts	0x00F0, r30	; 0x8000f0 <specModeIdx>
     d8c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <specialModesCnt>
     d90:	e8 17       	cp	r30, r24
     d92:	88 f7       	brcc	.-30     	; 0xd76 <__vector_12+0x676>
								ExitSpecialModes ();		// restore previous state (normal mode and ramping)
							else
								modeIdx = specialModes[specModeIdx];
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	e3 56       	subi	r30, 0x63	; 99
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 81       	ld	r24, Z
     d9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
     da0:	1c c0       	rjmp	.+56     	; 0xdda <__vector_12+0x6da>

				wPressDuration = 0;
			} // short click
			else
			{
				if (wPressDuration < XLONG_PRESS_DUR)
     da2:	24 34       	cpi	r18, 0x44	; 68
     da4:	31 05       	cpc	r19, r1
     da6:	b8 f4       	brcc	.+46     	; 0xdd6 <__vector_12+0x6d6>
				{
					// Special Locator LED toggle sequence: quick click then click&hold
					if ((quickClicks == 1) && (wIdleTicks < LOCK_OUT_TICKS) && (modeIdx == 0))
     da8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <quickClicks>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	99 f4       	brne	.+38     	; 0xdd6 <__vector_12+0x6d6>
     db0:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <wIdleTicks>
     db4:	30 91 ba 00 	lds	r19, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
     db8:	2e 30       	cpi	r18, 0x0E	; 14
     dba:	31 05       	cpc	r19, r1
     dbc:	60 f4       	brcc	.+24     	; 0xdd6 <__vector_12+0x6d6>
     dbe:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <modeIdx>
     dc2:	91 11       	cpse	r25, r1
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <__vector_12+0x6d6>
					{
						locatorLed = 1 - locatorLed;
     dc6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <locatorLed>
     dca:	89 1b       	sub	r24, r25
     dcc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <locatorLed>
						TurnOnBoardLed(locatorLed);
     dd0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <locatorLed>
     dd4:	20 da       	rcall	.-3008   	; 0x216 <TurnOnBoardLed>
					}
				}
				quickClicks = 0;	// reset quick clicks for long holds
     dd6:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <quickClicks>
			}
			
			wIdleTicks = 0;	// reset idle time
     dda:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <wIdleTicks+0x1>
     dde:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <wIdleTicks>
     de2:	d2 c0       	rjmp	.+420    	; 0xf88 <__vector_12+0x888>
			//---------------------------------------------------------------------------------------
			//---------------------------------------------------------------------------------------
			// Not previously pressed
			//---------------------------------------------------------------------------------------
			//---------------------------------------------------------------------------------------
			if (++wIdleTicks == 0)
     de4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <wIdleTicks>
     de8:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <wIdleTicks+0x1>
     df2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <wIdleTicks>
     df6:	89 2b       	or	r24, r25
     df8:	31 f4       	brne	.+12     	; 0xe06 <__vector_12+0x706>
				wIdleTicks = 30000;		// max it out at 30,000 (8 minutes)
     dfa:	80 e3       	ldi	r24, 0x30	; 48
     dfc:	95 e7       	ldi	r25, 0x75	; 117
     dfe:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <wIdleTicks+0x1>
     e02:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <wIdleTicks>

			if (wIdleTicks > LOCK_OUT_TICKS)
     e06:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <wIdleTicks>
     e0a:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
     e0e:	0f 97       	sbiw	r24, 0x0f	; 15
     e10:	10 f0       	brcs	.+4      	; 0xe16 <__vector_12+0x716>
				quickClicks = 0;
     e12:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <quickClicks>

			// Only do timed stepdown check when switch isn't pressed
			if (stepdownMode > 1)
     e16:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepdownMode>
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	e8 f1       	brcs	.+122    	; 0xe98 <__vector_12+0x798>
			{
				if (ramping)  // ramping
     e1e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     e22:	88 23       	and	r24, r24
     e24:	e1 f0       	breq	.+56     	; 0xe5e <__vector_12+0x75e>
				{
					if ((outLevel > TIMED_STEPDOWN_MIN) && (outLevel < 255))	// 255= moon, so must add this check!
     e26:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
     e2a:	84 57       	subi	r24, 0x74	; 116
     e2c:	8b 38       	cpi	r24, 0x8B	; 139
     e2e:	a0 f5       	brcc	.+104    	; 0xe98 <__vector_12+0x798>
						if (++wStepdownTicks > wTimedStepdownTickLimit)
     e30:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <wStepdownTicks.1978>
     e34:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <wStepdownTicks.1978+0x1>
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <wStepdownTicks.1978+0x1>
     e3e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <wStepdownTicks.1978>
     e42:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <wTimedStepdownTickLimit>
     e46:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <wTimedStepdownTickLimit+0x1>
     e4a:	28 17       	cp	r18, r24
     e4c:	39 07       	cpc	r19, r25
     e4e:	20 f5       	brcc	.+72     	; 0xe98 <__vector_12+0x798>
						{
							outLevel = rampingLevel = TIMED_STEPDOWN_SET;
     e50:	86 e6       	ldi	r24, 0x66	; 102
     e52:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <rampingLevel>
     e56:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <outLevel>
     e5a:	eb d9       	rcall	.-3114   	; 0x232 <SetLevel.part.1>
     e5c:	1d c0       	rjmp	.+58     	; 0xe98 <__vector_12+0x798>
							SetLevel(outLevel);
						}
				}
				else          // regular modes
				{
					if (modeIdx < 16)
     e5e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
     e62:	80 31       	cpi	r24, 0x10	; 16
     e64:	c8 f4       	brcc	.+50     	; 0xe98 <__vector_12+0x798>
						if (byPrimModes[modeIdx] == 255)
     e66:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <modeIdx>
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	e0 52       	subi	r30, 0x20	; 32
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	80 81       	ld	r24, Z
     e72:	8f 3f       	cpi	r24, 0xFF	; 255
     e74:	89 f4       	brne	.+34     	; 0xe98 <__vector_12+0x798>
						{
							if (++wStepdownTicks > wTimedStepdownTickLimit)
     e76:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <wStepdownTicks.1978>
     e7a:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <wStepdownTicks.1978+0x1>
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <wStepdownTicks.1978+0x1>
     e84:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <wStepdownTicks.1978>
     e88:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <wTimedStepdownTickLimit>
     e8c:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <wTimedStepdownTickLimit+0x1>
     e90:	28 17       	cp	r18, r24
     e92:	39 07       	cpc	r19, r25
     e94:	08 f4       	brcc	.+2      	; 0xe98 <__vector_12+0x798>
								PrevMode();		// Go to the previous mode
     e96:	1b db       	rcall	.-2506   	; 0x4ce <PrevMode>
						}
				}
			}
			
			// For ramping, timeout the direction toggling
			if (ramping && (rampingLevel > 1) && (rampingLevel < MAX_RAMP_LEVEL))
     e98:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     e9c:	88 23       	and	r24, r24
     e9e:	91 f0       	breq	.+36     	; 0xec4 <__vector_12+0x7c4>
     ea0:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	70 f0       	brcs	.+28     	; 0xec4 <__vector_12+0x7c4>
     ea8:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
     eac:	86 39       	cpi	r24, 0x96	; 150
     eae:	50 f4       	brcc	.+20     	; 0xec4 <__vector_12+0x7c4>
			{
				if (wIdleTicks > RAMP_SWITCH_TIMEOUT)
     eb0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <wIdleTicks>
     eb4:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
     eb8:	8c 34       	cpi	r24, 0x4C	; 76
     eba:	91 05       	cpc	r25, r1
     ebc:	18 f0       	brcs	.+6      	; 0xec4 <__vector_12+0x7c4>
					dontToggleDir = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <dontToggleDir>
			}
			
			// Only do voltage monitoring when the switch isn't pressed
		  #ifdef VOLTAGE_MON
			if (adc_ticks > 0)
     ec4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     ec8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	29 f0       	breq	.+10     	; 0xeda <__vector_12+0x7da>
				--adc_ticks;
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     ed6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			if (adc_ticks == 0)
     eda:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     ede:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     ee2:	89 2b       	or	r24, r25
     ee4:	d1 f5       	brne	.+116    	; 0xf5a <__vector_12+0x85a>
			{
				byte atLowLimit = (modeIdx == 1);
     ee6:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <modeIdx>
				if (ramping)
     eea:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
     eee:	81 11       	cpse	r24, r1
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <__vector_12+0x7fa>
		  #ifdef VOLTAGE_MON
			if (adc_ticks > 0)
				--adc_ticks;
			if (adc_ticks == 0)
			{
				byte atLowLimit = (modeIdx == 1);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	91 30       	cpi	r25, 0x01	; 1
     ef6:	41 f4       	brne	.+16     	; 0xf08 <__vector_12+0x808>
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <__vector_12+0x80a>
				if (ramping)
					atLowLimit = ((outLevel == 1) || (outLevel == 255));	// 08/28/16 TE: add check for moon mode (255)
     efa:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <outLevel>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	91 30       	cpi	r25, 0x01	; 1
     f02:	19 f0       	breq	.+6      	; 0xf0a <__vector_12+0x80a>
     f04:	9f 3f       	cpi	r25, 0xFF	; 255
     f06:	09 f0       	breq	.+2      	; 0xf0a <__vector_12+0x80a>
     f08:	80 e0       	ldi	r24, 0x00	; 0
				
				// See if voltage is lower than what we were looking for
			  #ifdef VOLT_MON_R1R2
				if (byVoltage < (atLowLimit ? ADC_CRIT : ADC_LOW))
			  #else
				if (byVoltage < (atLowLimit ? BATT_CRIT : BATT_LOW))
     f0a:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <byVoltage>
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 11       	cpse	r24, r1
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <__vector_12+0x81a>
     f14:	80 e2       	ldi	r24, 0x20	; 32
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <__vector_12+0x81e>
     f1a:	8e e1       	ldi	r24, 0x1E	; 30
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	28 17       	cp	r18, r24
     f20:	39 07       	cpc	r19, r25
     f22:	34 f4       	brge	.+12     	; 0xf30 <__vector_12+0x830>
			  #endif
					++lowbatt_cnt;
     f24:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <lowbatt_cnt.1983>
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <lowbatt_cnt.1983>
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <__vector_12+0x838>
				else
				{
					lowbatt_cnt = 0;
     f30:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <lowbatt_cnt.1983>
					LowBattState = 0;		// clear it if battery level has returned
     f34:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <LowBattState>
				}
				
				// See if it's been low for a while (8 in a row)
				if (lowbatt_cnt >= 8)
     f38:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <lowbatt_cnt.1983>
     f3c:	88 30       	cpi	r24, 0x08	; 8
     f3e:	68 f0       	brcs	.+26     	; 0xf5a <__vector_12+0x85a>
				{
					LowBattSignal = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <LowBattSignal>
					
					LowBattState = 1;
     f46:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <LowBattState>
					
					lowbatt_cnt = 0;
     f4a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <lowbatt_cnt.1983>
					// If we reach 0 here, main loop will go into sleep mode
					// Restart the counter to when we step down again
					adc_ticks = ADC_DELAY;
     f4e:	88 e3       	ldi	r24, 0x38	; 56
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     f56:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				}
			}
			
			if (LowBattState)
     f5a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <LowBattState>
     f5e:	88 23       	and	r24, r24
     f60:	99 f0       	breq	.+38     	; 0xf88 <__vector_12+0x888>
			{
				if (++wLowBattBlinkTicks == 500)		// Blink every 8 secs
     f62:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <wLowBattBlinkTicks.1980>
     f66:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <wLowBattBlinkTicks.1980+0x1>
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <wLowBattBlinkTicks.1980+0x1>
     f70:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <wLowBattBlinkTicks.1980>
     f74:	84 3f       	cpi	r24, 0xF4	; 244
     f76:	91 40       	sbci	r25, 0x01	; 1
     f78:	39 f4       	brne	.+14     	; 0xf88 <__vector_12+0x888>
				{
					LowBattBlinkSignal = 1;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <LowBattBlinkSignal>
					wLowBattBlinkTicks = 0;
     f80:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <wLowBattBlinkTicks.1980+0x1>
     f84:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <wLowBattBlinkTicks.1980>
			}
			
		  #endif
		} // not previously pressed
		
		wPressDuration = 0;
     f88:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <wPressDuration+0x1>
     f8c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <wPressDuration>
	} // Not pressed

	// Schedule an A-D conversion every 4th timer (64 msecs)
	if ((++byInitADCTimer & 0x03) == 0)
     f90:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
     f9a:	83 70       	andi	r24, 0x03	; 3
     f9c:	19 f4       	brne	.+6      	; 0xfa4 <__vector_12+0x8a4>
		ADCSRA |= (1 << ADSC) | (1 << ADIE);	// start next ADC conversion and arm interrupt
     f9e:	86 b1       	in	r24, 0x06	; 6
     fa0:	88 64       	ori	r24, 0x48	; 72
     fa2:	86 b9       	out	0x06, r24	; 6
}
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <main>:
/**************************************************************************************
* main - main program loop. This is where it all happens...
* ====
**************************************************************************************/
int main(void)
{	
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	1f 92       	push	r1
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	byte i;

	// Set all ports to input, and turn pull-up resistors on for the inputs we are using
	DDRB = 0x00;
     fd0:	17 ba       	out	0x17, r1	; 23

	PORTB = (1 << SWITCH_PIN);		// Only the switch is an input
     fd2:	88 e0       	ldi	r24, 0x08	; 8
     fd4:	88 bb       	out	0x18, r24	; 24

	// Set the switch as an interrupt for when we turn pin change interrupts on
	PCMSK = (1 << SWITCH_PIN);
     fd6:	85 bb       	out	0x15, r24	; 21
	
	// Set primary and alternate PWN pins for output
	DDRB = (1 << PWM_PIN) | (1 << ALT_PWM_PIN);
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	87 bb       	out	0x17, r24	; 23

	TCCR0A = PHASE;		// set this once here - don't use FAST anymore
     fdc:	81 ea       	ldi	r24, 0xA1	; 161
     fde:	8a bd       	out	0x2a, r24	; 42

	// Set timer to do PWM for correct output pin and set prescaler timing
	TCCR0B = 0x01; // pre-scaler for timer (1 => 1, 2 => 8, 3 => 64...)
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	83 bf       	out	0x33, r24	; 51
{
	// Turn ADC on (13 CLKs required for conversion, go max 200 kHz for 10-bit resolution)
  #ifdef VOLT_MON_R1R2
	ADMUX = ADCMUX_VCC_R1R2;			// 1.1v reference, not left-adjust, ADC1/PB2
  #else
	ADMUX  = ADCMUX_VCC_INTREF;		// not left-adjust, Vbg
     fe4:	8c e0       	ldi	r24, 0x0C	; 12
     fe6:	87 b9       	out	0x07, r24	; 7
  #endif
	DIDR0 |= (1 << ADC1D);					// disable digital input on ADC1 pin to reduce power consumption
     fe8:	a2 9a       	sbi	0x14, 2	; 20
	ADCSRA = (1 << ADEN ) | (1 << ADSC ) | 0x07;// enable, start, ADC clock prescale = 128 for 62.5 kHz
     fea:	87 ec       	ldi	r24, 0xC7	; 199
     fec:	86 b9       	out	0x06, r24	; 6
  #ifdef VOLTAGE_MON
	ADC_on();
  #else
	ADC_off();
  #endif
	ACSR   |=  (1<<7);	// Analog Comparator off
     fee:	47 9a       	sbi	0x08, 7	; 8

	// Enable sleep mode set to Power Down that will be triggered by the sleep_mode() command.
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     ff0:	85 b7       	in	r24, 0x35	; 53
     ff2:	87 7e       	andi	r24, 0xE7	; 231
     ff4:	80 61       	ori	r24, 0x10	; 16
     ff6:	85 bf       	out	0x35, r24	; 53
	
	// Shut things off now, just in case we come up in a partial power state
	cli();							// Disable interrupts
     ff8:	f8 94       	cli
* =========
**************************************************************************************/
inline void PCINT_off()
{
	// Disable pin change interrupts
	GIMSK &= ~(1 << PCIE);
     ffa:	8b b7       	in	r24, 0x3b	; 59
     ffc:	8f 7d       	andi	r24, 0xDF	; 223
     ffe:	8b bf       	out	0x3b, r24	; 59
	// Shut things off now, just in case we come up in a partial power state
	cli();							// Disable interrupts
	PCINT_off();

	{	// WDT_off() in line, but keep ints disabled
	 wdt_reset();					// Reset the WDT
    1000:	a8 95       	wdr
	 MCUSR &= ~(1<<WDRF);			// Clear Watchdog reset flag
    1002:	84 b7       	in	r24, 0x34	; 52
    1004:	87 7f       	andi	r24, 0xF7	; 247
    1006:	84 bf       	out	0x34, r24	; 52
	 WDTCR |= (1<<WDCE) | (1<<WDE);  // Start timed sequence
    1008:	81 b5       	in	r24, 0x21	; 33
    100a:	88 61       	ori	r24, 0x18	; 24
    100c:	81 bd       	out	0x21, r24	; 33
	 WDTCR = 0x00;					// Disable WDT
    100e:	11 bc       	out	0x21, r1	; 33
inline void LoadConfig()
{
	byte byMarker;

   // find the config data
   for (eepos=0; eepos < 128; eepos+=4)
    1010:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <eepos+0x1>
    1014:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <eepos>
    1018:	00 91 ab 00 	lds	r16, 0x00AB	; 0x8000ab <eepos>
    101c:	10 91 ac 00 	lds	r17, 0x00AC	; 0x8000ac <eepos+0x1>
    1020:	00 38       	cpi	r16, 0x80	; 128
    1022:	11 05       	cpc	r17, r1
    1024:	08 f0       	brcs	.+2      	; 0x1028 <main+0x62>
    1026:	5e c6       	rjmp	.+3260   	; 0x1ce4 <main+0xd1e>
	{
	   config1 = eeprom_read_byte((const byte *)eepos);
    1028:	c8 01       	movw	r24, r16
    102a:	94 d6       	rcall	.+3368   	; 0x1d54 <eeprom_read_byte>
    102c:	f8 2e       	mov	r15, r24
    102e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <config1>
		config2 = eeprom_read_byte((const byte *)eepos+1);
    1032:	c8 01       	movw	r24, r16
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	8e d6       	rcall	.+3356   	; 0x1d54 <eeprom_read_byte>
    1038:	e8 2e       	mov	r14, r24
    103a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <config2>
		config3 = eeprom_read_byte((const byte *)eepos+2);
    103e:	c8 01       	movw	r24, r16
    1040:	02 96       	adiw	r24, 0x02	; 2
    1042:	88 d6       	rcall	.+3344   	; 0x1d54 <eeprom_read_byte>
    1044:	d8 2e       	mov	r13, r24
    1046:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <config3>
		byMarker = eeprom_read_byte((const byte *)eepos+3);
    104a:	c8 01       	movw	r24, r16
    104c:	03 96       	adiw	r24, 0x03	; 3
    104e:	82 d6       	rcall	.+3332   	; 0x1d54 <eeprom_read_byte>
		
		// Only use the data if a valid marker is found
	   if (byMarker == 0x5d)
    1050:	8d 35       	cpi	r24, 0x5D	; 93
    1052:	39 f0       	breq	.+14     	; 0x1062 <main+0x9c>
inline void LoadConfig()
{
	byte byMarker;

   // find the config data
   for (eepos=0; eepos < 128; eepos+=4)
    1054:	0c 5f       	subi	r16, 0xFC	; 252
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	10 93 ac 00 	sts	0x00AC, r17	; 0x8000ac <eepos+0x1>
    105c:	00 93 ab 00 	sts	0x00AB, r16	; 0x8000ab <eepos>
    1060:	db cf       	rjmp	.-74     	; 0x1018 <main+0x52>
   }

   // unpack the config data
   if (eepos < 128)
	{
	   modeIdx = config1 & 0x7;
    1062:	8f 2d       	mov	r24, r15
    1064:	87 70       	andi	r24, 0x07	; 7
    1066:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <modeIdx>
		modeSetIdx = (config1 >> 3) & 0x0f;
    106a:	8f 2d       	mov	r24, r15
    106c:	86 95       	lsr	r24
    106e:	86 95       	lsr	r24
    1070:	86 95       	lsr	r24
    1072:	8f 70       	andi	r24, 0x0F	; 15
    1074:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <modeSetIdx>
		ramping = (config1 >> 7);
    1078:	ff 1c       	adc	r15, r15
    107a:	ff 24       	eor	r15, r15
    107c:	ff 1c       	adc	r15, r15
    107e:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <ramping>
		
	   highToLow = config2 & 1;
    1082:	8e 2d       	mov	r24, r14
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <highToLow>
	   modeMemoryEnabled = (config2 >> 1) & 1;
    108a:	e1 fa       	bst	r14, 1
    108c:	88 27       	eor	r24, r24
    108e:	80 f9       	bld	r24, 0
    1090:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <modeMemoryEnabled>
		moonlightLevel = (config2 >> 2) & 0x07;
    1094:	8e 2d       	mov	r24, r14
    1096:	86 95       	lsr	r24
    1098:	86 95       	lsr	r24
    109a:	87 70       	andi	r24, 0x07	; 7
    109c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <moonlightLevel>
		stepdownMode = (config2 >> 5) & 0x07;
    10a0:	e2 94       	swap	r14
    10a2:	e6 94       	lsr	r14
    10a4:	87 e0       	ldi	r24, 0x07	; 7
    10a6:	e8 22       	and	r14, r24
    10a8:	e0 92 69 00 	sts	0x0069, r14	; 0x800069 <stepdownMode>
	
		OffTimeEnable = config3 & 1;
    10ac:	8d 2d       	mov	r24, r13
    10ae:	81 70       	andi	r24, 0x01	; 1
    10b0:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <OffTimeEnable>
		onboardLedEnable = (config3 >> 1) & 1;
    10b4:	d1 fa       	bst	r13, 1
    10b6:	88 27       	eor	r24, r24
    10b8:	80 f9       	bld	r24, 0
    10ba:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <onboardLedEnable>
		locatorLedOn = (config3 >> 2) & 1;
    10be:	d2 fa       	bst	r13, 2
    10c0:	88 27       	eor	r24, r24
    10c2:	80 f9       	bld	r24, 0
    10c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <locatorLedOn>
		bvldLedOnly = (config3 >> 3) & 1;
    10c8:	d3 fa       	bst	r13, 3
    10ca:	88 27       	eor	r24, r24
    10cc:	80 f9       	bld	r24, 0
    10ce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <bvldLedOnly>
		moonLightEnable = (config3 >> 4) & 1;
    10d2:	d4 fa       	bst	r13, 4
    10d4:	88 27       	eor	r24, r24
    10d6:	80 f9       	bld	r24, 0
    10d8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <moonLightEnable>
		blinkyMode = (config3 >> 5) & 0x03;
    10dc:	8d 2d       	mov	r24, r13
    10de:	82 95       	swap	r24
    10e0:	86 95       	lsr	r24
    10e2:	83 70       	andi	r24, 0x03	; 3
    10e4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <blinkyMode>
	}
	else
		eepos = 0;

	locatorLed = locatorLedOn;
    10e8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <locatorLedOn>
    10ec:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <locatorLed>
	
	// Load config settings: mode, mode set, lo-hi, mode memory
	LoadConfig();
	
	// Load the configured temperature to use as the threshold to step down output
   byte inValue = eeprom_read_byte((const byte *)250);	// use address 250 in the EEPROM space
    10f0:	8a ef       	ldi	r24, 0xFA	; 250
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	2f d6       	rcall	.+3166   	; 0x1d54 <eeprom_read_byte>
	if ((inValue > 0) && (inValue < 255))
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	98 0f       	add	r25, r24
    10fa:	9e 3f       	cpi	r25, 0xFE	; 254
    10fc:	10 f4       	brcc	.+4      	; 0x1102 <main+0x13c>
		byStepdownTemp = inValue;
    10fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <byStepdownTemp>
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
    1102:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	e4 5c       	subi	r30, 0xC4	; 196
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	84 91       	lpm	r24, Z
    110e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <modesCnt>

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
    1112:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <bySecModes>
    1116:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <byPrimModes>

	if (moonLightEnable)
    111a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <moonLightEnable>
    111e:	99 23       	and	r25, r25
    1120:	41 f0       	breq	.+16     	; 0x1132 <main+0x16c>
	{
		offset = 2;
		byPrimModes[1] = 0;
    1122:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <byPrimModes+0x1>
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
    1126:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <moonlightLevel>
    112a:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <bySecModes+0x1>
	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;

	if (moonLightEnable)
	{
		offset = 2;
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <main+0x16e>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
    1132:	91 e0       	ldi	r25, 0x01	; 1
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	48 2f       	mov	r20, r24
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	69 2f       	mov	r22, r25
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	24 17       	cp	r18, r20
    1142:	35 07       	cpc	r19, r21
    1144:	34 f5       	brge	.+76     	; 0x1192 <main+0x1cc>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
    1146:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <modeSetIdx>
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	aa 0f       	add	r26, r26
    114e:	bb 1f       	adc	r27, r27
    1150:	ab 57       	subi	r26, 0x7B	; 123
    1152:	bf 4f       	sbci	r27, 0xFF	; 255
    1154:	ed 91       	ld	r30, X+
    1156:	fc 91       	ld	r31, X
    1158:	e2 0f       	add	r30, r18
    115a:	f3 1f       	adc	r31, r19
    115c:	e4 91       	lpm	r30, Z
    115e:	89 01       	movw	r16, r18
    1160:	06 0f       	add	r16, r22
    1162:	17 1f       	adc	r17, r23
    1164:	d8 01       	movw	r26, r16
    1166:	a0 52       	subi	r26, 0x20	; 32
    1168:	bf 4f       	sbci	r27, 0xFF	; 255
    116a:	ec 93       	st	X, r30
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
    116c:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <modeSetIdx>
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	aa 0f       	add	r26, r26
    1174:	bb 1f       	adc	r27, r27
    1176:	a3 59       	subi	r26, 0x93	; 147
    1178:	bf 4f       	sbci	r27, 0xFF	; 255
    117a:	ed 91       	ld	r30, X+
    117c:	fc 91       	ld	r31, X
    117e:	e2 0f       	add	r30, r18
    1180:	f3 1f       	adc	r31, r19
    1182:	e4 91       	lpm	r30, Z
    1184:	d8 01       	movw	r26, r16
    1186:	af 52       	subi	r26, 0x2F	; 47
    1188:	bf 4f       	sbci	r27, 0xFF	; 255
    118a:	ec 93       	st	X, r30
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    118c:	2f 5f       	subi	r18, 0xFF	; 255
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	d7 cf       	rjmp	.-82     	; 0x1140 <main+0x17a>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
	}

	modesCnt += offset;		// adjust to total mode count
    1192:	89 0f       	add	r24, r25
    1194:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <modesCnt>
	if ((inValue > 0) && (inValue < 255))
		byStepdownTemp = inValue;

	DefineModeSet();

	wTimedStepdownTickLimit = pgm_read_word(timedStepdownOutVals+stepdownMode);
    1198:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <stepdownMode>
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	e4 5d       	subi	r30, 0xD4	; 212
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	85 91       	lpm	r24, Z+
    11a8:	94 91       	lpm	r25, Z
    11aa:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <wTimedStepdownTickLimit+0x1>
    11ae:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <wTimedStepdownTickLimit>
	
	if (OffTimeEnable && !ramping)
    11b2:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <OffTimeEnable>
    11b6:	88 23       	and	r24, r24
    11b8:	59 f0       	breq	.+22     	; 0x11d0 <main+0x20a>
    11ba:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
    11be:	81 11       	cpse	r24, r1
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <main+0x20a>
	{
		if (!noinit_decay)
    11c2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__bss_end>
    11c6:	81 11       	cpse	r24, r1
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <main+0x20e>
		{
			// Indicates they did a short press, go to the next mode
			NextMode(); // Will handle wrap arounds
    11ca:	6d d9       	rcall	.-3366   	; 0x4a6 <NextMode>
			SaveConfig();
    11cc:	9b d9       	rcall	.-3274   	; 0x504 <SaveConfig>
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <main+0x20e>
		}
	}
	else
		modeIdx = 0;
    11d0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>

  #ifdef STARTUP_2BLINKS
	if (modeIdx == 0)
    11d4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    11d8:	81 11       	cpse	r24, r1
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <main+0x21e>
	{
		Blink(2, 80);
    11dc:	60 e5       	ldi	r22, 0x50	; 80
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	77 d8       	rcall	.-3858   	; 0x2d2 <Blink>
	}
  #endif

	// set noinit data for next boot
	noinit_decay = 0;  // will decay to non-zero after being off for a while
    11e4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__bss_end>

	last_modeIdx = 250;	// make it invalid for first time
    11e8:	8a ef       	ldi	r24, 0xFA	; 250
    11ea:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <last_modeIdx>
	
   byte byPrevLockOutSet = 0;

   byte prevConfigClicks = 0;

	byStartupDelayTime = 25;	// 400 msec delay in the WDT interrupt handler
    11ee:	89 e1       	ldi	r24, 0x19	; 25
    11f0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <byStartupDelayTime>
* ======
**************************************************************************************/
inline void WDT_on()
{
	// Setup watchdog timer to only interrupt, not reset, every 16ms.
	cli();							// Disable interrupts
    11f4:	f8 94       	cli
	wdt_reset();					// Reset the WDT
    11f6:	a8 95       	wdr
	WDTCR |= (1<<WDCE) | (1<<WDE);  // Start timed sequence
    11f8:	81 b5       	in	r24, 0x21	; 33
    11fa:	88 61       	ori	r24, 0x18	; 24
    11fc:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDIE);				// Enable interrupt every 16ms (was 1<<WDTIE)
    11fe:	80 e4       	ldi	r24, 0x40	; 64
    1200:	81 bd       	out	0x21, r24	; 33
	sei();							// Enable interrupts
    1202:	78 94       	sei

	last_modeIdx = 250;	// make it invalid for first time
	
   byte byPrevLockOutSet = 0;

   byte prevConfigClicks = 0;
    1204:	a1 2c       	mov	r10, r1
	// set noinit data for next boot
	noinit_decay = 0;  // will decay to non-zero after being off for a while

	last_modeIdx = 250;	// make it invalid for first time
	
   byte byPrevLockOutSet = 0;
    1206:	91 2c       	mov	r9, r1
    1208:	55 24       	eor	r5, r5
    120a:	53 94       	inc	r5
							if ((configClicks > 0) && (configClicks <= 3))
							{
								blinkyMode = configClicks - 1;
								SaveConfig();
							}
							ConfigMode = 15;			// all done, go to exit
    120c:	af e0       	ldi	r26, 0x0F	; 15
    120e:	4a 2e       	mov	r4, r26
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    1210:	bb 24       	eor	r11, r11
    1212:	ba 94       	dec	r11
					break;

				case 100:	// thermal calibration in effect
					Blink(3, 40);			// 3 quick blinks
					SetOutput(255, 0);	// set max output
					wThermalTicks = 312;	// set for 5 seconds as the minimum time to set a new stepdown temperature
    1214:	b8 e3       	ldi	r27, 0x38	; 56
    1216:	eb 2e       	mov	r14, r27
    1218:	ff 24       	eor	r15, r15
    121a:	f3 94       	inc	r15
				{
					if ((modeIdx > 0) && (modeIdx < 16))
					{
						PrevMode();	// Drop the output level
						
						wThermalTicks = TEMP_ADJ_PERIOD;
    121c:	0c ef       	ldi	r16, 0xFC	; 252
    121e:	1a e0       	ldi	r17, 0x0A	; 10
						else
						{
							// Drop the output level
							BlinkLVP(3);	// normal 3 blinks
							if (outLevel > MAX_RAMP_LEVEL/16)
								outLevel = ((int)outLevel * 4) / 5;	// drop the level (index) by 20%
    1220:	85 e0       	ldi	r24, 0x05	; 5
    1222:	c8 2e       	mov	r12, r24
    1224:	d1 2c       	mov	r13, r1
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    1226:	88 24       	eor	r8, r8
    1228:	8a 94       	dec	r8
	//------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------
	while(1)		// run forever
	{
      //---------------------------------------------------------------------------------------
		if (ConfigMode == 0)					// Normal mode
    122a:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
    122e:	81 11       	cpse	r24, r1
    1230:	72 c2       	rjmp	.+1252   	; 0x1716 <main+0x750>
      //---------------------------------------------------------------------------------------
		{
			if (byPrevLockOutSet != byLockOutSet)
    1232:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
    1236:	98 16       	cp	r9, r24
    1238:	c1 f0       	breq	.+48     	; 0x126a <main+0x2a4>
			{
				byPrevLockOutSet = byLockOutSet;
    123a:	90 90 c6 00 	lds	r9, 0x00C6	; 0x8000c6 <byLockOutSet>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    123e:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
    1240:	19 bc       	out	0x29, r1	; 41
			if (byPrevLockOutSet != byLockOutSet)
			{
				byPrevLockOutSet = byLockOutSet;

				SetOutput(0,0);
				_delay_ms(250);
    1242:	8a ef       	ldi	r24, 0xFA	; 250
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	de d7       	rcall	.+4028   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
				Blink(4, 60);
    1248:	6c e3       	ldi	r22, 0x3C	; 60
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	41 d8       	rcall	.-3966   	; 0x2d2 <Blink>
				
				byDelayRamping = 0;		// restore acting on ramping button presses
    1250:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <byDelayRamping>
				
				if (byLockOutSet)
    1254:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <byLockOutSet>
    1258:	88 23       	and	r24, r24
    125a:	29 f0       	breq	.+10     	; 0x1266 <main+0x2a0>
					last_modeIdx = modeIdx;	// entering - no need to configure mode 0 (keep the locator LED off)
    125c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1260:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <last_modeIdx>
    1264:	02 c0       	rjmp	.+4      	; 0x126a <main+0x2a4>
				else
					last_modeIdx = 255;		// exiting - force a mode handling to turn on locator LED
    1266:	80 92 ec 00 	sts	0x00EC, r8	; 0x8000ec <last_modeIdx>
			}

			//---------------------------------------------------
			// Mode Handling - did the WDT change the mode?
			//---------------------------------------------------
			if (modeIdx != last_modeIdx)
    126a:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <modeIdx>
    126e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <last_modeIdx>
    1272:	98 17       	cp	r25, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <main+0x2b2>
    1276:	04 c1       	rjmp	.+520    	; 0x1480 <main+0x4ba>
			{
				if (modeIdx < 16)
    1278:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    127c:	80 31       	cpi	r24, 0x10	; 16
    127e:	40 f5       	brcc	.+80     	; 0x12d0 <main+0x30a>
				{
					SetMode(modeIdx);      // Set a solid mode here!!
    1280:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <modeIdx>
* SetMode
* =======
**************************************************************************************/
void inline SetMode(byte mode)
{
	currOutLvl1 = byPrimModes[mode];
    1284:	82 2f       	mov	r24, r18
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	fc 01       	movw	r30, r24
    128a:	e0 52       	subi	r30, 0x20	; 32
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	30 81       	ld	r19, Z
    1290:	30 93 de 00 	sts	0x00DE, r19	; 0x8000de <currOutLvl1>
	currOutLvl2 = bySecModes[mode];
    1294:	fc 01       	movw	r30, r24
    1296:	ef 52       	subi	r30, 0x2F	; 47
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <currOutLvl2>
	
	SetOutput(currOutLvl1, currOutLvl2);
    12a0:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <currOutLvl2>
    12a4:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <currOutLvl1>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    12a8:	98 bd       	out	0x28, r25	; 40
	ALT_PWM_LVL = pwm7135;
    12aa:	89 bd       	out	0x29, r24	; 41
	currOutLvl1 = byPrimModes[mode];
	currOutLvl2 = bySecModes[mode];
	
	SetOutput(currOutLvl1, currOutLvl2);

	if ((mode == 0) && locatorLed)
    12ac:	21 11       	cpse	r18, r1
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <main+0x2f6>
    12b0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <locatorLed>
    12b4:	88 23       	and	r24, r24
    12b6:	11 f0       	breq	.+4      	; 0x12bc <main+0x2f6>
		TurnOnBoardLed(1);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <main+0x2fe>
	else if (last_modeIdx == 0)
    12bc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <last_modeIdx>
    12c0:	81 11       	cpse	r24, r1
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <main+0x300>
		TurnOnBoardLed(0);
    12c4:	a8 d7       	rcall	.+3920   	; 0x2216 <__TEXT_REGION_LENGTH__+0x216>
			if (modeIdx != last_modeIdx)
			{
				if (modeIdx < 16)
				{
					SetMode(modeIdx);      // Set a solid mode here!!
					last_modeIdx = modeIdx;
    12c6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    12ca:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <last_modeIdx>
    12ce:	d8 c0       	rjmp	.+432    	; 0x1480 <main+0x4ba>
				}
				else
				{
					last_modeIdx = modeIdx;
    12d0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    12d4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <last_modeIdx>

					// If coming from a standard mode, suppress alternate PWM output
					ALT_PWM_LVL = 0;
    12d8:	19 bc       	out	0x29, r1	; 41
					PWM_LVL = 0;				// suppress main LED output
    12da:	18 bc       	out	0x28, r1	; 40

					if (modeIdx == BATT_CHECK_MODE)
    12dc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    12e0:	80 35       	cpi	r24, 0x50	; 80
    12e2:	79 f4       	brne	.+30     	; 0x1302 <main+0x33c>
					{
						_delay_ms(400);	// delay a little here to give the user a chance to see a full blink sequence
    12e4:	80 e9       	ldi	r24, 0x90	; 144
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	8d d7       	rcall	.+3866   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>

						byDelayRamping = 0;		// restore acting on ramping button presses
    12ea:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <byDelayRamping>
						
						while (modeIdx == BATT_CHECK_MODE)	// Battery Check
    12ee:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    12f2:	80 35       	cpi	r24, 0x50	; 80
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <main+0x332>
    12f6:	c4 c0       	rjmp	.+392    	; 0x1480 <main+0x4ba>
							// blink out volts and tenths
						  #ifdef VOLT_MON_R1R2
							byte voltageNum = BattCheck();
							BlinkOutNumber(voltageNum, BATT_CHECK_MODE);
						  #else
							BlinkOutNumber((byte)byVoltage, BATT_CHECK_MODE);
    12f8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <byVoltage>
    12fc:	60 e5       	ldi	r22, 0x50	; 80
    12fe:	3a d8       	rcall	.-3980   	; 0x374 <BlinkOutNumber>
    1300:	f6 cf       	rjmp	.-20     	; 0x12ee <main+0x328>
						  #endif
						}
					}

					else if (modeIdx == TEMP_CHECK_MODE)
    1302:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1306:	81 35       	cpi	r24, 0x51	; 81
    1308:	79 f4       	brne	.+30     	; 0x1328 <main+0x362>
					{
						_delay_ms(250);
    130a:	8a ef       	ldi	r24, 0xFA	; 250
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	7a d7       	rcall	.+3828   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
						byDelayRamping = 0;		// restore acting on ramping button presses
    1310:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <byDelayRamping>

						while (modeIdx == TEMP_CHECK_MODE)	// Temperature Check
    1314:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1318:	81 35       	cpi	r24, 0x51	; 81
    131a:	09 f0       	breq	.+2      	; 0x131e <main+0x358>
    131c:	b1 c0       	rjmp	.+354    	; 0x1480 <main+0x4ba>
						{
							// blink out temperature in 2 digits
							BlinkOutNumber(byTempReading, TEMP_CHECK_MODE);
    131e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <byTempReading>
    1322:	61 e5       	ldi	r22, 0x51	; 81
    1324:	27 d8       	rcall	.-4018   	; 0x374 <BlinkOutNumber>
    1326:	f6 cf       	rjmp	.-20     	; 0x1314 <main+0x34e>
						}
					}

					else if (modeIdx == FIRM_VERS_MODE)
    1328:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    132c:	82 35       	cpi	r24, 0x52	; 82
    132e:	71 f4       	brne	.+28     	; 0x134c <main+0x386>
					{
						_delay_ms(250);
    1330:	8a ef       	ldi	r24, 0xFA	; 250
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	67 d7       	rcall	.+3790   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
						byDelayRamping = 0;		// restore acting on ramping button presses
    1336:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <byDelayRamping>
						
						while (modeIdx == FIRM_VERS_MODE)	// Battery Check
    133a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    133e:	82 35       	cpi	r24, 0x52	; 82
    1340:	09 f0       	breq	.+2      	; 0x1344 <main+0x37e>
    1342:	9e c0       	rjmp	.+316    	; 0x1480 <main+0x4ba>
						{
							// blink out volts and tenths
							byte vers = FIRMWARE_VERS;
							BlinkOutNumber(vers, FIRM_VERS_MODE);
    1344:	62 e5       	ldi	r22, 0x52	; 82
    1346:	8d e0       	ldi	r24, 0x0D	; 13
    1348:	15 d8       	rcall	.-4054   	; 0x374 <BlinkOutNumber>
    134a:	f7 cf       	rjmp	.-18     	; 0x133a <main+0x374>
						}
					}

					else if (modeIdx == STROBE_MODE)
    134c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1350:	8b 35       	cpi	r24, 0x5B	; 91
    1352:	49 f4       	brne	.+18     	; 0x1366 <main+0x3a0>
					{
						while (modeIdx == STROBE_MODE)      // strobe at 16 Hz
    1354:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1358:	8b 35       	cpi	r24, 0x5B	; 91
    135a:	09 f0       	breq	.+2      	; 0x135e <main+0x398>
    135c:	91 c0       	rjmp	.+290    	; 0x1480 <main+0x4ba>
						{
							Strobe(16,47);		// 20,60 is 12.5 Hz
    135e:	6f e2       	ldi	r22, 0x2F	; 47
    1360:	80 e1       	ldi	r24, 0x10	; 16
    1362:	7a d7       	rcall	.+3828   	; 0x2258 <__TEXT_REGION_LENGTH__+0x258>
    1364:	f7 cf       	rjmp	.-18     	; 0x1354 <main+0x38e>
							Strobe(ms, ms);
						}
					}
#endif

					else if (modeIdx == POLICE_STROBE)
    1366:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    136a:	8c 35       	cpi	r24, 0x5C	; 92
    136c:	01 f5       	brne	.+64     	; 0x13ae <main+0x3e8>
					{
						while (modeIdx == POLICE_STROBE)		// police strobe
    136e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1372:	8c 35       	cpi	r24, 0x5C	; 92
    1374:	09 f0       	breq	.+2      	; 0x1378 <main+0x3b2>
    1376:	84 c0       	rjmp	.+264    	; 0x1480 <main+0x4ba>
    1378:	f8 e0       	ldi	r31, 0x08	; 8
    137a:	7f 2e       	mov	r7, r31
						{
							for(i=0;i<8;i++)
							{
								if (modeIdx != POLICE_STROBE)		break;
    137c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1380:	8c 35       	cpi	r24, 0x5C	; 92
    1382:	19 f0       	breq	.+6      	; 0x138a <main+0x3c4>
    1384:	e8 e0       	ldi	r30, 0x08	; 8
    1386:	7e 2e       	mov	r7, r30
    1388:	0d c0       	rjmp	.+26     	; 0x13a4 <main+0x3de>
								Strobe(20,40);
    138a:	68 e2       	ldi	r22, 0x28	; 40
    138c:	84 e1       	ldi	r24, 0x14	; 20
    138e:	64 d7       	rcall	.+3784   	; 0x2258 <__TEXT_REGION_LENGTH__+0x258>
    1390:	7a 94       	dec	r7

					else if (modeIdx == POLICE_STROBE)
					{
						while (modeIdx == POLICE_STROBE)		// police strobe
						{
							for(i=0;i<8;i++)
    1392:	71 10       	cpse	r7, r1
    1394:	f3 cf       	rjmp	.-26     	; 0x137c <main+0x3b6>
    1396:	f6 cf       	rjmp	.-20     	; 0x1384 <main+0x3be>
								Strobe(20,40);
							}
							for(i=0;i<8;i++)
							{
								if (modeIdx != POLICE_STROBE)		break;
								Strobe(40,80);
    1398:	60 e5       	ldi	r22, 0x50	; 80
    139a:	88 e2       	ldi	r24, 0x28	; 40
    139c:	5d d7       	rcall	.+3770   	; 0x2258 <__TEXT_REGION_LENGTH__+0x258>
    139e:	7a 94       	dec	r7
							for(i=0;i<8;i++)
							{
								if (modeIdx != POLICE_STROBE)		break;
								Strobe(20,40);
							}
							for(i=0;i<8;i++)
    13a0:	77 20       	and	r7, r7
    13a2:	29 f3       	breq	.-54     	; 0x136e <main+0x3a8>
							{
								if (modeIdx != POLICE_STROBE)		break;
    13a4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    13a8:	8c 35       	cpi	r24, 0x5C	; 92
    13aa:	b1 f3       	breq	.-20     	; 0x1398 <main+0x3d2>
    13ac:	e0 cf       	rjmp	.-64     	; 0x136e <main+0x3a8>
								Strobe(40,80);
							}
						}
					}

					else if (modeIdx == BIKING_STROBE)
    13ae:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    13b2:	8d 35       	cpi	r24, 0x5D	; 93
    13b4:	49 f5       	brne	.+82     	; 0x1408 <main+0x442>
					{
						while (modeIdx == BIKING_STROBE)		// police strobe
    13b6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    13ba:	8d 35       	cpi	r24, 0x5D	; 93
    13bc:	11 f5       	brne	.+68     	; 0x1402 <main+0x43c>
    13be:	74 e0       	ldi	r23, 0x04	; 4
    13c0:	77 2e       	mov	r7, r23
						{
							// normal version
							for(i=0;i<4;i++)
							{
								if (modeIdx != BIKING_STROBE)		break;
    13c2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    13c6:	8d 35       	cpi	r24, 0x5D	; 93
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <main+0x40a>
    13ca:	6a e0       	ldi	r22, 0x0A	; 10
    13cc:	76 2e       	mov	r7, r22
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <main+0x432>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    13d0:	b8 bc       	out	0x28, r11	; 40
	ALT_PWM_LVL = pwm7135;
    13d2:	19 bc       	out	0x29, r1	; 41
							// normal version
							for(i=0;i<4;i++)
							{
								if (modeIdx != BIKING_STROBE)		break;
								SetOutput(255,0);
								_delay_ms(5);
    13d4:	85 e0       	ldi	r24, 0x05	; 5
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	15 d7       	rcall	.+3626   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    13da:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
    13dc:	b9 bc       	out	0x29, r11	; 41
							{
								if (modeIdx != BIKING_STROBE)		break;
								SetOutput(255,0);
								_delay_ms(5);
								SetOutput(0,255);
								_delay_ms(65);
    13de:	81 e4       	ldi	r24, 0x41	; 65
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	10 d7       	rcall	.+3616   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
    13e4:	7a 94       	dec	r7
					else if (modeIdx == BIKING_STROBE)
					{
						while (modeIdx == BIKING_STROBE)		// police strobe
						{
							// normal version
							for(i=0;i<4;i++)
    13e6:	71 10       	cpse	r7, r1
    13e8:	ec cf       	rjmp	.-40     	; 0x13c2 <main+0x3fc>
    13ea:	ef cf       	rjmp	.-34     	; 0x13ca <main+0x404>
								_delay_ms(65);
							}
							for(i=0;i<10;i++)
							{
								if (modeIdx != BIKING_STROBE)		break;
								_delay_ms(72);
    13ec:	88 e4       	ldi	r24, 0x48	; 72
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	09 d7       	rcall	.+3602   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
    13f2:	7a 94       	dec	r7
								SetOutput(255,0);
								_delay_ms(5);
								SetOutput(0,255);
								_delay_ms(65);
							}
							for(i=0;i<10;i++)
    13f4:	77 20       	and	r7, r7
    13f6:	f9 f2       	breq	.-66     	; 0x13b6 <main+0x3f0>
							{
								if (modeIdx != BIKING_STROBE)		break;
    13f8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    13fc:	8d 35       	cpi	r24, 0x5D	; 93
    13fe:	b1 f3       	breq	.-20     	; 0x13ec <main+0x426>
    1400:	da cf       	rjmp	.-76     	; 0x13b6 <main+0x3f0>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    1402:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
    1404:	19 bc       	out	0x29, r1	; 41
    1406:	3c c0       	rjmp	.+120    	; 0x1480 <main+0x4ba>
							}
						}
						SetOutput(0,0);
					}

					else if (modeIdx == BEACON_2S_MODE)
    1408:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    140c:	8e 35       	cpi	r24, 0x5E	; 94
    140e:	d1 f4       	brne	.+52     	; 0x1444 <main+0x47e>
					{
						while (modeIdx == BEACON_2S_MODE)		// Beacon 2 sec mode
    1410:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1414:	8e 35       	cpi	r24, 0x5E	; 94
    1416:	a1 f5       	brne	.+104    	; 0x1480 <main+0x4ba>
						{
							_delay_ms(300);	// pause a little initially
    1418:	8c e2       	ldi	r24, 0x2C	; 44
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	f3 d6       	rcall	.+3558   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
						
							Strobe(125,125);		// two flash's
    141e:	6d e7       	ldi	r22, 0x7D	; 125
    1420:	8d e7       	ldi	r24, 0x7D	; 125
    1422:	1a d7       	rcall	.+3636   	; 0x2258 <__TEXT_REGION_LENGTH__+0x258>
							Strobe(125,125);
    1424:	6d e7       	ldi	r22, 0x7D	; 125
    1426:	8d e7       	ldi	r24, 0x7D	; 125
    1428:	17 d7       	rcall	.+3630   	; 0x2258 <__TEXT_REGION_LENGTH__+0x258>
    142a:	5f e0       	ldi	r21, 0x0F	; 15
    142c:	75 2e       	mov	r7, r21
						
							for (i=0; i < 15; i++)	// 1.5 secs delay
							{
								if (modeIdx != BEACON_2S_MODE)		break;
    142e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1432:	8e 35       	cpi	r24, 0x5E	; 94
    1434:	69 f7       	brne	.-38     	; 0x1410 <main+0x44a>
								_delay_ms(100);
    1436:	84 e6       	ldi	r24, 0x64	; 100
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	e4 d6       	rcall	.+3528   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
    143c:	7a 94       	dec	r7
							_delay_ms(300);	// pause a little initially
						
							Strobe(125,125);		// two flash's
							Strobe(125,125);
						
							for (i=0; i < 15; i++)	// 1.5 secs delay
    143e:	71 10       	cpse	r7, r1
    1440:	f6 cf       	rjmp	.-20     	; 0x142e <main+0x468>
    1442:	e6 cf       	rjmp	.-52     	; 0x1410 <main+0x44a>
								_delay_ms(100);
							}
						}
					}

					else if (modeIdx == BEACON_10S_MODE)
    1444:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1448:	8f 35       	cpi	r24, 0x5F	; 95
    144a:	d1 f4       	brne	.+52     	; 0x1480 <main+0x4ba>
						while (modeIdx == BEACON_10S_MODE)		// Beacon 10 sec mode
    144c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1450:	8f 35       	cpi	r24, 0x5F	; 95
    1452:	b1 f4       	brne	.+44     	; 0x1480 <main+0x4ba>
						{
							_delay_ms(300);	// pause a little initially
    1454:	8c e2       	ldi	r24, 0x2C	; 44
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	d5 d6       	rcall	.+3498   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>

							Strobe(240,240);		// two slow flash's
    145a:	60 ef       	ldi	r22, 0xF0	; 240
    145c:	80 ef       	ldi	r24, 0xF0	; 240
    145e:	fc d6       	rcall	.+3576   	; 0x2258 <__TEXT_REGION_LENGTH__+0x258>
							Strobe(240,240);
    1460:	60 ef       	ldi	r22, 0xF0	; 240
    1462:	80 ef       	ldi	r24, 0xF0	; 240
    1464:	f9 d6       	rcall	.+3570   	; 0x2258 <__TEXT_REGION_LENGTH__+0x258>
    1466:	44 e6       	ldi	r20, 0x64	; 100
    1468:	74 2e       	mov	r7, r20

							for (i=0; i < 100; i++)	// 10 secs delay
							{
								if (modeIdx != BEACON_10S_MODE)		break;
    146a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    146e:	8f 35       	cpi	r24, 0x5F	; 95
    1470:	69 f7       	brne	.-38     	; 0x144c <main+0x486>
								_delay_ms(100);
    1472:	84 e6       	ldi	r24, 0x64	; 100
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	c6 d6       	rcall	.+3468   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
    1478:	7a 94       	dec	r7
							_delay_ms(300);	// pause a little initially

							Strobe(240,240);		// two slow flash's
							Strobe(240,240);

							for (i=0; i < 100; i++)	// 10 secs delay
    147a:	71 10       	cpse	r7, r1
    147c:	f6 cf       	rjmp	.-20     	; 0x146a <main+0x4a4>
    147e:	e6 cf       	rjmp	.-52     	; 0x144c <main+0x486>
			

			//---------------------------------------------------------------------
			// Perform low battery indicator tests
			//---------------------------------------------------------------------
			if (LowBattSignal)
    1480:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <LowBattSignal>
    1484:	88 23       	and	r24, r24
    1486:	09 f4       	brne	.+2      	; 0x148a <main+0x4c4>
    1488:	45 c0       	rjmp	.+138    	; 0x1514 <main+0x54e>
			{
				if (ramping)
    148a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
    148e:	88 23       	and	r24, r24
    1490:	69 f1       	breq	.+90     	; 0x14ec <main+0x526>
				{
					if (outLevel > 0)
    1492:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
    1496:	88 23       	and	r24, r24
    1498:	d1 f1       	breq	.+116    	; 0x150e <main+0x548>
					{
						if ((outLevel == 1) || (outLevel == 255))		// 8/27/16 TE: 255 is special moon mode
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	11 f0       	breq	.+4      	; 0x14a2 <main+0x4dc>
    149e:	8f 3f       	cpi	r24, 0xFF	; 255
    14a0:	61 f4       	brne	.+24     	; 0x14ba <main+0x4f4>
						{
							// Reached critical battery level
							outLevel = 7;	// bump it up a little for final shutoff blinks
    14a2:	87 e0       	ldi	r24, 0x07	; 7
    14a4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <outLevel>
							BlinkLVP(8);	// blink more and quicker (to get attention)
    14a8:	88 e0       	ldi	r24, 0x08	; 8
    14aa:	85 d7       	rcall	.+3850   	; 0x23b6 <__TEXT_REGION_LENGTH__+0x3b6>
							outLevel = rampingLevel = 0;	// Shut it down
    14ac:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
    14b0:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <outLevel>
							rampState = 0;
    14b4:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <rampState>
    14b8:	12 c0       	rjmp	.+36     	; 0x14de <main+0x518>
						}
						else
						{
							// Drop the output level
							BlinkLVP(3);	// normal 3 blinks
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	7c d7       	rcall	.+3832   	; 0x23b6 <__TEXT_REGION_LENGTH__+0x3b6>
							if (outLevel > MAX_RAMP_LEVEL/16)
    14be:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
    14c2:	8a 30       	cpi	r24, 0x0A	; 10
    14c4:	50 f0       	brcs	.+20     	; 0x14da <main+0x514>
								outLevel = ((int)outLevel * 4) / 5;	// drop the level (index) by 20%
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	b6 01       	movw	r22, r12
    14d2:	2d d4       	rcall	.+2138   	; 0x1d2e <__divmodhi4>
    14d4:	60 93 df 00 	sts	0x00DF, r22	; 0x8000df <outLevel>
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <main+0x518>
							else
								outLevel = 1;
    14da:	50 92 df 00 	sts	0x00DF, r5	; 0x8000df <outLevel>
						}
						SetLevel(outLevel);
    14de:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
    14e2:	cc d6       	rcall	.+3480   	; 0x227c <__TEXT_REGION_LENGTH__+0x27c>
						_delay_ms(250);		// delay a little here before the next drop, if it happens quick
    14e4:	8a ef       	ldi	r24, 0xFA	; 250
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	8d d6       	rcall	.+3354   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
    14ea:	11 c0       	rjmp	.+34     	; 0x150e <main+0x548>
					}
				}
				else   // Not ramping
				{
					if (modeIdx > 0)
    14ec:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    14f0:	88 23       	and	r24, r24
    14f2:	69 f0       	breq	.+26     	; 0x150e <main+0x548>
					{
						if (modeIdx == 1)
    14f4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	11 f4       	brne	.+4      	; 0x1500 <main+0x53a>
						{
							// Reached critical battery level
							BlinkLVP(8);	// blink more and quicker (to get attention)
    14fc:	88 e0       	ldi	r24, 0x08	; 8
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <main+0x53c>
						}
						else
						{
							// Drop the output level
							BlinkLVP(3);	// normal 3 blinks
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	59 d7       	rcall	.+3762   	; 0x23b6 <__TEXT_REGION_LENGTH__+0x3b6>
						}
						if (modeIdx < 16)
    1504:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1508:	80 31       	cpi	r24, 0x10	; 16
    150a:	08 f4       	brcc	.+2      	; 0x150e <main+0x548>
							PrevMode();
    150c:	e0 d7       	rcall	.+4032   	; 0x24ce <__TEXT_REGION_LENGTH__+0x4ce>
					}
				}
				LowBattSignal = 0;
    150e:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <LowBattSignal>
    1512:	28 c0       	rjmp	.+80     	; 0x1564 <main+0x59e>
			}
			else if (LowBattBlinkSignal)
    1514:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <LowBattBlinkSignal>
    1518:	88 23       	and	r24, r24
    151a:	21 f1       	breq	.+72     	; 0x1564 <main+0x59e>
			{
				// Blink the Indicator LED twice
				if (onboardLedEnable)
    151c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <onboardLedEnable>
    1520:	88 23       	and	r24, r24
    1522:	f1 f0       	breq	.+60     	; 0x1560 <main+0x59a>
				{
					if ((modeIdx > 0) || (locatorLed == 0))
    1524:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1528:	81 11       	cpse	r24, r1
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <main+0x56e>
    152c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <locatorLed>
    1530:	81 11       	cpse	r24, r1
    1532:	05 c0       	rjmp	.+10     	; 0x153e <main+0x578>
					{
						BlinkIndLed(500, 2);
    1534:	62 e0       	ldi	r22, 0x02	; 2
    1536:	84 ef       	ldi	r24, 0xF4	; 244
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	6f d7       	rcall	.+3806   	; 0x241a <__TEXT_REGION_LENGTH__+0x41a>
    153c:	11 c0       	rjmp	.+34     	; 0x1560 <main+0x59a>
					}
					else
					{
						TurnOnBoardLed(0);
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	6a d6       	rcall	.+3284   	; 0x2216 <__TEXT_REGION_LENGTH__+0x216>
						_delay_ms(500);
    1542:	84 ef       	ldi	r24, 0xF4	; 244
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	5e d6       	rcall	.+3260   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
						TurnOnBoardLed(1);
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	65 d6       	rcall	.+3274   	; 0x2216 <__TEXT_REGION_LENGTH__+0x216>
						_delay_ms(500);
    154c:	84 ef       	ldi	r24, 0xF4	; 244
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	59 d6       	rcall	.+3250   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
						TurnOnBoardLed(0);
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	60 d6       	rcall	.+3264   	; 0x2216 <__TEXT_REGION_LENGTH__+0x216>
						_delay_ms(500);
    1556:	84 ef       	ldi	r24, 0xF4	; 244
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	54 d6       	rcall	.+3240   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
						TurnOnBoardLed(1);
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	5b d6       	rcall	.+3254   	; 0x2216 <__TEXT_REGION_LENGTH__+0x216>
					}
				}

				LowBattBlinkSignal = 0;
    1560:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <LowBattBlinkSignal>


			//---------------------------------------------------------------------
			// Temperature monitoring - step it down if too hot!
			//---------------------------------------------------------------------
			if ((stepdownMode == 1) && (byTempReading >= byStepdownTemp) && (wThermalTicks == 0))
    1564:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <stepdownMode>
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	b9 f5       	brne	.+110    	; 0x15da <main+0x614>
    156c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <byTempReading>
    1570:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <byStepdownTemp>
    1574:	98 17       	cp	r25, r24
    1576:	88 f1       	brcs	.+98     	; 0x15da <main+0x614>
    1578:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <wThermalTicks>
    157c:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <wThermalTicks+0x1>
    1580:	89 2b       	or	r24, r25
    1582:	59 f5       	brne	.+86     	; 0x15da <main+0x614>
			{
				if (ramping)
    1584:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
    1588:	88 23       	and	r24, r24
    158a:	b1 f0       	breq	.+44     	; 0x15b8 <main+0x5f2>
				{
					if (outLevel >= FET_START_LVL)
    158c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
    1590:	82 34       	cpi	r24, 0x42	; 66
    1592:	18 f1       	brcs	.+70     	; 0x15da <main+0x614>
					{
						int newLevel = outLevel - outLevel/6;	// reduce by 16.7%
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	66 e0       	ldi	r22, 0x06	; 6
    159a:	a9 d3       	rcall	.+1874   	; 0x1cee <__udivmodqi4>
    159c:	a9 01       	movw	r20, r18
    159e:	48 1b       	sub	r20, r24
    15a0:	51 09       	sbc	r21, r1
    15a2:	ca 01       	movw	r24, r20
					
						if (newLevel >= FET_START_LVL)
    15a4:	42 34       	cpi	r20, 0x42	; 66
    15a6:	51 05       	cpc	r21, r1
    15a8:	0c f4       	brge	.+2      	; 0x15ac <main+0x5e6>
							outLevel = newLevel;	// reduce by 16.7%
						else
							outLevel = FET_START_LVL - 1;	// make it the max of the 7135
    15aa:	81 e4       	ldi	r24, 0x41	; 65
    15ac:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <outLevel>
					
						SetLevel(outLevel);
    15b0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
    15b4:	63 d6       	rcall	.+3270   	; 0x227c <__TEXT_REGION_LENGTH__+0x27c>
    15b6:	09 c0       	rjmp	.+18     	; 0x15ca <main+0x604>
						#endif
					}
				}
				else	// modes
				{
					if ((modeIdx > 0) && (modeIdx < 16))
    15b8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    15bc:	88 23       	and	r24, r24
    15be:	69 f0       	breq	.+26     	; 0x15da <main+0x614>
    15c0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    15c4:	80 31       	cpi	r24, 0x10	; 16
    15c6:	48 f4       	brcc	.+18     	; 0x15da <main+0x614>
					{
						PrevMode();	// Drop the output level
    15c8:	82 d7       	rcall	.+3844   	; 0x24ce <__TEXT_REGION_LENGTH__+0x4ce>
						
						wThermalTicks = TEMP_ADJ_PERIOD;
    15ca:	10 93 af 00 	sts	0x00AF, r17	; 0x8000af <wThermalTicks+0x1>
    15ce:	00 93 ae 00 	sts	0x00AE, r16	; 0x8000ae <wThermalTicks>
						#ifdef ONBOARD_LED_PIN
						BlinkIndLed(500, 3);	// Flash the Ind LED to show it's lowering
    15d2:	63 e0       	ldi	r22, 0x03	; 3
    15d4:	84 ef       	ldi	r24, 0xF4	; 244
    15d6:	91 e0       	ldi	r25, 0x01	; 1
    15d8:	20 d7       	rcall	.+3648   	; 0x241a <__TEXT_REGION_LENGTH__+0x41a>

			//---------------------------------------------------------------------
			// Be sure switch is not pressed and light is OFF for at least 5 secs
			//---------------------------------------------------------------------
			word wWaitTicks = 310;	// 5 secs
			if (LowBattState)
    15da:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <LowBattState>
    15de:	88 23       	and	r24, r24
    15e0:	29 f0       	breq	.+10     	; 0x15ec <main+0x626>
				wWaitTicks = 22500;	// 6 minutes
    15e2:	24 ee       	ldi	r18, 0xE4	; 228
    15e4:	62 2e       	mov	r6, r18
    15e6:	27 e5       	ldi	r18, 0x57	; 87
    15e8:	72 2e       	mov	r7, r18
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <main+0x62e>
			}

			//---------------------------------------------------------------------
			// Be sure switch is not pressed and light is OFF for at least 5 secs
			//---------------------------------------------------------------------
			word wWaitTicks = 310;	// 5 secs
    15ec:	96 e3       	ldi	r25, 0x36	; 54
    15ee:	69 2e       	mov	r6, r25
    15f0:	77 24       	eor	r7, r7
    15f2:	73 94       	inc	r7
			if (LowBattState)
				wWaitTicks = 22500;	// 6 minutes
			
			if (((!ramping && (modeIdx == 0)) || (ramping && outLevel == 0))
    15f4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
    15f8:	81 11       	cpse	r24, r1
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <main+0x63e>
    15fc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <modeIdx>
    1600:	88 23       	and	r24, r24
    1602:	49 f0       	breq	.+18     	; 0x1616 <main+0x650>
    1604:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
    1608:	88 23       	and	r24, r24
    160a:	09 f4       	brne	.+2      	; 0x160e <main+0x648>
    160c:	5a c0       	rjmp	.+180    	; 0x16c2 <main+0x6fc>
    160e:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
    1612:	81 11       	cpse	r24, r1
    1614:	56 c0       	rjmp	.+172    	; 0x16c2 <main+0x6fc>
									 &&
				 !IsPressed() && (wIdleTicks > wWaitTicks))
    1616:	2e d7       	rcall	.+3676   	; 0x2474 <__TEXT_REGION_LENGTH__+0x474>
			word wWaitTicks = 310;	// 5 secs
			if (LowBattState)
				wWaitTicks = 22500;	// 6 minutes
			
			if (((!ramping && (modeIdx == 0)) || (ramping && outLevel == 0))
									 &&
    1618:	89 2b       	or	r24, r25
    161a:	09 f0       	breq	.+2      	; 0x161e <main+0x658>
    161c:	52 c0       	rjmp	.+164    	; 0x16c2 <main+0x6fc>
				 !IsPressed() && (wIdleTicks > wWaitTicks))
    161e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <wIdleTicks>
    1622:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <wIdleTicks+0x1>
    1626:	68 16       	cp	r6, r24
    1628:	79 06       	cpc	r7, r25
    162a:	08 f0       	brcs	.+2      	; 0x162e <main+0x668>
    162c:	4a c0       	rjmp	.+148    	; 0x16c2 <main+0x6fc>
				// If the battery is currently low, then turn OFF the indicator LED before going to sleep
				//  to help in saving the battery
			  #ifdef VOLT_MON_R1R2
				if (byVoltage < ADC_LOW)
			  #else
				if (byVoltage < BATT_LOW)
    162e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <byVoltage>
    1632:	80 32       	cpi	r24, 0x20	; 32
    1634:	30 f4       	brcc	.+12     	; 0x1642 <main+0x67c>
			  #endif
				if (locatorLed)
    1636:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <locatorLed>
    163a:	88 23       	and	r24, r24
    163c:	11 f0       	breq	.+4      	; 0x1642 <main+0x67c>
					TurnOnBoardLed(0);
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	ea d5       	rcall	.+3028   	; 0x2216 <__TEXT_REGION_LENGTH__+0x216>

				_delay_ms(1); // Need this here, maybe instructions for PWM output not getting executed before shutdown?
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	de d5       	rcall	.+3004   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
**************************************************************************************/
inline void SleepUntilSwitchPress()
{
	// This routine takes up a lot of program memory :(
	
	wIdleTicks = 0;		// reset here
    1648:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <wIdleTicks+0x1>
    164c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <wIdleTicks>
	wThermalTicks = 0;	// reset to allow thermal stepdown to go right away
    1650:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <wThermalTicks+0x1>
    1654:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <wThermalTicks>
* WDT_off - turn off the WatchDog timer
* =======
**************************************************************************************/
inline void WDT_off()
{
	cli();							// Disable interrupts
    1658:	f8 94       	cli
	wdt_reset();					// Reset the WDT
    165a:	a8 95       	wdr
	MCUSR &= ~(1<<WDRF);			// Clear Watchdog reset flag
    165c:	84 b7       	in	r24, 0x34	; 52
    165e:	87 7f       	andi	r24, 0xF7	; 247
    1660:	84 bf       	out	0x34, r24	; 52
	WDTCR |= (1<<WDCE) | (1<<WDE);  // Start timed sequence
    1662:	81 b5       	in	r24, 0x21	; 33
    1664:	88 61       	ori	r24, 0x18	; 24
    1666:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;					// Disable WDT
    1668:	11 bc       	out	0x21, r1	; 33
	sei();							// Enable interrupts
    166a:	78 94       	sei
* ADC_off - Turn the AtoD Converter OFF
* =======
**************************************************************************************/
inline void ADC_off()
{
	ADCSRA &= ~(1<<7); //ADC off
    166c:	37 98       	cbi	0x06, 7	; 6
	WDT_off();
	
	ADC_off();		// Save more power -- turn the AtoD OFF
	
	// Need to reset press duration since a button release wasn't recorded
	wPressDuration = 0;
    166e:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <wPressDuration+0x1>
    1672:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <wPressDuration>
	
	//  Enable a pin change interrupt to wake us up. However, we have to make sure the switch
	// is released otherwise we will wake when the user releases the switch
	while (IsPressed()) {
    1676:	fe d6       	rcall	.+3580   	; 0x2474 <__TEXT_REGION_LENGTH__+0x474>
    1678:	89 2b       	or	r24, r25
    167a:	21 f0       	breq	.+8      	; 0x1684 <main+0x6be>
		_delay_ms(16);
    167c:	80 e1       	ldi	r24, 0x10	; 16
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	c1 d5       	rcall	.+2946   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
    1682:	f9 cf       	rjmp	.-14     	; 0x1676 <main+0x6b0>
* ========
**************************************************************************************/
inline void PCINT_on()
{
	// Enable pin change interrupts
	GIMSK |= (1 << PCIE);
    1684:	8b b7       	in	r24, 0x3b	; 59
    1686:	80 62       	ori	r24, 0x20	; 32
    1688:	8b bf       	out	0x3b, r24	; 59
	}

	PCINT_on();
	
	//-----------------------------------------
   sleep_enable();
    168a:	85 b7       	in	r24, 0x35	; 53
    168c:	80 62       	ori	r24, 0x20	; 32
    168e:	85 bf       	out	0x35, r24	; 53
	sleep_bod_disable();		// try to disable Brown-Out Detection to reduce parasitic drain
    1690:	85 b7       	in	r24, 0x35	; 53
    1692:	84 68       	ori	r24, 0x84	; 132
    1694:	85 bf       	out	0x35, r24	; 53
    1696:	8b 7f       	andi	r24, 0xFB	; 251
    1698:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();				// go to sleepy beddy bye
    169a:	88 95       	sleep
	sleep_disable();
    169c:	85 b7       	in	r24, 0x35	; 53
    169e:	8f 7d       	andi	r24, 0xDF	; 223
    16a0:	85 bf       	out	0x35, r24	; 53
* =========
**************************************************************************************/
inline void PCINT_off()
{
	// Disable pin change interrupts
	GIMSK &= ~(1 << PCIE);
    16a2:	8b b7       	in	r24, 0x3b	; 59
    16a4:	8f 7d       	andi	r24, 0xDF	; 223
    16a6:	8b bf       	out	0x3b, r24	; 59
{
	// Turn ADC on (13 CLKs required for conversion, go max 200 kHz for 10-bit resolution)
  #ifdef VOLT_MON_R1R2
	ADMUX = ADCMUX_VCC_R1R2;			// 1.1v reference, not left-adjust, ADC1/PB2
  #else
	ADMUX  = ADCMUX_VCC_INTREF;		// not left-adjust, Vbg
    16a8:	8c e0       	ldi	r24, 0x0C	; 12
    16aa:	87 b9       	out	0x07, r24	; 7
  #endif
	DIDR0 |= (1 << ADC1D);					// disable digital input on ADC1 pin to reduce power consumption
    16ac:	a2 9a       	sbi	0x14, 2	; 20
	ADCSRA = (1 << ADEN ) | (1 << ADSC ) | 0x07;// enable, start, ADC clock prescale = 128 for 62.5 kHz
    16ae:	87 ec       	ldi	r24, 0xC7	; 199
    16b0:	86 b9       	out	0x06, r24	; 6
* ======
**************************************************************************************/
inline void WDT_on()
{
	// Setup watchdog timer to only interrupt, not reset, every 16ms.
	cli();							// Disable interrupts
    16b2:	f8 94       	cli
	wdt_reset();					// Reset the WDT
    16b4:	a8 95       	wdr
	WDTCR |= (1<<WDCE) | (1<<WDE);  // Start timed sequence
    16b6:	81 b5       	in	r24, 0x21	; 33
    16b8:	88 61       	ori	r24, 0x18	; 24
    16ba:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDIE);				// Enable interrupt every 16ms (was 1<<WDTIE)
    16bc:	80 e4       	ldi	r24, 0x40	; 64
    16be:	81 bd       	out	0x21, r24	; 33
	sei();							// Enable interrupts
    16c0:	78 94       	sei
			}
			
			//---------------------------------------------------------------------
			// Check for a scheduled output channel blink indicator
			//---------------------------------------------------------------------
			if (byBlinkActiveChan)
    16c2:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <byBlinkActiveChan>
    16c6:	88 23       	and	r24, r24
    16c8:	09 f4       	brne	.+2      	; 0x16cc <main+0x706>
    16ca:	af cd       	rjmp	.-1186   	; 0x122a <main+0x264>
**************************************************************************************/
inline static void BlinkActiveChannel()
{
	byte cnt = 1;
	
	if (outLevel == 0)	// if invalid, bail. outLevel should be 1..RAMP_SIZE or 255
    16cc:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <outLevel>
    16d0:	81 11       	cpse	r24, r1
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <main+0x714>
			// Check for a scheduled output channel blink indicator
			//---------------------------------------------------------------------
			if (byBlinkActiveChan)
			{
				BlinkActiveChannel();
				byBlinkActiveChan = 0;
    16d4:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <byBlinkActiveChan>
    16d8:	a8 cd       	rjmp	.-1200   	; 0x122a <main+0x264>
{
	byte cnt = 1;
	
	if (outLevel == 0)	// if invalid, bail. outLevel should be 1..RAMP_SIZE or 255
		return;
	if (outLevel < FET_START_LVL)
    16da:	82 54       	subi	r24, 0x42	; 66
    16dc:	8d 3b       	cpi	r24, 0xBD	; 189
    16de:	10 f4       	brcc	.+4      	; 0x16e4 <main+0x71e>
		cnt = 1;
	else if (outLevel < 255)	// 255 is special value for moon mode (use 1)
		cnt = 2;
    16e0:	22 e0       	ldi	r18, 0x02	; 2
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <main+0x720>
	byte cnt = 1;
	
	if (outLevel == 0)	// if invalid, bail. outLevel should be 1..RAMP_SIZE or 255
		return;
	if (outLevel < FET_START_LVL)
		cnt = 1;
    16e4:	21 e0       	ldi	r18, 0x01	; 1
	else if (outLevel < 255)	// 255 is special value for moon mode (use 1)
		cnt = 2;
	
	_delay_ms(300);				// delay initially so a button LED can be seen
    16e6:	8c e2       	ldi	r24, 0x2C	; 44
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	29 83       	std	Y+1, r18	; 0x01
    16ec:	8b d5       	rcall	.+2838   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
    16ee:	29 81       	ldd	r18, Y+1	; 0x01
	for (; cnt>0; cnt--)
	{
		TurnOnBoardLed(1);
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	29 83       	std	Y+1, r18	; 0x01
    16f4:	90 d5       	rcall	.+2848   	; 0x2216 <__TEXT_REGION_LENGTH__+0x216>
		_delay_ms(175);
    16f6:	8f ea       	ldi	r24, 0xAF	; 175
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	84 d5       	rcall	.+2824   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
		TurnOnBoardLed(0);
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	8b d5       	rcall	.+2838   	; 0x2216 <__TEXT_REGION_LENGTH__+0x216>
		if (cnt > 1)
    1700:	29 81       	ldd	r18, Y+1	; 0x01
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	29 f4       	brne	.+10     	; 0x1710 <main+0x74a>
			_delay_ms(175);
    1706:	8f ea       	ldi	r24, 0xAF	; 175
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	7c d5       	rcall	.+2808   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
		cnt = 1;
	else if (outLevel < 255)	// 255 is special value for moon mode (use 1)
		cnt = 2;
	
	_delay_ms(300);				// delay initially so a button LED can be seen
	for (; cnt>0; cnt--)
    170c:	21 e0       	ldi	r18, 0x01	; 1
    170e:	f0 cf       	rjmp	.-32     	; 0x16f0 <main+0x72a>
    1710:	21 30       	cpi	r18, 0x01	; 1
    1712:	e1 f7       	brne	.-8      	; 0x170c <main+0x746>
    1714:	df cf       	rjmp	.-66     	; 0x16d4 <main+0x70e>
		
      //---------------------------------------------------------------------------------------
		else                             // Configuration mode in effect
      //---------------------------------------------------------------------------------------
		{
			if (configClicks != prevConfigClicks)
    1716:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    171a:	8a 15       	cp	r24, r10
    171c:	71 f0       	breq	.+28     	; 0x173a <main+0x774>
			{
				prevConfigClicks = configClicks;
    171e:	a0 90 c3 00 	lds	r10, 0x00C3	; 0x8000c3 <configClicks>
				if (configClicks > 0)
    1722:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1726:	88 23       	and	r24, r24
    1728:	41 f0       	breq	.+16     	; 0x173a <main+0x774>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    172a:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
    172c:	84 e1       	ldi	r24, 0x14	; 20
    172e:	89 bd       	out	0x29, r24	; 41
* ==========
**************************************************************************************/
inline static void ClickBlink()
{
	SetOutput(0,20);
	_delay_ms(100);
    1730:	84 e6       	ldi	r24, 0x64	; 100
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	67 d5       	rcall	.+2766   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    1736:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
    1738:	19 bc       	out	0x29, r1	; 41
				prevConfigClicks = configClicks;
				if (configClicks > 0)
					ClickBlink();
			}
			
			if (ConfigMode != prevConfigMode)
    173a:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <ConfigMode>
    173e:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <prevConfigMode>
    1742:	98 17       	cp	r25, r24
    1744:	09 f4       	brne	.+2      	; 0x1748 <main+0x782>
    1746:	b2 c2       	rjmp	.+1380   	; 0x1cac <main+0xce6>
			{
				prevConfigMode = ConfigMode;
    1748:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
    174c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <prevConfigMode>
				configIdleTime = 0;
    1750:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <configIdleTime>

				switch (ConfigMode)
    1754:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
    1758:	88 31       	cpi	r24, 0x18	; 24
    175a:	09 f4       	brne	.+2      	; 0x175e <main+0x798>
    175c:	6d c0       	rjmp	.+218    	; 0x1838 <main+0x872>
    175e:	78 f4       	brcc	.+30     	; 0x177e <main+0x7b8>
    1760:	8f 30       	cpi	r24, 0x0F	; 15
    1762:	c9 f1       	breq	.+114    	; 0x17d6 <main+0x810>
    1764:	28 f4       	brcc	.+10     	; 0x1770 <main+0x7aa>
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	e1 f0       	breq	.+56     	; 0x17a2 <main+0x7dc>
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	19 f1       	breq	.+70     	; 0x17b4 <main+0x7ee>
    176e:	c2 c0       	rjmp	.+388    	; 0x18f4 <main+0x92e>
    1770:	85 31       	cpi	r24, 0x15	; 21
    1772:	09 f4       	brne	.+2      	; 0x1776 <main+0x7b0>
    1774:	45 c0       	rjmp	.+138    	; 0x1800 <main+0x83a>
    1776:	87 31       	cpi	r24, 0x17	; 23
    1778:	09 f4       	brne	.+2      	; 0x177c <main+0x7b6>
    177a:	4f c0       	rjmp	.+158    	; 0x181a <main+0x854>
    177c:	bb c0       	rjmp	.+374    	; 0x18f4 <main+0x92e>
    177e:	89 32       	cpi	r24, 0x29	; 41
    1780:	09 f4       	brne	.+2      	; 0x1784 <main+0x7be>
    1782:	8d c0       	rjmp	.+282    	; 0x189e <main+0x8d8>
    1784:	38 f4       	brcc	.+14     	; 0x1794 <main+0x7ce>
    1786:	89 31       	cpi	r24, 0x19	; 25
    1788:	09 f4       	brne	.+2      	; 0x178c <main+0x7c6>
    178a:	63 c0       	rjmp	.+198    	; 0x1852 <main+0x88c>
    178c:	88 32       	cpi	r24, 0x28	; 40
    178e:	09 f4       	brne	.+2      	; 0x1792 <main+0x7cc>
    1790:	8a c2       	rjmp	.+1300   	; 0x1ca6 <main+0xce0>
    1792:	b0 c0       	rjmp	.+352    	; 0x18f4 <main+0x92e>
    1794:	84 36       	cpi	r24, 0x64	; 100
    1796:	09 f4       	brne	.+2      	; 0x179a <main+0x7d4>
    1798:	68 c0       	rjmp	.+208    	; 0x186a <main+0x8a4>
    179a:	85 36       	cpi	r24, 0x65	; 101
    179c:	09 f4       	brne	.+2      	; 0x17a0 <main+0x7da>
    179e:	70 c0       	rjmp	.+224    	; 0x1880 <main+0x8ba>
    17a0:	a9 c0       	rjmp	.+338    	; 0x18f4 <main+0x92e>
				{
				 case 1:
					_delay_ms(400);
    17a2:	80 e9       	ldi	r24, 0x90	; 144
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	2e d5       	rcall	.+2652   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>

					ConfigBlink(1);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	53 d6       	rcall	.+3238   	; 0x2452 <__TEXT_REGION_LENGTH__+0x452>
					++ConfigMode;
    17ac:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
    17b0:	8f 5f       	subi	r24, 0xFF	; 255
    17b2:	62 c2       	rjmp	.+1220   	; 0x1c78 <main+0xcb2>
					break;
					
				 case 3:	// 1 - (exiting) ramping mode selection
					if ((configClicks > 0) && (configClicks <= 8))
    17b4:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    17b8:	88 23       	and	r24, r24
    17ba:	59 f0       	breq	.+22     	; 0x17d2 <main+0x80c>
    17bc:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    17c0:	89 30       	cpi	r24, 0x09	; 9
    17c2:	38 f4       	brcc	.+14     	; 0x17d2 <main+0x80c>
					{
						ramping = 1 - (configClicks & 1);
    17c4:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    17c8:	81 70       	andi	r24, 0x01	; 1
    17ca:	85 25       	eor	r24, r5
    17cc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ramping>
						SaveConfig();
    17d0:	99 d6       	rcall	.+3378   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
					}
					ConfigBlink(2);
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	da c1       	rjmp	.+948    	; 0x1b8a <main+0xbc4>
					break;
					
				case 15:	// exiting config mode
					ConfigMode = 0;		// Exit Config mode
    17d6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <ConfigMode>
					Blink(5, 40);
    17da:	68 e2       	ldi	r22, 0x28	; 40
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	85 e0       	ldi	r24, 0x05	; 5
    17e0:	78 d5       	rcall	.+2800   	; 0x22d2 <__TEXT_REGION_LENGTH__+0x2d2>
					outLevel = rampingLevel = 0;
    17e2:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <rampingLevel>
    17e6:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <outLevel>
					modeIdx = 0;
    17ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <modeIdx>
					
					if (ramping)
    17ee:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
    17f2:	88 23       	and	r24, r24
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <main+0x832>
    17f6:	57 c2       	rjmp	.+1198   	; 0x1ca6 <main+0xce0>
						SetLevel(rampingLevel);
    17f8:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <rampingLevel>
    17fc:	3f d5       	rcall	.+2686   	; 0x227c <__TEXT_REGION_LENGTH__+0x27c>
    17fe:	53 c2       	rjmp	.+1190   	; 0x1ca6 <main+0xce0>
				//-------------------------------------------------------------------------
				//			Advanced Config Modes (from Battery Voltage Level display)
				//-------------------------------------------------------------------------
					
				case 21:	// Start Adv Config mode
					_delay_ms(400);
    1800:	80 e9       	ldi	r24, 0x90	; 144
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	ff d4       	rcall	.+2558   	; 0x2204 <__TEXT_REGION_LENGTH__+0x204>

					ConfigBlink(1);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	24 d6       	rcall	.+3144   	; 0x2452 <__TEXT_REGION_LENGTH__+0x452>
					++ConfigMode;
    180a:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <ConfigMode>
					configClicks = 0;
    1814:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <configClicks>
					break;
    1818:	46 c2       	rjmp	.+1164   	; 0x1ca6 <main+0xce0>
					
				case 23:	// 1 - (exiting) locator LED ON selection
					if (configClicks)
    181a:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    181e:	88 23       	and	r24, r24
    1820:	c1 f2       	breq	.-80     	; 0x17d2 <main+0x80c>
					{
						locatorLedOn = 1 - (configClicks & 1);
    1822:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	85 25       	eor	r24, r5
    182a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <locatorLedOn>
						locatorLed = locatorLedOn;
    182e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <locatorLedOn>
    1832:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <locatorLed>
    1836:	cc cf       	rjmp	.-104    	; 0x17d0 <main+0x80a>
					}
					ConfigBlink(2);
					break;
					
				case 24:	// 2 - (exiting) BVLD LED config selection
					if (configClicks)
    1838:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    183c:	88 23       	and	r24, r24
    183e:	39 f0       	breq	.+14     	; 0x184e <main+0x888>
					{
						bvldLedOnly = 1 - (configClicks & 1);
    1840:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1844:	81 70       	andi	r24, 0x01	; 1
    1846:	85 25       	eor	r24, r5
    1848:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <bvldLedOnly>
						SaveConfig();
    184c:	5b d6       	rcall	.+3254   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
					}
					ConfigBlink(3);
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	9c c1       	rjmp	.+824    	; 0x1b8a <main+0xbc4>
					break;
					
				case 25:	// 3 - (exiting) Indicator LED enable selection
					if (configClicks)
    1852:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1856:	88 23       	and	r24, r24
    1858:	09 f4       	brne	.+2      	; 0x185c <main+0x896>
    185a:	23 c2       	rjmp	.+1094   	; 0x1ca2 <main+0xcdc>
					{
						onboardLedEnable = 1 - (configClicks & 1);
    185c:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1860:	81 70       	andi	r24, 0x01	; 1
    1862:	85 25       	eor	r24, r5
    1864:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <onboardLedEnable>
    1868:	1b c2       	rjmp	.+1078   	; 0x1ca0 <main+0xcda>
					}
					ConfigMode = 15;			// all done, go to exit
					break;

				case 100:	// thermal calibration in effect
					Blink(3, 40);			// 3 quick blinks
    186a:	68 e2       	ldi	r22, 0x28	; 40
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	30 d5       	rcall	.+2656   	; 0x22d2 <__TEXT_REGION_LENGTH__+0x2d2>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    1872:	b8 bc       	out	0x28, r11	; 40
	ALT_PWM_LVL = pwm7135;
    1874:	19 bc       	out	0x29, r1	; 41
					break;

				case 100:	// thermal calibration in effect
					Blink(3, 40);			// 3 quick blinks
					SetOutput(255, 0);	// set max output
					wThermalTicks = 312;	// set for 5 seconds as the minimum time to set a new stepdown temperature
    1876:	f0 92 af 00 	sts	0x00AF, r15	; 0x8000af <wThermalTicks+0x1>
    187a:	e0 92 ae 00 	sts	0x00AE, r14	; 0x8000ae <wThermalTicks>
					break;
    187e:	13 c2       	rjmp	.+1062   	; 0x1ca6 <main+0xce0>
* SetOutput - sets the PWM output values directly for the two channels
* =========
**************************************************************************************/
void SetOutput(byte pwmFet, byte pwm7135)
{
	PWM_LVL = pwmFet;
    1880:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm7135;
    1882:	19 bc       	out	0x29, r1	; 41
					break;

				case 101:	// exiting thermal calibration
					SetOutput(0,0);
				
					if (wThermalTicks == 0)	// min. time exceeded
    1884:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <wThermalTicks>
    1888:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <wThermalTicks+0x1>
    188c:	89 2b       	or	r24, r25
    188e:	11 f5       	brne	.+68     	; 0x18d4 <main+0x90e>
					{
						// Save the current temperature to use as the threshold to step down output
						byStepdownTemp = byTempReading;
    1890:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <byTempReading>
    1894:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <byStepdownTemp>
						WrEEPROM (250, byStepdownTemp);
    1898:	8a ef       	ldi	r24, 0xFA	; 250
    189a:	2b d6       	rcall	.+3158   	; 0x24f2 <__TEXT_REGION_LENGTH__+0x4f2>
    189c:	1b c0       	rjmp	.+54     	; 0x18d4 <main+0x90e>

				case 40:		// timed stepdown calibration in effect (do nothing here)
					break;

				case 41:	// (exiting) timed stepdown
					if ((configClicks > 0) && (configClicks <= 6))
    189e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    18a2:	88 23       	and	r24, r24
    18a4:	b9 f0       	breq	.+46     	; 0x18d4 <main+0x90e>
    18a6:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    18aa:	87 30       	cpi	r24, 0x07	; 7
    18ac:	98 f4       	brcc	.+38     	; 0x18d4 <main+0x90e>
					{
						stepdownMode = configClicks + 1;
    18ae:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <stepdownMode>
						SaveConfig();
    18b8:	25 d6       	rcall	.+3146   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
						
						// Set the updated timed stepdown tick (16 msecs) limit
						wTimedStepdownTickLimit = pgm_read_word(timedStepdownOutVals+stepdownMode);
    18ba:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <stepdownMode>
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	e4 5d       	subi	r30, 0xD4	; 212
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	85 91       	lpm	r24, Z+
    18ca:	94 91       	lpm	r25, Z
    18cc:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <wTimedStepdownTickLimit+0x1>
    18d0:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <wTimedStepdownTickLimit>
					}

					if (ramping)
    18d4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
    18d8:	88 23       	and	r24, r24
    18da:	21 f0       	breq	.+8      	; 0x18e4 <main+0x91e>
					{
						ConfigBlink(4);
    18dc:	84 e0       	ldi	r24, 0x04	; 4
    18de:	b9 d5       	rcall	.+2930   	; 0x2452 <__TEXT_REGION_LENGTH__+0x452>
						prevConfigMode = ConfigMode = 5;
    18e0:	85 e0       	ldi	r24, 0x05	; 5
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <main+0x924>
					}
					else
					{
						ConfigBlink(8);
    18e4:	88 e0       	ldi	r24, 0x08	; 8
    18e6:	b5 d5       	rcall	.+2922   	; 0x2452 <__TEXT_REGION_LENGTH__+0x452>
						prevConfigMode = ConfigMode = 9;
    18e8:	89 e0       	ldi	r24, 0x09	; 9
    18ea:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <ConfigMode>
    18ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <prevConfigMode>
    18f2:	d9 c1       	rjmp	.+946    	; 0x1ca6 <main+0xce0>
					}
					break;
				
				default:
					if (ramping)
    18f4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ramping>
    18f8:	88 23       	and	r24, r24
    18fa:	09 f4       	brne	.+2      	; 0x18fe <main+0x938>
    18fc:	7f c0       	rjmp	.+254    	; 0x19fc <main+0xa36>
					{
						//---------------------------------------------------------------------
						// Ramping Configuration Settings
						//---------------------------------------------------------------------
						switch (ConfigMode)
    18fe:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
    1902:	85 30       	cpi	r24, 0x05	; 5
    1904:	09 f4       	brne	.+2      	; 0x1908 <main+0x942>
    1906:	5e c0       	rjmp	.+188    	; 0x19c4 <main+0x9fe>
    1908:	86 30       	cpi	r24, 0x06	; 6
    190a:	09 f4       	brne	.+2      	; 0x190e <main+0x948>
    190c:	74 c0       	rjmp	.+232    	; 0x19f6 <main+0xa30>
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	09 f0       	breq	.+2      	; 0x1914 <main+0x94e>
    1912:	c9 c1       	rjmp	.+914    	; 0x1ca6 <main+0xce0>
						{
						case 4:	// 2 - (exiting) moonlight level selection
							if ((configClicks > 0) && (configClicks <= 7))
    1914:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1918:	88 23       	and	r24, r24
    191a:	09 f4       	brne	.+2      	; 0x191e <main+0x958>
    191c:	98 cf       	rjmp	.-208    	; 0x184e <main+0x888>
    191e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1922:	88 30       	cpi	r24, 0x08	; 8
    1924:	08 f0       	brcs	.+2      	; 0x1928 <main+0x962>
    1926:	93 cf       	rjmp	.-218    	; 0x184e <main+0x888>
							{
								moonlightLevel = configClicks;
    1928:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    192c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <moonlightLevel>
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
    1930:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	e4 5c       	subi	r30, 0xC4	; 196
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	a4 91       	lpm	r26, Z
    193c:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <modesCnt>

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
    1940:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <bySecModes>
    1944:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <byPrimModes>

	if (moonLightEnable)
    1948:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <moonLightEnable>
    194c:	88 23       	and	r24, r24
    194e:	41 f0       	breq	.+16     	; 0x1960 <main+0x99a>
	{
		offset = 2;
		byPrimModes[1] = 0;
    1950:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <byPrimModes+0x1>
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
    1954:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <moonlightLevel>
    1958:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <bySecModes+0x1>
	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;

	if (moonLightEnable)
	{
		offset = 2;
    195c:	b2 e0       	ldi	r27, 0x02	; 2
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <main+0x99c>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
    1960:	b1 e0       	ldi	r27, 0x01	; 1
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	4a 2f       	mov	r20, r26
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	6b 2f       	mov	r22, r27
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	84 17       	cp	r24, r20
    1970:	95 07       	cpc	r25, r21
    1972:	0c f0       	brlt	.+2      	; 0x1976 <main+0x9b0>
    1974:	a8 c0       	rjmp	.+336    	; 0x1ac6 <main+0xb00>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
    1976:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	eb 57       	subi	r30, 0x7B	; 123
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	01 90       	ld	r0, Z+
    1986:	f0 81       	ld	r31, Z
    1988:	e0 2d       	mov	r30, r0
    198a:	e8 0f       	add	r30, r24
    198c:	f9 1f       	adc	r31, r25
    198e:	74 90       	lpm	r7, Z
    1990:	9c 01       	movw	r18, r24
    1992:	26 0f       	add	r18, r22
    1994:	37 1f       	adc	r19, r23
    1996:	f9 01       	movw	r30, r18
    1998:	e0 52       	subi	r30, 0x20	; 32
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	70 82       	st	Z, r7
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
    199e:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	ee 0f       	add	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	e3 59       	subi	r30, 0x93	; 147
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	01 90       	ld	r0, Z+
    19ae:	f0 81       	ld	r31, Z
    19b0:	e0 2d       	mov	r30, r0
    19b2:	e8 0f       	add	r30, r24
    19b4:	f9 1f       	adc	r31, r25
    19b6:	74 90       	lpm	r7, Z
    19b8:	2f 52       	subi	r18, 0x2F	; 47
    19ba:	3f 4f       	sbci	r19, 0xFF	; 255
    19bc:	f9 01       	movw	r30, r18
    19be:	70 82       	st	Z, r7
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	d5 cf       	rjmp	.-86     	; 0x196e <main+0x9a8>
							}
							ConfigBlink(3);
							break;

						case 5:	// 3 - (exiting) stepdown setting
							if (configClicks == 1)			// disable it
    19c4:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	19 f4       	brne	.+6      	; 0x19d2 <main+0xa0c>
							{
								stepdownMode = 0;
    19cc:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <stepdownMode>
    19d0:	d0 c0       	rjmp	.+416    	; 0x1b72 <main+0xbac>
								SaveConfig();
								ConfigBlink(4);
							}
							else if (configClicks == 2)	// thermal stepdown
    19d2:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	19 f4       	brne	.+6      	; 0x19e0 <main+0xa1a>
							{
								stepdownMode = 1;
    19da:	50 92 69 00 	sts	0x0069, r5	; 0x800069 <stepdownMode>
    19de:	4a c1       	rjmp	.+660    	; 0x1c74 <main+0xcae>
								SaveConfig();
								ConfigMode = 100;		// thermal configuration in effect!!
							}
							else if (configClicks == 3)   // timed stepdown
    19e0:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    19e4:	83 30       	cpi	r24, 0x03	; 3
    19e6:	29 f4       	brne	.+10     	; 0x19f2 <main+0xa2c>
							{
									Blink(3, 40);			// 3 quick blinks
    19e8:	68 e2       	ldi	r22, 0x28	; 40
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	4b c1       	rjmp	.+662    	; 0x1c84 <main+0xcbe>
							}
							ConfigBlink(3);
							break;
							
						case 5:	// 3 - (exiting) moonlight enabling
							if (configClicks)
    19ee:	81 11       	cpse	r24, r1
    19f0:	6e c0       	rjmp	.+220    	; 0x1ace <main+0xb08>
							{
									Blink(3, 40);			// 3 quick blinks
									ConfigMode = 40;
							}
							else
								ConfigBlink(4);
    19f2:	84 e0       	ldi	r24, 0x04	; 4
    19f4:	ca c0       	rjmp	.+404    	; 0x1b8a <main+0xbc4>
							break;
							
						case 6:	// 4 - (exiting) blinky mode setting (0=disable, 1=strobe only, 2=all blinkies)
							if ((configClicks > 0) && (configClicks <= 3))
    19f6:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    19fa:	47 c1       	rjmp	.+654    	; 0x1c8a <main+0xcc4>
					else
					{					
						//---------------------------------------------------------------------
						// Mode Set Configuration Settings
						//---------------------------------------------------------------------
						switch (ConfigMode)	
    19fc:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <ConfigMode>
    1a00:	8e 2f       	mov	r24, r30
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	fc 01       	movw	r30, r24
    1a06:	34 97       	sbiw	r30, 0x04	; 4
    1a08:	e7 30       	cpi	r30, 0x07	; 7
    1a0a:	f1 05       	cpc	r31, r1
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <main+0xa4a>
    1a0e:	4b c1       	rjmp	.+662    	; 0x1ca6 <main+0xce0>
    1a10:	e1 5f       	subi	r30, 0xF1	; 241
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
								ConfigMode = 40;
							}
							break;
						
						case 10:	// 8 - (exiting) blinky mode setting (0=disable, 1=strobe only, 2=all blinkies)
							if ((configClicks > 0) && (configClicks <= 3))
    1a14:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
					else
					{					
						//---------------------------------------------------------------------
						// Mode Set Configuration Settings
						//---------------------------------------------------------------------
						switch (ConfigMode)	
    1a18:	09 94       	ijmp
						{
						case 4:	// 2 - (exiting) mode set selection
							if ((configClicks > 0) && (configClicks <= 12))
    1a1a:	88 23       	and	r24, r24
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <main+0xa5a>
    1a1e:	17 cf       	rjmp	.-466    	; 0x184e <main+0x888>
    1a20:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1a24:	8d 30       	cpi	r24, 0x0D	; 13
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <main+0xa64>
    1a28:	12 cf       	rjmp	.-476    	; 0x184e <main+0x888>
							{
								modeSetIdx = configClicks - 1;
    1a2a:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1a2e:	81 50       	subi	r24, 0x01	; 1
    1a30:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <modeSetIdx>
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
    1a34:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	e4 5c       	subi	r30, 0xC4	; 196
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	a4 91       	lpm	r26, Z
    1a40:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <modesCnt>

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
    1a44:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <bySecModes>
    1a48:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <byPrimModes>

	if (moonLightEnable)
    1a4c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <moonLightEnable>
    1a50:	88 23       	and	r24, r24
    1a52:	41 f0       	breq	.+16     	; 0x1a64 <main+0xa9e>
	{
		offset = 2;
		byPrimModes[1] = 0;
    1a54:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <byPrimModes+0x1>
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
    1a58:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <moonlightLevel>
    1a5c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <bySecModes+0x1>
	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;

	if (moonLightEnable)
	{
		offset = 2;
    1a60:	b2 e0       	ldi	r27, 0x02	; 2
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <main+0xaa0>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
    1a64:	b1 e0       	ldi	r27, 0x01	; 1
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	4a 2f       	mov	r20, r26
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	6b 2f       	mov	r22, r27
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	84 17       	cp	r24, r20
    1a74:	95 07       	cpc	r25, r21
    1a76:	3c f5       	brge	.+78     	; 0x1ac6 <main+0xb00>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
    1a78:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	eb 57       	subi	r30, 0x7B	; 123
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	01 90       	ld	r0, Z+
    1a88:	f0 81       	ld	r31, Z
    1a8a:	e0 2d       	mov	r30, r0
    1a8c:	e8 0f       	add	r30, r24
    1a8e:	f9 1f       	adc	r31, r25
    1a90:	74 90       	lpm	r7, Z
    1a92:	9c 01       	movw	r18, r24
    1a94:	26 0f       	add	r18, r22
    1a96:	37 1f       	adc	r19, r23
    1a98:	f9 01       	movw	r30, r18
    1a9a:	e0 52       	subi	r30, 0x20	; 32
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	70 82       	st	Z, r7
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
    1aa0:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	e3 59       	subi	r30, 0x93	; 147
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	01 90       	ld	r0, Z+
    1ab0:	f0 81       	ld	r31, Z
    1ab2:	e0 2d       	mov	r30, r0
    1ab4:	e8 0f       	add	r30, r24
    1ab6:	f9 1f       	adc	r31, r25
    1ab8:	74 90       	lpm	r7, Z
    1aba:	2f 52       	subi	r18, 0x2F	; 47
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
    1abe:	f9 01       	movw	r30, r18
    1ac0:	70 82       	st	Z, r7
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	d6 cf       	rjmp	.-84     	; 0x1a72 <main+0xaac>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
	}

	modesCnt += offset;		// adjust to total mode count
    1ac6:	ab 0f       	add	r26, r27
    1ac8:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <modesCnt>
    1acc:	bf ce       	rjmp	.-642    	; 0x184c <main+0x886>
							break;
							
						case 5:	// 3 - (exiting) moonlight enabling
							if (configClicks)
							{
								moonLightEnable = 1 - (configClicks & 1);
    1ace:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1ad2:	81 70       	andi	r24, 0x01	; 1
    1ad4:	85 25       	eor	r24, r5
    1ad6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <moonLightEnable>
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
    1ada:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	e4 5c       	subi	r30, 0xC4	; 196
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	a4 91       	lpm	r26, Z
    1ae6:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <modesCnt>

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
    1aea:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <bySecModes>
    1aee:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <byPrimModes>

	if (moonLightEnable)
    1af2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <moonLightEnable>
    1af6:	88 23       	and	r24, r24
    1af8:	41 f0       	breq	.+16     	; 0x1b0a <main+0xb44>
	{
		offset = 2;
		byPrimModes[1] = 0;
    1afa:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <byPrimModes+0x1>
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
    1afe:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <moonlightLevel>
    1b02:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <bySecModes+0x1>
	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;

	if (moonLightEnable)
	{
		offset = 2;
    1b06:	b2 e0       	ldi	r27, 0x02	; 2
    1b08:	01 c0       	rjmp	.+2      	; 0x1b0c <main+0xb46>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
    1b0a:	b1 e0       	ldi	r27, 0x01	; 1
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	4a 2f       	mov	r20, r26
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	6b 2f       	mov	r22, r27
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	84 17       	cp	r24, r20
    1b1a:	95 07       	cpc	r25, r21
    1b1c:	3c f5       	brge	.+78     	; 0x1b6c <main+0xba6>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
    1b1e:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	eb 57       	subi	r30, 0x7B	; 123
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	01 90       	ld	r0, Z+
    1b2e:	f0 81       	ld	r31, Z
    1b30:	e0 2d       	mov	r30, r0
    1b32:	e8 0f       	add	r30, r24
    1b34:	f9 1f       	adc	r31, r25
    1b36:	74 90       	lpm	r7, Z
    1b38:	9c 01       	movw	r18, r24
    1b3a:	26 0f       	add	r18, r22
    1b3c:	37 1f       	adc	r19, r23
    1b3e:	f9 01       	movw	r30, r18
    1b40:	e0 52       	subi	r30, 0x20	; 32
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	70 82       	st	Z, r7
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
    1b46:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	e3 59       	subi	r30, 0x93	; 147
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	01 90       	ld	r0, Z+
    1b56:	f0 81       	ld	r31, Z
    1b58:	e0 2d       	mov	r30, r0
    1b5a:	e8 0f       	add	r30, r24
    1b5c:	f9 1f       	adc	r31, r25
    1b5e:	74 90       	lpm	r7, Z
    1b60:	2f 52       	subi	r18, 0x2F	; 47
    1b62:	3f 4f       	sbci	r19, 0xFF	; 255
    1b64:	f9 01       	movw	r30, r18
    1b66:	70 82       	st	Z, r7
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	d6 cf       	rjmp	.-84     	; 0x1b18 <main+0xb52>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
	}

	modesCnt += offset;		// adjust to total mode count
    1b6c:	ab 0f       	add	r26, r27
    1b6e:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <modesCnt>
						case 5:	// 3 - (exiting) moonlight enabling
							if (configClicks)
							{
								moonLightEnable = 1 - (configClicks & 1);
								DefineModeSet();
								SaveConfig();
    1b72:	c8 d4       	rcall	.+2448   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
    1b74:	3e cf       	rjmp	.-388    	; 0x19f2 <main+0xa2c>
							}
							ConfigBlink(4);
							break;

						case 6:	// 4 - (exiting) mode order setting
							if (configClicks)
    1b76:	88 23       	and	r24, r24
    1b78:	39 f0       	breq	.+14     	; 0x1b88 <main+0xbc2>
							{
								highToLow = 1 - (configClicks & 1);
    1b7a:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1b7e:	81 70       	andi	r24, 0x01	; 1
    1b80:	85 25       	eor	r24, r5
    1b82:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <highToLow>
								SaveConfig();
    1b86:	be d4       	rcall	.+2428   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
							}
							ConfigBlink(5);
    1b88:	85 e0       	ldi	r24, 0x05	; 5
    1b8a:	63 d4       	rcall	.+2246   	; 0x2452 <__TEXT_REGION_LENGTH__+0x452>
							break;
    1b8c:	8c c0       	rjmp	.+280    	; 0x1ca6 <main+0xce0>

						case 7:	// 5 - (exiting) mode memory setting
							if (configClicks)
    1b8e:	88 23       	and	r24, r24
    1b90:	39 f0       	breq	.+14     	; 0x1ba0 <main+0xbda>
							{
								modeMemoryEnabled = 1 - (configClicks & 1);
    1b92:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1b96:	81 70       	andi	r24, 0x01	; 1
    1b98:	85 25       	eor	r24, r5
    1b9a:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <modeMemoryEnabled>
								SaveConfig();
    1b9e:	b2 d4       	rcall	.+2404   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
							}
							ConfigBlink(6);
    1ba0:	86 e0       	ldi	r24, 0x06	; 6
    1ba2:	f3 cf       	rjmp	.-26     	; 0x1b8a <main+0xbc4>
							break;

						case 8:	// 6 - (exiting) moonlight level selection
							if ((configClicks > 0) && (configClicks <= 7))
    1ba4:	88 23       	and	r24, r24
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <main+0xbe4>
    1ba8:	56 c0       	rjmp	.+172    	; 0x1c56 <main+0xc90>
    1baa:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1bae:	88 30       	cpi	r24, 0x08	; 8
    1bb0:	08 f0       	brcs	.+2      	; 0x1bb4 <main+0xbee>
    1bb2:	51 c0       	rjmp	.+162    	; 0x1c56 <main+0xc90>
							{
								moonlightLevel = configClicks;
    1bb4:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1bb8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <moonlightLevel>
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
    1bbc:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	e4 5c       	subi	r30, 0xC4	; 196
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	a4 91       	lpm	r26, Z
    1bc8:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <modesCnt>

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
    1bcc:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <bySecModes>
    1bd0:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <byPrimModes>

	if (moonLightEnable)
    1bd4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <moonLightEnable>
    1bd8:	88 23       	and	r24, r24
    1bda:	41 f0       	breq	.+16     	; 0x1bec <main+0xc26>
	{
		offset = 2;
		byPrimModes[1] = 0;
    1bdc:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <byPrimModes+0x1>
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
    1be0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <moonlightLevel>
    1be4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <bySecModes+0x1>
	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;

	if (moonLightEnable)
	{
		offset = 2;
    1be8:	b2 e0       	ldi	r27, 0x02	; 2
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <main+0xc28>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
    1bec:	b1 e0       	ldi	r27, 0x01	; 1
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	4a 2f       	mov	r20, r26
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	6b 2f       	mov	r22, r27
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	84 17       	cp	r24, r20
    1bfc:	95 07       	cpc	r25, r21
    1bfe:	3c f5       	brge	.+78     	; 0x1c4e <main+0xc88>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
    1c00:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	eb 57       	subi	r30, 0x7B	; 123
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	01 90       	ld	r0, Z+
    1c10:	f0 81       	ld	r31, Z
    1c12:	e0 2d       	mov	r30, r0
    1c14:	e8 0f       	add	r30, r24
    1c16:	f9 1f       	adc	r31, r25
    1c18:	74 90       	lpm	r7, Z
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	26 0f       	add	r18, r22
    1c1e:	37 1f       	adc	r19, r23
    1c20:	f9 01       	movw	r30, r18
    1c22:	e0 52       	subi	r30, 0x20	; 32
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	70 82       	st	Z, r7
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
    1c28:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <modeSetIdx>
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	ee 0f       	add	r30, r30
    1c30:	ff 1f       	adc	r31, r31
    1c32:	e3 59       	subi	r30, 0x93	; 147
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	01 90       	ld	r0, Z+
    1c38:	f0 81       	ld	r31, Z
    1c3a:	e0 2d       	mov	r30, r0
    1c3c:	e8 0f       	add	r30, r24
    1c3e:	f9 1f       	adc	r31, r25
    1c40:	74 90       	lpm	r7, Z
    1c42:	2f 52       	subi	r18, 0x2F	; 47
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	f9 01       	movw	r30, r18
    1c48:	70 82       	st	Z, r7
		byPrimModes[1] = 0;
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	d6 cf       	rjmp	.-84     	; 0x1bfa <main+0xc34>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
	}

	modesCnt += offset;		// adjust to total mode count
    1c4e:	ab 0f       	add	r26, r27
    1c50:	a0 93 dd 00 	sts	0x00DD, r26	; 0x8000dd <modesCnt>
						case 8:	// 6 - (exiting) moonlight level selection
							if ((configClicks > 0) && (configClicks <= 7))
							{
								moonlightLevel = configClicks;
								DefineModeSet();
								SaveConfig();
    1c54:	57 d4       	rcall	.+2222   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
							}
							ConfigBlink(7);
    1c56:	87 e0       	ldi	r24, 0x07	; 7
    1c58:	98 cf       	rjmp	.-208    	; 0x1b8a <main+0xbc4>
							break;

						case 9:	// 7 - (exiting) stepdown setting
							if (configClicks == 0)			// disable it
    1c5a:	81 11       	cpse	r24, r1
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <main+0xca2>
							{
								stepdownMode = 0;
    1c5e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <stepdownMode>
								SaveConfig();
    1c62:	50 d4       	rcall	.+2208   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
								ConfigBlink(8);
    1c64:	88 e0       	ldi	r24, 0x08	; 8
    1c66:	91 cf       	rjmp	.-222    	; 0x1b8a <main+0xbc4>
							}
							else if (configClicks == 1)	// thermal stepdown
    1c68:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	39 f4       	brne	.+14     	; 0x1c7e <main+0xcb8>
							{
								stepdownMode = 1;
    1c70:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <stepdownMode>
								SaveConfig();
    1c74:	47 d4       	rcall	.+2190   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
								ConfigMode = 100;		// thermal configuration in effect!!
    1c76:	84 e6       	ldi	r24, 0x64	; 100
    1c78:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <ConfigMode>
    1c7c:	14 c0       	rjmp	.+40     	; 0x1ca6 <main+0xce0>
							}
							else                          // timed stepdown
							{
								Blink(3, 40);			// 3 quick blinks
    1c7e:	68 e2       	ldi	r22, 0x28	; 40
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	83 e0       	ldi	r24, 0x03	; 3
    1c84:	26 d3       	rcall	.+1612   	; 0x22d2 <__TEXT_REGION_LENGTH__+0x2d2>
								ConfigMode = 40;
    1c86:	88 e2       	ldi	r24, 0x28	; 40
    1c88:	f7 cf       	rjmp	.-18     	; 0x1c78 <main+0xcb2>
							}
							break;
						
						case 10:	// 8 - (exiting) blinky mode setting (0=disable, 1=strobe only, 2=all blinkies)
							if ((configClicks > 0) && (configClicks <= 3))
    1c8a:	88 23       	and	r24, r24
    1c8c:	51 f0       	breq	.+20     	; 0x1ca2 <main+0xcdc>
    1c8e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1c92:	84 30       	cpi	r24, 0x04	; 4
    1c94:	30 f4       	brcc	.+12     	; 0x1ca2 <main+0xcdc>
							{
								blinkyMode = configClicks - 1;
    1c96:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1c9a:	81 50       	subi	r24, 0x01	; 1
    1c9c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <blinkyMode>
								SaveConfig();
    1ca0:	31 d4       	rcall	.+2146   	; 0x2504 <__TEXT_REGION_LENGTH__+0x504>
							}
							ConfigMode = 15;			// all done, go to exit
    1ca2:	40 92 c5 00 	sts	0x00C5, r4	; 0x8000c5 <ConfigMode>
						}
					}
					break;	
				} // switch ConfigMode
				
				configClicks = 0;
    1ca6:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <configClicks>
    1caa:	bf ca       	rjmp	.-2690   	; 0x122a <main+0x264>

			} // ConfigMode changed

			else if (
					((configClicks > 0) && (configIdleTime > 62))		// least 1 click: 1 second wait is enough
    1cac:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
				
				configClicks = 0;

			} // ConfigMode changed

			else if (
    1cb0:	88 23       	and	r24, r24
    1cb2:	21 f0       	breq	.+8      	; 0x1cbc <main+0xcf6>
					((configClicks > 0) && (configIdleTime > 62))		// least 1 click: 1 second wait is enough
    1cb4:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <configIdleTime>
    1cb8:	8f 33       	cpi	r24, 0x3F	; 63
    1cba:	70 f4       	brcc	.+28     	; 0x1cd8 <main+0xd12>
												||
					((ConfigMode != 100) && (configClicks == 0) && (configIdleTime > 200)))	// no clicks: 3.2 secs (make it a little quicker, was 4 secs)
    1cbc:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>

			} // ConfigMode changed

			else if (
					((configClicks > 0) && (configIdleTime > 62))		// least 1 click: 1 second wait is enough
												||
    1cc0:	84 36       	cpi	r24, 0x64	; 100
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <main+0xd00>
    1cc4:	b2 ca       	rjmp	.-2716   	; 0x122a <main+0x264>
					((ConfigMode != 100) && (configClicks == 0) && (configIdleTime > 200)))	// no clicks: 3.2 secs (make it a little quicker, was 4 secs)
    1cc6:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <configClicks>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	ae ca       	rjmp	.-2724   	; 0x122a <main+0x264>
    1cce:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <configIdleTime>
    1cd2:	89 3c       	cpi	r24, 0xC9	; 201
    1cd4:	08 f4       	brcc	.+2      	; 0x1cd8 <main+0xd12>
    1cd6:	a9 ca       	rjmp	.-2734   	; 0x122a <main+0x264>
			{
				++ConfigMode;
    1cd8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <ConfigMode>
    1cdc:	8f 5f       	subi	r24, 0xFF	; 255
    1cde:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <ConfigMode>
    1ce2:	a3 ca       	rjmp	.-2746   	; 0x122a <main+0x264>
		bvldLedOnly = (config3 >> 3) & 1;
		moonLightEnable = (config3 >> 4) & 1;
		blinkyMode = (config3 >> 5) & 0x03;
	}
	else
		eepos = 0;
    1ce4:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <eepos+0x1>
    1ce8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <eepos>
    1cec:	fd c9       	rjmp	.-3078   	; 0x10e8 <main+0x122>

00001cee <__udivmodqi4>:
    1cee:	99 1b       	sub	r25, r25
    1cf0:	79 e0       	ldi	r23, 0x09	; 9
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <__udivmodqi4_ep>

00001cf4 <__udivmodqi4_loop>:
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	96 17       	cp	r25, r22
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <__udivmodqi4_ep>
    1cfa:	96 1b       	sub	r25, r22

00001cfc <__udivmodqi4_ep>:
    1cfc:	88 1f       	adc	r24, r24
    1cfe:	7a 95       	dec	r23
    1d00:	c9 f7       	brne	.-14     	; 0x1cf4 <__udivmodqi4_loop>
    1d02:	80 95       	com	r24
    1d04:	08 95       	ret

00001d06 <__udivmodhi4>:
    1d06:	aa 1b       	sub	r26, r26
    1d08:	bb 1b       	sub	r27, r27
    1d0a:	51 e1       	ldi	r21, 0x11	; 17
    1d0c:	07 c0       	rjmp	.+14     	; 0x1d1c <__udivmodhi4_ep>

00001d0e <__udivmodhi4_loop>:
    1d0e:	aa 1f       	adc	r26, r26
    1d10:	bb 1f       	adc	r27, r27
    1d12:	a6 17       	cp	r26, r22
    1d14:	b7 07       	cpc	r27, r23
    1d16:	10 f0       	brcs	.+4      	; 0x1d1c <__udivmodhi4_ep>
    1d18:	a6 1b       	sub	r26, r22
    1d1a:	b7 0b       	sbc	r27, r23

00001d1c <__udivmodhi4_ep>:
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	5a 95       	dec	r21
    1d22:	a9 f7       	brne	.-22     	; 0x1d0e <__udivmodhi4_loop>
    1d24:	80 95       	com	r24
    1d26:	90 95       	com	r25
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	08 95       	ret

00001d2e <__divmodhi4>:
    1d2e:	97 fb       	bst	r25, 7
    1d30:	07 2e       	mov	r0, r23
    1d32:	16 f4       	brtc	.+4      	; 0x1d38 <__divmodhi4+0xa>
    1d34:	00 94       	com	r0
    1d36:	06 d0       	rcall	.+12     	; 0x1d44 <__divmodhi4_neg1>
    1d38:	77 fd       	sbrc	r23, 7
    1d3a:	08 d0       	rcall	.+16     	; 0x1d4c <__divmodhi4_neg2>
    1d3c:	e4 df       	rcall	.-56     	; 0x1d06 <__udivmodhi4>
    1d3e:	07 fc       	sbrc	r0, 7
    1d40:	05 d0       	rcall	.+10     	; 0x1d4c <__divmodhi4_neg2>
    1d42:	3e f4       	brtc	.+14     	; 0x1d52 <__divmodhi4_exit>

00001d44 <__divmodhi4_neg1>:
    1d44:	90 95       	com	r25
    1d46:	81 95       	neg	r24
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	08 95       	ret

00001d4c <__divmodhi4_neg2>:
    1d4c:	70 95       	com	r23
    1d4e:	61 95       	neg	r22
    1d50:	7f 4f       	sbci	r23, 0xFF	; 255

00001d52 <__divmodhi4_exit>:
    1d52:	08 95       	ret

00001d54 <eeprom_read_byte>:
    1d54:	e1 99       	sbic	0x1c, 1	; 28
    1d56:	fe cf       	rjmp	.-4      	; 0x1d54 <eeprom_read_byte>
    1d58:	9f bb       	out	0x1f, r25	; 31
    1d5a:	8e bb       	out	0x1e, r24	; 30
    1d5c:	e0 9a       	sbi	0x1c, 0	; 28
    1d5e:	99 27       	eor	r25, r25
    1d60:	8d b3       	in	r24, 0x1d	; 29
    1d62:	08 95       	ret

00001d64 <_exit>:
    1d64:	f8 94       	cli

00001d66 <__stop_program>:
    1d66:	ff cf       	rjmp	.-2      	; 0x1d66 <__stop_program>
