
Narsil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  000010c0  00001154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080009e  0080009e  00001192  2**0
                  ALLOC
  3 .noinit       00000001  008000d7  008000d7  00001192  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001192  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001906  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039e  00000000  00000000  00002bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000666  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000035b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006a4  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d71  00000000  00000000  00003e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000128  00000000  00000000  00004b89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	76 c0       	rjmp	.+236    	; 0xee <__ctors_end>
       2:	90 c0       	rjmp	.+288    	; 0x124 <__bad_interrupt>
       4:	53 c1       	rjmp	.+678    	; 0x2ac <__vector_2>
       6:	8e c0       	rjmp	.+284    	; 0x124 <__bad_interrupt>
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	8c c0       	rjmp	.+280    	; 0x124 <__bad_interrupt>
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	8a c0       	rjmp	.+276    	; 0x124 <__bad_interrupt>
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	88 c0       	rjmp	.+272    	; 0x124 <__bad_interrupt>
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	86 c0       	rjmp	.+268    	; 0x124 <__bad_interrupt>
      18:	e6 c1       	rjmp	.+972    	; 0x3e6 <__vector_12>
      1a:	84 c0       	rjmp	.+264    	; 0x124 <__bad_interrupt>
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	9c c7       	rjmp	.+3896   	; 0xf58 <main+0x75a>
      20:	32 c8       	rjmp	.-3996   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      22:	a1 c6       	rjmp	.+3394   	; 0xd66 <main+0x568>
      24:	00 c7       	rjmp	.+3584   	; 0xe26 <main+0x628>
      26:	58 c7       	rjmp	.+3760   	; 0xed8 <main+0x6da>
      28:	64 c7       	rjmp	.+3784   	; 0xef2 <main+0x6f4>
      2a:	70 c7       	rjmp	.+3808   	; 0xf0c <main+0x70e>
      2c:	8c c7       	rjmp	.+3864   	; 0xf46 <main+0x748>
      2e:	2b c8       	rjmp	.-4010   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      30:	2a c8       	rjmp	.-4012   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      32:	29 c8       	rjmp	.-4014   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      34:	28 c8       	rjmp	.-4016   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      36:	27 c8       	rjmp	.-4018   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      38:	26 c8       	rjmp	.-4020   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      3a:	25 c8       	rjmp	.-4022   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      3c:	24 c8       	rjmp	.-4024   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      3e:	23 c8       	rjmp	.-4026   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      40:	22 c8       	rjmp	.-4028   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      42:	21 c8       	rjmp	.-4030   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      44:	20 c8       	rjmp	.-4032   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      46:	88 c7       	rjmp	.+3856   	; 0xf58 <main+0x75a>
      48:	1e c8       	rjmp	.-4036   	; 0xfffff086 <__eeprom_end+0xff7ef086>
      4a:	93 c7       	rjmp	.+3878   	; 0xf72 <main+0x774>
      4c:	a0 c7       	rjmp	.+3904   	; 0xf8e <main+0x790>
      4e:	f6 c7       	rjmp	.+4076   	; 0x103c <main+0x83e>
      50:	01 c8       	rjmp	.-4094   	; 0xfffff054 <__eeprom_end+0xff7ef054>
      52:	0c c8       	rjmp	.-4072   	; 0xfffff06c <__eeprom_end+0xff7ef06c>

00000054 <__trampolines_end>:
      54:	68 45       	sbci	r22, 0x58	; 88
      56:	6c 46       	sbci	r22, 0x6C	; 108
      58:	70 47       	sbci	r23, 0x70	; 112
      5a:	75 48       	sbci	r23, 0x85	; 133
      5c:	78 49       	sbci	r23, 0x98	; 152
      5e:	7c 60       	ori	r23, 0x0C	; 12
      60:	80 61       	ori	r24, 0x10	; 16
      62:	84 62       	ori	r24, 0x24	; 36
      64:	88 63       	ori	r24, 0x38	; 56
      66:	8d 64       	ori	r24, 0x4D	; 77
      68:	92 65       	ori	r25, 0x52	; 82
      6a:	96 66       	ori	r25, 0x66	; 102
      6c:	9a 67       	ori	r25, 0x7A	; 122
      6e:	9f 68       	ori	r25, 0x8F	; 143
      70:	a3 69       	ori	r26, 0x93	; 147
      72:	a7 80       	ldd	r10, Z+7	; 0x07
      74:	ab 81       	ldd	r26, Y+3	; 0x03
      76:	af 82       	std	Y+7, r10	; 0x07
      78:	b4 83       	std	Z+4, r27	; 0x04
      7a:	b8 84       	ldd	r11, Y+8	; 0x08
      7c:	ff 21       	and	r31, r15

0000007e <turboTimeOutVals>:
      7e:	00 00 53 07 a6 0e f9 15 4c 1d f2 2b 3e 49 7c 92     ..S.....L..+>I|.

0000008e <modeSetCnts>:
      8e:	01 02 03 04 05 06 07 03                             ........

00000096 <mode7135Set12>:
      96:	14 e6 ff 00                                         ....

0000009a <modeFetSet12>:
      9a:	00 00 5a ff                                         ..Z.

0000009e <mode7135Set11>:
      9e:	ff ff 00                                            ...

000000a1 <modeFetSet11>:
      a1:	00 6e ff                                            .n.

000000a4 <mode7135Set10>:
      a4:	ff ff 00                                            ...

000000a7 <modeFetSet10>:
      a7:	00 46 ff                                            .F.

000000aa <mode7135Set9>:
      aa:	1e ff 00                                            ...

000000ad <modeFetSet9>:
      ad:	00 50 ff                                            .P.

000000b0 <mode7135Set8>:
      b0:	1e ff 00                                            ...

000000b3 <modeFetSet8>:
      b3:	00 19 ff                                            ...

000000b6 <mode7135Set7>:
      b6:	18 3f 96 ff ff ff 00                                .?.....

000000bd <modeFetSet7>:
      bd:	00 00 00 00 46 8c ff                                ....F..

000000c4 <mode7135Set6>:
      c4:	14 6e ff ff ff 00                                   .n....

000000ca <modeFetSet6>:
      ca:	00 00 07 38 89 ff                                   ...8..

000000d0 <mode7135Set5>:
      d0:	1e 78 ff ff 00                                      .x...

000000d5 <modeFetSet5>:
      d5:	00 00 00 50 ff                                      ...P.

000000da <mode7135Set4>:
      da:	1e ff ff 00                                         ....

000000de <modeFetSet4>:
      de:	00 00 50 ff                                         ..P.

000000e2 <mode7135Set3>:
      e2:	78 ff 00                                            x..

000000e5 <modeFetSet3>:
      e5:	00 46 ff                                            .F.

000000e8 <mode7135Set2>:
      e8:	ff 00                                               ..

000000ea <modeFetSet2>:
      ea:	00 ff                                               ..

000000ec <mode7135Set1>:
	...

000000ed <modeFetSet1>:
      ed:	ff                                                  .

000000ee <__ctors_end>:
      ee:	11 24       	eor	r1, r1
      f0:	1f be       	out	0x3f, r1	; 63
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d2 e0       	ldi	r29, 0x02	; 2
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_copy_data>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	a0 e6       	ldi	r26, 0x60	; 96
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	e0 ec       	ldi	r30, 0xC0	; 192
     102:	f0 e1       	ldi	r31, 0x10	; 16
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x10>
     106:	05 90       	lpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ae 39       	cpi	r26, 0x9E	; 158
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0xc>

00000110 <__do_clear_bss>:
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	ae e9       	ldi	r26, 0x9E	; 158
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a7 3d       	cpi	r26, 0xD7	; 215
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	6e d3       	rcall	.+1756   	; 0x7fe <main>
     122:	cc c7       	rjmp	.+3992   	; 0x10bc <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <_delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     126:	20 ed       	ldi	r18, 0xD0	; 208
     128:	37 e0       	ldi	r19, 0x07	; 7
    //if (n==0) { _delay_loop_2(BOGOMIPS/3); }
    //else {
    //    while(n-- > 0) _delay_loop_2(BOGOMIPS);
    //}
    //#else
    while(n-- > 0) _delay_loop_2(BOGOMIPS);
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	20 f0       	brcs	.+8      	; 0x136 <_delay_ms+0x10>
     12e:	f9 01       	movw	r30, r18
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <_delay_ms+0xa>
     134:	fa cf       	rjmp	.-12     	; 0x12a <_delay_ms+0x4>
    //#endif
}
     136:	08 95       	ret

00000138 <TurnOnBoardLed>:
* TurnOnBoardLed
* ==============
**************************************************************************************/
void TurnOnBoardLed(byte on)
{
	if (onboardLedEnable)
     138:	90 91 62 00 	lds	r25, 0x0062
     13c:	99 23       	and	r25, r25
     13e:	49 f0       	breq	.+18     	; 0x152 <TurnOnBoardLed+0x1a>
	{
		if (on)
     140:	88 23       	and	r24, r24
     142:	21 f0       	breq	.+8      	; 0x14c <TurnOnBoardLed+0x14>
		{
			DDRB = (1 << PWM_PIN) | (1 << ALT_PWM_PIN) | (1 << ONBOARD_LED_PIN);
     144:	83 e1       	ldi	r24, 0x13	; 19
     146:	87 bb       	out	0x17, r24	; 23
			PORTB |= (1 << ONBOARD_LED_PIN);
     148:	c4 9a       	sbi	0x18, 4	; 24
     14a:	08 95       	ret
		}
		else
		{
			DDRB = (1 << PWM_PIN) | (1 << ALT_PWM_PIN);
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	87 bb       	out	0x17, r24	; 23
			PORTB &= 0xff ^ (1 << ONBOARD_LED_PIN);
     150:	c4 98       	cbi	0x18, 4	; 24
     152:	08 95       	ret

00000154 <strobe>:
/**************************************************************************************
* strobe
* ======
**************************************************************************************/
void strobe(byte ontime, byte offtime)
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	1f 92       	push	r1
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
	PWM_LVL = 255;
     15e:	9f ef       	ldi	r25, 0xFF	; 255
     160:	98 bd       	out	0x28, r25	; 40
	_delay_ms(ontime);
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	69 83       	std	Y+1, r22	; 0x01
     166:	df df       	rcall	.-66     	; 0x126 <_delay_ms>
	PWM_LVL = 0;
     168:	18 bc       	out	0x28, r1	; 40
	_delay_ms(offtime);
     16a:	69 81       	ldd	r22, Y+1	; 0x01
     16c:	86 2f       	mov	r24, r22
     16e:	90 e0       	ldi	r25, 0x00	; 0
}
     170:	0f 90       	pop	r0
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
void strobe(byte ontime, byte offtime)
{
	PWM_LVL = 255;
	_delay_ms(ontime);
	PWM_LVL = 0;
	_delay_ms(offtime);
     176:	d7 cf       	rjmp	.-82     	; 0x126 <_delay_ms>

00000178 <get_voltage>:
* get_voltage
* ===========
**************************************************************************************/
uint8_t get_voltage()
{
	ADCSRA |= (1 << ADSC);				// Start conversion
     178:	36 9a       	sbi	0x06, 6	; 6
	
	while (ADCSRA & (1 << ADSC))  ;	// Wait for completion
     17a:	36 99       	sbic	0x06, 6	; 6
     17c:	fe cf       	rjmp	.-4      	; 0x17a <get_voltage+0x2>
	
	return ADCH;	// Send back the result
     17e:	85 b1       	in	r24, 0x05	; 5
}
     180:	08 95       	ret

00000182 <blink>:
/**************************************************************************************
* blink - do a # of blinks with a speed in msecs
* =====
**************************************************************************************/
void blink(byte val, word speed)
{
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	c8 2f       	mov	r28, r24
     190:	8b 01       	movw	r16, r22
		set_output(BLINK_BRIGHTNESS);
		_delay_ms(speed);
		
		TurnOnBoardLed(0);
		set_output(0,0);
		_delay_ms(speed<<2);	// 4X delay OFF
     192:	7b 01       	movw	r14, r22
     194:	ee 0c       	add	r14, r14
     196:	ff 1c       	adc	r15, r15
     198:	ee 0c       	add	r14, r14
     19a:	ff 1c       	adc	r15, r15
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
	ALT_PWM_LVL = pwm2;
     19c:	d8 e2       	ldi	r29, 0x28	; 40
* =====
**************************************************************************************/
void blink(byte val, word speed)
{
//	TCCR0A = PHASE;
	for (; val>0; val--)
     19e:	cc 23       	and	r28, r28
     1a0:	71 f0       	breq	.+28     	; 0x1be <blink+0x3c>
	{
		TurnOnBoardLed(1);
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	c9 df       	rcall	.-110    	; 0x138 <TurnOnBoardLed>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     1a6:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     1a8:	d9 bd       	out	0x29, r29	; 41
//	TCCR0A = PHASE;
	for (; val>0; val--)
	{
		TurnOnBoardLed(1);
		set_output(BLINK_BRIGHTNESS);
		_delay_ms(speed);
     1aa:	c8 01       	movw	r24, r16
     1ac:	bc df       	rcall	.-136    	; 0x126 <_delay_ms>
		
		TurnOnBoardLed(0);
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	c3 df       	rcall	.-122    	; 0x138 <TurnOnBoardLed>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     1b2:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     1b4:	19 bc       	out	0x29, r1	; 41
		set_output(BLINK_BRIGHTNESS);
		_delay_ms(speed);
		
		TurnOnBoardLed(0);
		set_output(0,0);
		_delay_ms(speed<<2);	// 4X delay OFF
     1b6:	c7 01       	movw	r24, r14
     1b8:	b6 df       	rcall	.-148    	; 0x126 <_delay_ms>
* =====
**************************************************************************************/
void blink(byte val, word speed)
{
//	TCCR0A = PHASE;
	for (; val>0; val--)
     1ba:	c1 50       	subi	r28, 0x01	; 1
     1bc:	f0 cf       	rjmp	.-32     	; 0x19e <blink+0x1c>
		
		TurnOnBoardLed(0);
		set_output(0,0);
		_delay_ms(speed<<2);	// 4X delay OFF
	}
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	ff 90       	pop	r15
     1c8:	ef 90       	pop	r14
     1ca:	08 95       	ret

000001cc <battBlink>:
/**************************************************************************************
* battBlink - do a # of blinks with a speed in msecs
* =========
**************************************************************************************/
void battBlink(byte val)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	c8 2f       	mov	r28, r24
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
	ALT_PWM_LVL = pwm2;
     1d2:	d8 e2       	ldi	r29, 0x28	; 40
* =========
**************************************************************************************/
void battBlink(byte val)
{
//	TCCR0A = PHASE;
	for (; val>0; val--)
     1d4:	cc 23       	and	r28, r28
     1d6:	c1 f0       	breq	.+48     	; 0x208 <battBlink+0x3c>
	{
		TurnOnBoardLed(1);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	ae df       	rcall	.-164    	; 0x138 <TurnOnBoardLed>
		
		if (bvldLedOnly == 0)
     1dc:	80 91 ba 00 	lds	r24, 0x00BA
     1e0:	81 11       	cpse	r24, r1
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <battBlink+0x1c>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     1e4:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     1e6:	d9 bd       	out	0x29, r29	; 41
		TurnOnBoardLed(1);
		
		if (bvldLedOnly == 0)
			set_output(BLINK_BRIGHTNESS);
			
		_delay_ms(250);
     1e8:	8a ef       	ldi	r24, 0xFA	; 250
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	9c df       	rcall	.-200    	; 0x126 <_delay_ms>
		
		TurnOnBoardLed(0);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	a3 df       	rcall	.-186    	; 0x138 <TurnOnBoardLed>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     1f2:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     1f4:	19 bc       	out	0x29, r1	; 41
			
		_delay_ms(250);
		
		TurnOnBoardLed(0);
		set_output(0,0);
		_delay_ms(375);
     1f6:	87 e7       	ldi	r24, 0x77	; 119
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	95 df       	rcall	.-214    	; 0x126 <_delay_ms>
		
		if (modeIdx != BATT_CHECK_MODE)
     1fc:	80 91 b3 00 	lds	r24, 0x00B3
     200:	80 35       	cpi	r24, 0x50	; 80
     202:	11 f4       	brne	.+4      	; 0x208 <battBlink+0x3c>
* =========
**************************************************************************************/
void battBlink(byte val)
{
//	TCCR0A = PHASE;
	for (; val>0; val--)
     204:	c1 50       	subi	r28, 0x01	; 1
     206:	e6 cf       	rjmp	.-52     	; 0x1d4 <battBlink+0x8>
		_delay_ms(375);
		
		if (modeIdx != BATT_CHECK_MODE)
			break;
	}
}
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <configBlink>:
/**************************************************************************************
* configBlink - do 2 quick blinks, followed by num count of long blinks
* ===========
**************************************************************************************/
void configBlink(byte num)
{
     20e:	cf 93       	push	r28
     210:	c8 2f       	mov	r28, r24
	blink(2, 40);
     212:	68 e2       	ldi	r22, 0x28	; 40
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	b4 df       	rcall	.-152    	; 0x182 <blink>
	_delay_ms(240);
     21a:	80 ef       	ldi	r24, 0xF0	; 240
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	83 df       	rcall	.-250    	; 0x126 <_delay_ms>
	blink(num, 100);
     220:	64 e6       	ldi	r22, 0x64	; 100
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	8c 2f       	mov	r24, r28
     226:	ad df       	rcall	.-166    	; 0x182 <blink>

	configIdleTime = 0;		// reset the timeout after the blinks complete
     228:	10 92 b4 00 	sts	0x00B4, r1
}
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <is_pressed>:
{
	static byte pressed = 0;
	// Keep track of last switch values polled
	static byte buffer = 0x00;
	// Shift over and tack on the latest value, 0 being low for pressed, 1 for pulled-up for released
	buffer = (buffer << 1) | ((PINB & (1 << SWITCH_PIN)) == 0);
     230:	86 b3       	in	r24, 0x16	; 22
     232:	83 fb       	bst	r24, 3
     234:	88 27       	eor	r24, r24
     236:	80 f9       	bld	r24, 0
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	98 27       	eor	r25, r24
     23c:	80 91 a4 00 	lds	r24, 0x00A4
     240:	88 0f       	add	r24, r24
     242:	89 2b       	or	r24, r25
     244:	80 93 a4 00 	sts	0x00A4, r24
	
	if (pressed) {
     248:	90 91 a3 00 	lds	r25, 0x00A3
     24c:	99 23       	and	r25, r25
     24e:	11 f0       	breq	.+4      	; 0x254 <is_pressed+0x24>
		// Need to look for a release indicator by seeing if the last switch status has been 0 for n number of polls
		pressed = (buffer & DB_REL_DUR);
     250:	8f 70       	andi	r24, 0x0F	; 15
     252:	01 c0       	rjmp	.+2      	; 0x256 <is_pressed+0x26>
	} else {
		// Need to look for pressed indicator by seeing if the last switch status was 1 for n number of polls
		pressed = ((buffer & DB_PRES_DUR) == DB_PRES_DUR);
     254:	81 70       	andi	r24, 0x01	; 1
     256:	80 93 a3 00 	sts	0x00A3, r24
	}

	return pressed;
     25a:	80 91 a3 00 	lds	r24, 0x00A3
}
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	08 95       	ret

00000262 <next_mode>:
* next_mode - switch's to next mode, higher output mode
* =========
**************************************************************************************/
void next_mode()
{
	if (modeIdx < 16)	// 11/16/14 TE: bug fix to exit strobe mode when doing a long press in strobe mode
     262:	80 91 b3 00 	lds	r24, 0x00B3
     266:	80 31       	cpi	r24, 0x10	; 16
     268:	20 f4       	brcc	.+8      	; 0x272 <next_mode+0x10>
		prevModeIdx	 = modeIdx;
     26a:	80 91 b3 00 	lds	r24, 0x00B3
     26e:	80 93 b2 00 	sts	0x00B2, r24

	if (++modeIdx >= modesCnt)
     272:	80 91 b3 00 	lds	r24, 0x00B3
     276:	8f 5f       	subi	r24, 0xFF	; 255
     278:	80 93 b3 00 	sts	0x00B3, r24
     27c:	90 91 c9 00 	lds	r25, 0x00C9
     280:	89 17       	cp	r24, r25
     282:	10 f0       	brcs	.+4      	; 0x288 <next_mode+0x26>
	{
		// Wrap around
		modeIdx = 0;
     284:	10 92 b3 00 	sts	0x00B3, r1
     288:	08 95       	ret

0000028a <prev_mode>:
* prev_mode - switch's to previous mode, lower output mode
* =========
**************************************************************************************/
void prev_mode()
{
	prevModeIdx	 = modeIdx;
     28a:	80 91 b3 00 	lds	r24, 0x00B3
     28e:	80 93 b2 00 	sts	0x00B2, r24

	if (modeIdx == 0)
     292:	80 91 b3 00 	lds	r24, 0x00B3
     296:	81 11       	cpse	r24, r1
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <prev_mode+0x16>
		modeIdx = modesCnt - 1;	// Wrap around
     29a:	80 91 c9 00 	lds	r24, 0x00C9
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <prev_mode+0x1a>
	else
		--modeIdx;
     2a0:	80 91 b3 00 	lds	r24, 0x00B3
     2a4:	81 50       	subi	r24, 0x01	; 1
     2a6:	80 93 b3 00 	sts	0x00B3, r24
     2aa:	08 95       	ret

000002ac <__vector_2>:
	GIMSK &= ~(1 << PCIE);
}

// Need an interrupt for when pin change is enabled to ONLY wake us from sleep.
// All logic of what to do when we wake up will be handled in the main loop.
EMPTY_INTERRUPT(PCINT0_vect);
     2ac:	18 95       	reti

000002ae <sleep_until_switch_press>:
* WDT_off - turn off the WatchDog timer
* =======
**************************************************************************************/
inline void WDT_off()
{
	cli();							// Disable interrupts
     2ae:	f8 94       	cli
	wdt_reset();					// Reset the WDT
     2b0:	a8 95       	wdr
	MCUSR &= ~(1<<WDRF);			// Clear Watchdog reset flag
     2b2:	84 b7       	in	r24, 0x34	; 52
     2b4:	87 7f       	andi	r24, 0xF7	; 247
     2b6:	84 bf       	out	0x34, r24	; 52
	WDTCR |= (1<<WDCE) | (1<<WDE);  // Start timed sequence
     2b8:	81 b5       	in	r24, 0x21	; 33
     2ba:	88 61       	ori	r24, 0x18	; 24
     2bc:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;					// Disable WDT
     2be:	11 bc       	out	0x21, r1	; 33
	sei();							// Enable interrupts
     2c0:	78 94       	sei
	// This routine takes up a lot of program memory :(
	// Turn the WDT off so it doesn't wake us from sleep
	// Will also ensure interrupts are on or we will never wake up
	WDT_off();
	// Need to reset press duration since a button release wasn't recorded
	pressDuration = 0;
     2c2:	10 92 b1 00 	sts	0x00B1, r1
	// Enable a pin change interrupt to wake us up
	// However, we have to make sure the switch is released otherwise we will wake when the user releases the switch
	while (is_pressed()) {
     2c6:	b4 df       	rcall	.-152    	; 0x230 <is_pressed>
     2c8:	89 2b       	or	r24, r25
     2ca:	21 f0       	breq	.+8      	; 0x2d4 <sleep_until_switch_press+0x26>
		_delay_ms(16);
     2cc:	80 e1       	ldi	r24, 0x10	; 16
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	2a df       	rcall	.-428    	; 0x126 <_delay_ms>
     2d2:	f9 cf       	rjmp	.-14     	; 0x2c6 <sleep_until_switch_press+0x18>
* PCINT_on - Enable pin change interrupts
* ========
**************************************************************************************/
inline void PCINT_on() {
	// Enable pin change interrupts
	GIMSK |= (1 << PCIE);
     2d4:	8b b7       	in	r24, 0x3b	; 59
     2d6:	80 62       	ori	r24, 0x20	; 32
     2d8:	8b bf       	out	0x3b, r24	; 59
	}
	PCINT_on();
	// Enable sleep mode set to Power Down that will be triggered by the sleep_mode() command.
	//set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	// Now go to sleep
	sleep_mode();
     2da:	85 b7       	in	r24, 0x35	; 53
     2dc:	80 62       	ori	r24, 0x20	; 32
     2de:	85 bf       	out	0x35, r24	; 53
     2e0:	88 95       	sleep
     2e2:	85 b7       	in	r24, 0x35	; 53
     2e4:	8f 7d       	andi	r24, 0xDF	; 223
     2e6:	85 bf       	out	0x35, r24	; 53
* PCINT_off - Disable pin change interrupts
* =========
**************************************************************************************/
inline void PCINT_off() {
	// Disable pin change interrupts
	GIMSK &= ~(1 << PCIE);
     2e8:	8b b7       	in	r24, 0x3b	; 59
     2ea:	8f 7d       	andi	r24, 0xDF	; 223
     2ec:	8b bf       	out	0x3b, r24	; 59
* WDT_on - Setup watchdog timer to only interrupt, not reset, every 16ms
* ======
**************************************************************************************/
inline void WDT_on() {
	// Setup watchdog timer to only interrupt, not reset, every 16ms.
	cli();							// Disable interrupts
     2ee:	f8 94       	cli
	wdt_reset();					// Reset the WDT
     2f0:	a8 95       	wdr
	WDTCR |= (1<<WDCE) | (1<<WDE);  // Start timed sequence
     2f2:	81 b5       	in	r24, 0x21	; 33
     2f4:	88 61       	ori	r24, 0x18	; 24
     2f6:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDIE);				// Enable interrupt every 16ms (was 1<<WDTIE)
     2f8:	80 e4       	ldi	r24, 0x40	; 64
     2fa:	81 bd       	out	0x21, r24	; 33
	sei();							// Enable interrupts
     2fc:	78 94       	sei
     2fe:	08 95       	ret

00000300 <SaveConfig>:
*
**************************************************************************************/
void SaveConfig()
{  
	// Pack all settings into one byte
	byte config1 = (byte)(word)(modeIdx | (modeSetIdx << 3));
     300:	80 91 b3 00 	lds	r24, 0x00B3
     304:	e0 91 66 00 	lds	r30, 0x0066
     308:	ee 0f       	add	r30, r30
     30a:	ee 0f       	add	r30, r30
     30c:	ee 0f       	add	r30, r30
     30e:	e8 2b       	or	r30, r24
	byte config2 = (byte)(word)(highToLow | (modeMemoryEnabled << 1) | (moonlightLevel << 2) | (turboTimeoutMode << 5));
     310:	90 91 bd 00 	lds	r25, 0x00BD
     314:	20 91 bc 00 	lds	r18, 0x00BC
     318:	80 91 63 00 	lds	r24, 0x0063
     31c:	40 91 bb 00 	lds	r20, 0x00BB
     320:	22 0f       	add	r18, r18
     322:	88 0f       	add	r24, r24
     324:	88 0f       	add	r24, r24
     326:	82 2b       	or	r24, r18
     328:	89 2b       	or	r24, r25
     32a:	42 95       	swap	r20
     32c:	44 0f       	add	r20, r20
     32e:	40 7e       	andi	r20, 0xE0	; 224
     330:	48 2b       	or	r20, r24
	byte config3 = (byte)(word)(OffTimeEnable | (onboardLedEnable << 1) | (locatorLedOn << 2) | (bvldLedOnly << 3) | (moonLightEnable << 4));
     332:	30 91 b9 00 	lds	r19, 0x00B9
     336:	50 91 62 00 	lds	r21, 0x0062
     33a:	20 91 64 00 	lds	r18, 0x0064
     33e:	90 91 ba 00 	lds	r25, 0x00BA
     342:	80 91 65 00 	lds	r24, 0x0065
     346:	55 0f       	add	r21, r21
     348:	22 0f       	add	r18, r18
     34a:	22 0f       	add	r18, r18
     34c:	25 2b       	or	r18, r21
     34e:	23 2b       	or	r18, r19
     350:	99 0f       	add	r25, r25
     352:	99 0f       	add	r25, r25
     354:	99 0f       	add	r25, r25
     356:	92 2b       	or	r25, r18
     358:	82 95       	swap	r24
     35a:	80 7f       	andi	r24, 0xF0	; 240
     35c:	89 2b       	or	r24, r25
	
	byte oldpos = eepos;
     35e:	20 91 a5 00 	lds	r18, 0x00A5
     362:	30 91 a6 00 	lds	r19, 0x00A6
	
	eepos = (eepos+3) & 127;  // wear leveling, use next cell
     366:	b9 01       	movw	r22, r18
     368:	6d 5f       	subi	r22, 0xFD	; 253
     36a:	7f 4f       	sbci	r23, 0xFF	; 255
     36c:	6f 77       	andi	r22, 0x7F	; 127
     36e:	77 27       	eor	r23, r23
     370:	70 93 a6 00 	sts	0x00A6, r23
     374:	60 93 a5 00 	sts	0x00A5, r22
	
	// Write the current settings (3 bytes)
	EEARL=eepos;   EEDR=config1; EECR=32+4; EECR=32+4+2;  //WRITE  //32:write only (no erase)  4:enable  2:go
     378:	6e bb       	out	0x1e, r22	; 30
     37a:	ed bb       	out	0x1d, r30	; 29
     37c:	94 e2       	ldi	r25, 0x24	; 36
     37e:	9c bb       	out	0x1c, r25	; 28
     380:	96 e2       	ldi	r25, 0x26	; 38
     382:	9c bb       	out	0x1c, r25	; 28
	while(EECR & 2)  ; // wait for completion
     384:	e1 99       	sbic	0x1c, 1	; 28
     386:	fe cf       	rjmp	.-4      	; 0x384 <SaveConfig+0x84>
	EEARL=eepos+1; EEDR=config2; EECR=32+4; EECR=32+4+2;  //WRITE  //32:write only (no erase)  4:enable  2:go
     388:	90 91 a5 00 	lds	r25, 0x00A5
     38c:	9f 5f       	subi	r25, 0xFF	; 255
     38e:	9e bb       	out	0x1e, r25	; 30
     390:	4d bb       	out	0x1d, r20	; 29
     392:	94 e2       	ldi	r25, 0x24	; 36
     394:	9c bb       	out	0x1c, r25	; 28
     396:	96 e2       	ldi	r25, 0x26	; 38
     398:	9c bb       	out	0x1c, r25	; 28
	while(EECR & 2)  ; // wait for completion
     39a:	e1 99       	sbic	0x1c, 1	; 28
     39c:	fe cf       	rjmp	.-4      	; 0x39a <SaveConfig+0x9a>
	EEARL=eepos+2; EEDR=config3; EECR=32+4; EECR=32+4+2;  //WRITE  //32:write only (no erase)  4:enable  2:go
     39e:	90 91 a5 00 	lds	r25, 0x00A5
     3a2:	9e 5f       	subi	r25, 0xFE	; 254
     3a4:	9e bb       	out	0x1e, r25	; 30
     3a6:	8d bb       	out	0x1d, r24	; 29
     3a8:	84 e2       	ldi	r24, 0x24	; 36
     3aa:	8c bb       	out	0x1c, r24	; 28
     3ac:	86 e2       	ldi	r24, 0x26	; 38
     3ae:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     3b0:	e1 99       	sbic	0x1c, 1	; 28
     3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <SaveConfig+0xb0>

	// Erase the last settings (3 bytes)
	EEARL=oldpos;   EECR=16+4; EECR=16+4+2;  //ERASE  //16:erase only (no write)  4:enable  2:go
     3b4:	2e bb       	out	0x1e, r18	; 30
     3b6:	84 e1       	ldi	r24, 0x14	; 20
     3b8:	8c bb       	out	0x1c, r24	; 28
     3ba:	86 e1       	ldi	r24, 0x16	; 22
     3bc:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     3be:	e1 99       	sbic	0x1c, 1	; 28
     3c0:	fe cf       	rjmp	.-4      	; 0x3be <SaveConfig+0xbe>
	EEARL=oldpos+1; EECR=16+4; EECR=16+4+2;  //ERASE  //16:erase only (no write)  4:enable  2:go
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	82 0f       	add	r24, r18
     3c6:	8e bb       	out	0x1e, r24	; 30
     3c8:	84 e1       	ldi	r24, 0x14	; 20
     3ca:	8c bb       	out	0x1c, r24	; 28
     3cc:	86 e1       	ldi	r24, 0x16	; 22
     3ce:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     3d0:	e1 99       	sbic	0x1c, 1	; 28
     3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <SaveConfig+0xd0>
	EEARL=oldpos+2; EECR=16+4; EECR=16+4+2;  //ERASE  //16:erase only (no write)  4:enable  2:go
     3d4:	2e 5f       	subi	r18, 0xFE	; 254
     3d6:	2e bb       	out	0x1e, r18	; 30
     3d8:	84 e1       	ldi	r24, 0x14	; 20
     3da:	8c bb       	out	0x1c, r24	; 28
     3dc:	86 e1       	ldi	r24, 0x16	; 22
     3de:	8c bb       	out	0x1c, r24	; 28
	while(EECR & 2)  ; // wait for completion
     3e0:	e1 99       	sbic	0x1c, 1	; 28
     3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <SaveConfig+0xe0>
}
     3e4:	08 95       	ret

000003e6 <__vector_12>:
/**************************************************************************************
* WDT_vect - The watchdog timer - this is invoked every 16ms
* ========
**************************************************************************************/
ISR(WDT_vect)
{
     3e6:	1f 92       	push	r1
     3e8:	0f 92       	push	r0
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	0f 92       	push	r0
     3ee:	11 24       	eor	r1, r1
     3f0:	2f 93       	push	r18
     3f2:	3f 93       	push	r19
     3f4:	4f 93       	push	r20
     3f6:	5f 93       	push	r21
     3f8:	6f 93       	push	r22
     3fa:	7f 93       	push	r23
     3fc:	8f 93       	push	r24
     3fe:	9f 93       	push	r25
     400:	af 93       	push	r26
     402:	bf 93       	push	r27
     404:	ef 93       	push	r30
     406:	ff 93       	push	r31
  #endif

	//---------------------------------------------------------------------------------------
   // Button is pressed
	//---------------------------------------------------------------------------------------
	if (is_pressed())
     408:	13 df       	rcall	.-474    	; 0x230 <is_pressed>
     40a:	89 2b       	or	r24, r25
     40c:	09 f4       	brne	.+2      	; 0x410 <__vector_12+0x2a>
     40e:	c6 c0       	rjmp	.+396    	; 0x59c <__vector_12+0x1b6>
	{
		if (pressDuration < 255)
     410:	80 91 b1 00 	lds	r24, 0x00B1
     414:	8f 3f       	cpi	r24, 0xFF	; 255
     416:	29 f0       	breq	.+10     	; 0x422 <__vector_12+0x3c>
			pressDuration++;
     418:	80 91 b1 00 	lds	r24, 0x00B1
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 93 b1 00 	sts	0x00B1, r24
		
		//---------------------------------------------------------------------------------------
		// Handle config mode specially right here:
		//---------------------------------------------------------------------------------------
		if (ConfigMode > 0)
     422:	80 91 b7 00 	lds	r24, 0x00B7
     426:	88 23       	and	r24, r24
     428:	d1 f0       	breq	.+52     	; 0x45e <__vector_12+0x78>
		{
			configIdleTime = 0;
     42a:	10 92 b4 00 	sts	0x00B4, r1
			
			if (!holdHandled)
     42e:	80 91 aa 00 	lds	r24, 0x00AA
     432:	81 11       	cpse	r24, r1
     434:	d3 c1       	rjmp	.+934    	; 0x7dc <__vector_12+0x3f6>
			{
				if (pressDuration == 35)		// hold time for skipping: 35*16 = 560 msecs
     436:	80 91 b1 00 	lds	r24, 0x00B1
     43a:	83 32       	cpi	r24, 0x23	; 35
     43c:	21 f4       	brne	.+8      	; 0x446 <__vector_12+0x60>
					++ConfigMode;
     43e:	80 91 b7 00 	lds	r24, 0x00B7
     442:	8f 5f       	subi	r24, 0xFF	; 255
     444:	09 c0       	rjmp	.+18     	; 0x458 <__vector_12+0x72>
				else if (pressDuration == 70)	// hold time for bailing out: 70*16 = 1.1 secs
     446:	80 91 b1 00 	lds	r24, 0x00B1
     44a:	86 34       	cpi	r24, 0x46	; 70
     44c:	09 f0       	breq	.+2      	; 0x450 <__vector_12+0x6a>
     44e:	c6 c1       	rjmp	.+908    	; 0x7dc <__vector_12+0x3f6>
				{
					holdHandled = 1;		// suppress more hold events on this hold
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 aa 00 	sts	0x00AA, r24
					ConfigMode = 8;		// Exit Config mode
     456:	88 e0       	ldi	r24, 0x08	; 8
     458:	80 93 b7 00 	sts	0x00B7, r24
     45c:	bf c1       	rjmp	.+894    	; 0x7dc <__vector_12+0x3f6>
				}
			}
			return;
		}

		if (!holdHandled)
     45e:	80 91 aa 00 	lds	r24, 0x00AA
     462:	81 11       	cpse	r24, r1
     464:	93 c0       	rjmp	.+294    	; 0x58c <__vector_12+0x1a6>
		{
			//---------------------------------------------------------------------------------------
			// LONG hold - for previous mode
			//---------------------------------------------------------------------------------------
			if ((pressDuration == LONG_PRESS_DUR) && (byLockOutSet == 0))
     466:	80 91 b1 00 	lds	r24, 0x00B1
     46a:	88 31       	cpi	r24, 0x18	; 24
     46c:	41 f5       	brne	.+80     	; 0x4be <__vector_12+0xd8>
     46e:	80 91 b8 00 	lds	r24, 0x00B8
     472:	81 11       	cpse	r24, r1
     474:	24 c0       	rjmp	.+72     	; 0x4be <__vector_12+0xd8>
			{
				if (modeIdx < 16)
     476:	80 91 b3 00 	lds	r24, 0x00B3
     47a:	80 31       	cpi	r24, 0x10	; 16
     47c:	40 f4       	brcc	.+16     	; 0x48e <__vector_12+0xa8>
				{
					// Long press
					if (highToLow)
     47e:	80 91 bd 00 	lds	r24, 0x00BD
     482:	88 23       	and	r24, r24
     484:	11 f0       	breq	.+4      	; 0x48a <__vector_12+0xa4>
						next_mode();
     486:	ed de       	rcall	.-550    	; 0x262 <next_mode>
     488:	1a c0       	rjmp	.+52     	; 0x4be <__vector_12+0xd8>
					else
						prev_mode();
     48a:	ff de       	rcall	.-514    	; 0x28a <prev_mode>
     48c:	18 c0       	rjmp	.+48     	; 0x4be <__vector_12+0xd8>
				}
				else if (modeIdx > SPECIAL_MODES)
     48e:	80 91 b3 00 	lds	r24, 0x00B3
     492:	8b 35       	cpi	r24, 0x5B	; 91
     494:	a0 f0       	brcs	.+40     	; 0x4be <__vector_12+0xd8>
				{
					if (specModeIdx > 0)
     496:	80 91 d6 00 	lds	r24, 0x00D6
     49a:	88 23       	and	r24, r24
     49c:	61 f0       	breq	.+24     	; 0x4b6 <__vector_12+0xd0>
					{
						--specModeIdx;
     49e:	80 91 d6 00 	lds	r24, 0x00D6
     4a2:	81 50       	subi	r24, 0x01	; 1
     4a4:	80 93 d6 00 	sts	0x00D6, r24
						modeIdx = specialModes[specModeIdx];
     4a8:	e0 91 d6 00 	lds	r30, 0x00D6
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	e8 56       	subi	r30, 0x68	; 104
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__vector_12+0xd4>
					}
					else
						modeIdx = prevModeIdx;	// bail out of special modes
     4b6:	80 91 b2 00 	lds	r24, 0x00B2
     4ba:	80 93 b3 00 	sts	0x00B3, r24
			}

			//---------------------------------------------------------------------------------------
			// XLONG hold - for strobes, battery check, or lock-out (depending on preceding quick clicks)
			//---------------------------------------------------------------------------------------
			if (pressDuration == XLONG_PRESS_DUR)
     4be:	80 91 b1 00 	lds	r24, 0x00B1
     4c2:	84 34       	cpi	r24, 0x44	; 68
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__vector_12+0xe2>
     4c6:	4d c0       	rjmp	.+154    	; 0x562 <__vector_12+0x17c>
			{
				if ((byLockOutEnable == 1) && (quickClicks == 2) && (wIdleTicks < LOCK_OUT_TICKS))
     4c8:	80 91 61 00 	lds	r24, 0x0061
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	99 f4       	brne	.+38     	; 0x4f6 <__vector_12+0x110>
     4d0:	90 91 b0 00 	lds	r25, 0x00B0
     4d4:	92 30       	cpi	r25, 0x02	; 2
     4d6:	79 f4       	brne	.+30     	; 0x4f6 <__vector_12+0x110>
     4d8:	20 91 ad 00 	lds	r18, 0x00AD
     4dc:	30 91 ae 00 	lds	r19, 0x00AE
     4e0:	20 31       	cpi	r18, 0x10	; 16
     4e2:	31 05       	cpc	r19, r1
     4e4:	40 f4       	brcc	.+16     	; 0x4f6 <__vector_12+0x110>
				{
					modeIdx = 0;
     4e6:	10 92 b3 00 	sts	0x00B3, r1
					byLockOutSet = 1 - byLockOutSet;		// invert "LOCK OUT"
     4ea:	90 91 b8 00 	lds	r25, 0x00B8
     4ee:	89 1b       	sub	r24, r25
     4f0:	80 93 b8 00 	sts	0x00B8, r24
     4f4:	36 c0       	rjmp	.+108    	; 0x562 <__vector_12+0x17c>
				}
				else if (byLockOutSet == 0)
     4f6:	80 91 b8 00 	lds	r24, 0x00B8
     4fa:	81 11       	cpse	r24, r1
     4fc:	32 c0       	rjmp	.+100    	; 0x562 <__vector_12+0x17c>
				{
					if ((quickClicks == 1) && (wIdleTicks < LOCK_OUT_TICKS))
     4fe:	80 91 b0 00 	lds	r24, 0x00B0
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	41 f4       	brne	.+16     	; 0x516 <__vector_12+0x130>
     506:	80 91 ad 00 	lds	r24, 0x00AD
     50a:	90 91 ae 00 	lds	r25, 0x00AE
     50e:	40 97       	sbiw	r24, 0x10	; 16
     510:	10 f4       	brcc	.+4      	; 0x516 <__vector_12+0x130>
					{
						modeIdx = BATT_CHECK_MODE;
     512:	80 e5       	ldi	r24, 0x50	; 80
     514:	06 c0       	rjmp	.+12     	; 0x522 <__vector_12+0x13c>
					}
					else if (modeIdx > SPECIAL_MODES)
     516:	80 91 b3 00 	lds	r24, 0x00B3
     51a:	8b 35       	cpi	r24, 0x5B	; 91
     51c:	28 f0       	brcs	.+10     	; 0x528 <__vector_12+0x142>
					{
						modeIdx = prevModeIdx;	// restore last normal mode
     51e:	80 91 b2 00 	lds	r24, 0x00B2
     522:	80 93 b3 00 	sts	0x00B3, r24
     526:	1d c0       	rjmp	.+58     	; 0x562 <__vector_12+0x17c>
					}
					else if (modeIdx == BATT_CHECK_MODE)
     528:	80 91 b3 00 	lds	r24, 0x00B3
     52c:	80 35       	cpi	r24, 0x50	; 80
     52e:	69 f4       	brne	.+26     	; 0x54a <__vector_12+0x164>
					{
						modeIdx = 0;		// clear main mode
     530:	10 92 b3 00 	sts	0x00B3, r1
						PWM_LVL = 0;		// suppress main LED output
     534:	18 bc       	out	0x28, r1	; 40
						ALT_PWM_LVL = 0;
     536:	19 bc       	out	0x29, r1	; 41
				
						ConfigMode = 21;		// Initialize Advanced Config mode
     538:	85 e1       	ldi	r24, 0x15	; 21
     53a:	80 93 b7 00 	sts	0x00B7, r24
						configClicks = 0;
     53e:	10 92 b5 00 	sts	0x00B5, r1
						holdHandled = 1;		// suppress more hold events on this hold
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 aa 00 	sts	0x00AA, r24
     548:	0c c0       	rjmp	.+24     	; 0x562 <__vector_12+0x17c>
					}
					else
					{
						// Engage first special mode!
						specModeIdx = 0;
     54a:	10 92 d6 00 	sts	0x00D6, r1
						modeIdx = specialModes[specModeIdx];
     54e:	e0 91 d6 00 	lds	r30, 0x00D6
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	e8 56       	subi	r30, 0x68	; 104
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	80 81       	ld	r24, Z
     55a:	80 93 b3 00 	sts	0x00B3, r24
							
						TurnOnBoardLed(0);	// be sure the on board LED is OFF here
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	eb dd       	rcall	.-1066   	; 0x138 <TurnOnBoardLed>
			}
			
			//---------------------------------------------------------------------------------------
			// CONFIG hold - if it is not locked out or lock-out was just exited on this hold
			//---------------------------------------------------------------------------------------
			if ((pressDuration == CONFIG_ENTER_DUR) && (byLockOutSet == 0) && (quickClicks != 2))
     562:	80 91 b1 00 	lds	r24, 0x00B1
     566:	80 3a       	cpi	r24, 0xA0	; 160
     568:	89 f4       	brne	.+34     	; 0x58c <__vector_12+0x1a6>
     56a:	80 91 b8 00 	lds	r24, 0x00B8
     56e:	81 11       	cpse	r24, r1
     570:	0d c0       	rjmp	.+26     	; 0x58c <__vector_12+0x1a6>
     572:	80 91 b0 00 	lds	r24, 0x00B0
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	49 f0       	breq	.+18     	; 0x58c <__vector_12+0x1a6>
			{
				modeIdx = 0;
     57a:	10 92 b3 00 	sts	0x00B3, r1
				// turn the light off initially
//				TCCR0A = PHASE;
				PWM_LVL = 0;
     57e:	18 bc       	out	0x28, r1	; 40
				ALT_PWM_LVL = 0;
     580:	19 bc       	out	0x29, r1	; 41
					
				ConfigMode = 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	80 93 b7 00 	sts	0x00B7, r24
				configClicks = 0;
     588:	10 92 b5 00 	sts	0x00B5, r1
			}
		}

		wTurboTicks = 0;		// Just always reset turbo timer whenever the button is pressed
     58c:	10 92 a2 00 	sts	0x00A2, r1
     590:	10 92 a1 00 	sts	0x00A1, r1

		//LowBattState = 0;		// reset the Low Battery State upon a button press (NO - keep it active!)

	  #ifdef VOLTAGE_MON
		adc_ticks = ADC_DELAY;	// Same with the ramp down delay
     594:	8c eb       	ldi	r24, 0xBC	; 188
     596:	80 93 60 00 	sts	0x0060, r24
     59a:	20 c1       	rjmp	.+576    	; 0x7dc <__vector_12+0x3f6>
	//---------------------------------------------------------------------------------------
   // Not pressed (debounced qualified)
	//---------------------------------------------------------------------------------------
	else
	{
		holdHandled = 0;		// free up any hold suppressed state
     59c:	10 92 aa 00 	sts	0x00AA, r1

		if (ConfigMode > 0)
     5a0:	80 91 b7 00 	lds	r24, 0x00B7
     5a4:	88 23       	and	r24, r24
     5a6:	c1 f0       	breq	.+48     	; 0x5d8 <__vector_12+0x1f2>
		{
			if (pressDuration > 0)
     5a8:	80 91 b1 00 	lds	r24, 0x00B1
     5ac:	88 23       	and	r24, r24
     5ae:	61 f0       	breq	.+24     	; 0x5c8 <__vector_12+0x1e2>
			{
				if (pressDuration < LONG_PRESS_DUR)
     5b0:	80 91 b1 00 	lds	r24, 0x00B1
     5b4:	88 31       	cpi	r24, 0x18	; 24
     5b6:	28 f4       	brcc	.+10     	; 0x5c2 <__vector_12+0x1dc>
					++configClicks;
     5b8:	80 91 b5 00 	lds	r24, 0x00B5
     5bc:	8f 5f       	subi	r24, 0xFF	; 255
     5be:	80 93 b5 00 	sts	0x00B5, r24
				configIdleTime = 0;
     5c2:	10 92 b4 00 	sts	0x00B4, r1
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__vector_12+0x1ec>
			}
			else
			{
				++configIdleTime;
     5c8:	80 91 b4 00 	lds	r24, 0x00B4
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
     5ce:	80 93 b4 00 	sts	0x00B4, r24
			}
			pressDuration = 0;
     5d2:	10 92 b1 00 	sts	0x00B1, r1
     5d6:	00 c1       	rjmp	.+512    	; 0x7d8 <__vector_12+0x3f2>
		} // config mode
		
		else if (pressDuration > 0)
     5d8:	80 91 b1 00 	lds	r24, 0x00B1
     5dc:	88 23       	and	r24, r24
     5de:	09 f4       	brne	.+2      	; 0x5e2 <__vector_12+0x1fc>
     5e0:	78 c0       	rjmp	.+240    	; 0x6d2 <__vector_12+0x2ec>
		{
   		// Was previously pressed
			if (pressDuration < LONG_PRESS_DUR)
     5e2:	80 91 b1 00 	lds	r24, 0x00B1
     5e6:	88 31       	cpi	r24, 0x18	; 24
     5e8:	08 f0       	brcs	.+2      	; 0x5ec <__vector_12+0x206>
     5ea:	6e c0       	rjmp	.+220    	; 0x6c8 <__vector_12+0x2e2>
			{
				// normal short click
				if (modeIdx == BATT_CHECK_MODE)		// battery check - reset to OFF
     5ec:	80 91 b3 00 	lds	r24, 0x00B3
     5f0:	80 35       	cpi	r24, 0x50	; 80
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <__vector_12+0x210>
     5f4:	41 c0       	rjmp	.+130    	; 0x678 <__vector_12+0x292>
					modeIdx = 0;
				else
				{
					// track quick clicks in a row from OFF
					if ((modeIdx == 0) && !quickClicks)
     5f6:	80 91 b3 00 	lds	r24, 0x00B3
     5fa:	81 11       	cpse	r24, r1
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <__vector_12+0x224>
     5fe:	80 91 b0 00 	lds	r24, 0x00B0
     602:	81 11       	cpse	r24, r1
     604:	02 c0       	rjmp	.+4      	; 0x60a <__vector_12+0x224>
						quickClicks = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	07 c0       	rjmp	.+14     	; 0x618 <__vector_12+0x232>
					else if (quickClicks)
     60a:	80 91 b0 00 	lds	r24, 0x00B0
     60e:	88 23       	and	r24, r24
     610:	29 f0       	breq	.+10     	; 0x61c <__vector_12+0x236>
						++quickClicks;
     612:	80 91 b0 00 	lds	r24, 0x00B0
     616:	8f 5f       	subi	r24, 0xFF	; 255
     618:	80 93 b0 00 	sts	0x00B0, r24

					if (byLockOutSet == 0)
     61c:	80 91 b8 00 	lds	r24, 0x00B8
     620:	81 11       	cpse	r24, r1
     622:	50 c0       	rjmp	.+160    	; 0x6c4 <__vector_12+0x2de>
					{
						if (modeMemoryEnabled && (modeMemoryLastModeIdx > 0) && (modeIdx == 0))
     624:	80 91 bc 00 	lds	r24, 0x00BC
     628:	88 23       	and	r24, r24
     62a:	79 f0       	breq	.+30     	; 0x64a <__vector_12+0x264>
     62c:	80 91 af 00 	lds	r24, 0x00AF
     630:	88 23       	and	r24, r24
     632:	59 f0       	breq	.+22     	; 0x64a <__vector_12+0x264>
     634:	80 91 b3 00 	lds	r24, 0x00B3
     638:	81 11       	cpse	r24, r1
     63a:	07 c0       	rjmp	.+14     	; 0x64a <__vector_12+0x264>
						{
							modeIdx = modeMemoryLastModeIdx;
     63c:	80 91 af 00 	lds	r24, 0x00AF
     640:	80 93 b3 00 	sts	0x00B3, r24
							modeMemoryLastModeIdx = 0;
     644:	10 92 af 00 	sts	0x00AF, r1
     648:	3d c0       	rjmp	.+122    	; 0x6c4 <__vector_12+0x2de>
						}
						else if (modeIdx < 16)
     64a:	80 91 b3 00 	lds	r24, 0x00B3
     64e:	80 31       	cpi	r24, 0x10	; 16
     650:	f0 f4       	brcc	.+60     	; 0x68e <__vector_12+0x2a8>
						{
							if ((modeIdx > 0) && (wIdleTicks >= IDLE_TIME))
     652:	80 91 b3 00 	lds	r24, 0x00B3
     656:	88 23       	and	r24, r24
     658:	91 f0       	breq	.+36     	; 0x67e <__vector_12+0x298>
     65a:	80 91 ad 00 	lds	r24, 0x00AD
     65e:	90 91 ae 00 	lds	r25, 0x00AE
     662:	8b 34       	cpi	r24, 0x4B	; 75
     664:	91 05       	cpc	r25, r1
     666:	58 f0       	brcs	.+22     	; 0x67e <__vector_12+0x298>
							{
								modeMemoryLastModeIdx = modeIdx;
     668:	80 91 b3 00 	lds	r24, 0x00B3
     66c:	80 93 af 00 	sts	0x00AF, r24
								prevModeIdx = modeIdx;
     670:	80 91 b3 00 	lds	r24, 0x00B3
     674:	80 93 b2 00 	sts	0x00B2, r24
								modeIdx = 0;	// Turn OFF the light
     678:	10 92 b3 00 	sts	0x00B3, r1
     67c:	23 c0       	rjmp	.+70     	; 0x6c4 <__vector_12+0x2de>
							}
							else
							{
								// Short press - normal modes
								if (highToLow)
     67e:	80 91 bd 00 	lds	r24, 0x00BD
     682:	88 23       	and	r24, r24
     684:	11 f0       	breq	.+4      	; 0x68a <__vector_12+0x2a4>
									prev_mode();
     686:	01 de       	rcall	.-1022   	; 0x28a <prev_mode>
     688:	1d c0       	rjmp	.+58     	; 0x6c4 <__vector_12+0x2de>
								else
									next_mode();
     68a:	eb dd       	rcall	.-1066   	; 0x262 <next_mode>
     68c:	1b c0       	rjmp	.+54     	; 0x6c4 <__vector_12+0x2de>
							}
						}
						else  // special modes
						{
							if (wIdleTicks >= IDLE_TIME)
     68e:	80 91 ad 00 	lds	r24, 0x00AD
     692:	90 91 ae 00 	lds	r25, 0x00AE
     696:	8b 34       	cpi	r24, 0x4B	; 75
     698:	91 05       	cpc	r25, r1
     69a:	48 f4       	brcc	.+18     	; 0x6ae <__vector_12+0x2c8>
								modeIdx = prevModeIdx;
							else if (++specModeIdx > specialModesCnt)
     69c:	80 91 d6 00 	lds	r24, 0x00D6
     6a0:	8f 5f       	subi	r24, 0xFF	; 255
     6a2:	80 93 d6 00 	sts	0x00D6, r24
     6a6:	90 91 67 00 	lds	r25, 0x0067
     6aa:	98 17       	cp	r25, r24
     6ac:	18 f4       	brcc	.+6      	; 0x6b4 <__vector_12+0x2ce>
								modeIdx = prevModeIdx;  // bail out of special modes
     6ae:	80 91 b2 00 	lds	r24, 0x00B2
     6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <__vector_12+0x2da>
							else
								modeIdx = specialModes[specModeIdx];
     6b4:	e0 91 d6 00 	lds	r30, 0x00D6
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	e8 56       	subi	r30, 0x68	; 104
     6bc:	ff 4f       	sbci	r31, 0xFF	; 255
     6be:	80 81       	ld	r24, Z
     6c0:	80 93 b3 00 	sts	0x00B3, r24
						}
					}
				} // ...

				pressDuration = 0;
     6c4:	10 92 b1 00 	sts	0x00B1, r1
			} // short click
			
			wIdleTicks = 0;	// reset idle time
     6c8:	10 92 ae 00 	sts	0x00AE, r1
     6cc:	10 92 ad 00 	sts	0x00AD, r1
     6d0:	83 c0       	rjmp	.+262    	; 0x7d8 <__vector_12+0x3f2>
		else
		{
			//------------------------------------
			// Not previously pressed
			//------------------------------------
			if (++wIdleTicks == 0)
     6d2:	80 91 ad 00 	lds	r24, 0x00AD
     6d6:	90 91 ae 00 	lds	r25, 0x00AE
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	90 93 ae 00 	sts	0x00AE, r25
     6e0:	80 93 ad 00 	sts	0x00AD, r24
     6e4:	89 2b       	or	r24, r25
     6e6:	31 f4       	brne	.+12     	; 0x6f4 <__vector_12+0x30e>
				wIdleTicks = 30000;		// max it out at 30,000 (8 minutes)
     6e8:	80 e3       	ldi	r24, 0x30	; 48
     6ea:	95 e7       	ldi	r25, 0x75	; 117
     6ec:	90 93 ae 00 	sts	0x00AE, r25
     6f0:	80 93 ad 00 	sts	0x00AD, r24

			if (wIdleTicks > LOCK_OUT_TICKS)
     6f4:	80 91 ad 00 	lds	r24, 0x00AD
     6f8:	90 91 ae 00 	lds	r25, 0x00AE
     6fc:	41 97       	sbiw	r24, 0x11	; 17
     6fe:	10 f0       	brcs	.+4      	; 0x704 <__vector_12+0x31e>
				quickClicks = 0;
     700:	10 92 b0 00 	sts	0x00B0, r1

			// Only do turbo check when switch isn't pressed
			if ((turboTimeoutMode > 0) && (modeIdx < 16))
     704:	80 91 bb 00 	lds	r24, 0x00BB
     708:	88 23       	and	r24, r24
     70a:	e9 f0       	breq	.+58     	; 0x746 <__vector_12+0x360>
     70c:	80 91 b3 00 	lds	r24, 0x00B3
     710:	80 31       	cpi	r24, 0x10	; 16
     712:	c8 f4       	brcc	.+50     	; 0x746 <__vector_12+0x360>
				if (byPrimModes[modeIdx] == 255)
     714:	e0 91 b3 00 	lds	r30, 0x00B3
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	e5 53       	subi	r30, 0x35	; 53
     71c:	ff 4f       	sbci	r31, 0xFF	; 255
     71e:	80 81       	ld	r24, Z
     720:	8f 3f       	cpi	r24, 0xFF	; 255
     722:	89 f4       	brne	.+34     	; 0x746 <__vector_12+0x360>
				{
					if (++wTurboTicks > wTurboTickLimit)
     724:	80 91 a1 00 	lds	r24, 0x00A1
     728:	90 91 a2 00 	lds	r25, 0x00A2
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	90 93 a2 00 	sts	0x00A2, r25
     732:	80 93 a1 00 	sts	0x00A1, r24
     736:	20 91 ab 00 	lds	r18, 0x00AB
     73a:	30 91 ac 00 	lds	r19, 0x00AC
     73e:	28 17       	cp	r18, r24
     740:	39 07       	cpc	r19, r25
     742:	08 f4       	brcc	.+2      	; 0x746 <__vector_12+0x360>
						prev_mode();		// Go to the previous mode
     744:	a2 dd       	rcall	.-1212   	; 0x28a <prev_mode>
				}

			// Only do voltage monitoring when the switch isn't pressed
		  #ifdef VOLTAGE_MON
			if (adc_ticks > 0)
     746:	80 91 60 00 	lds	r24, 0x0060
     74a:	88 23       	and	r24, r24
     74c:	19 f0       	breq	.+6      	; 0x754 <__vector_12+0x36e>
				--adc_ticks;
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	80 93 60 00 	sts	0x0060, r24
			if (adc_ticks == 0)
     754:	80 91 60 00 	lds	r24, 0x0060
     758:	81 11       	cpse	r24, r1
     75a:	27 c0       	rjmp	.+78     	; 0x7aa <__vector_12+0x3c4>
			{
				// See if conversion is done
				if (ADCSRA & (1 << ADIF))
     75c:	34 9b       	sbis	0x06, 4	; 6
     75e:	16 c0       	rjmp	.+44     	; 0x78c <__vector_12+0x3a6>
				{
					// See if voltage is lower than what we were looking for
					if (ADCH < ((modeIdx == 1) ? ADC_CRIT : ADC_LOW))
     760:	85 b1       	in	r24, 0x05	; 5
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	20 91 b3 00 	lds	r18, 0x00B3
     768:	21 30       	cpi	r18, 0x01	; 1
     76a:	19 f0       	breq	.+6      	; 0x772 <__vector_12+0x38c>
     76c:	2d e7       	ldi	r18, 0x7D	; 125
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	02 c0       	rjmp	.+4      	; 0x776 <__vector_12+0x390>
     772:	20 e7       	ldi	r18, 0x70	; 112
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	82 17       	cp	r24, r18
     778:	93 07       	cpc	r25, r19
     77a:	34 f4       	brge	.+12     	; 0x788 <__vector_12+0x3a2>
						++lowbatt_cnt;
     77c:	80 91 a0 00 	lds	r24, 0x00A0
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	80 93 a0 00 	sts	0x00A0, r24
     786:	02 c0       	rjmp	.+4      	; 0x78c <__vector_12+0x3a6>
					else
						lowbatt_cnt = 0;
     788:	10 92 a0 00 	sts	0x00A0, r1
				}
				
				// See if it's been low for a while
				if (lowbatt_cnt >= 4)
     78c:	80 91 a0 00 	lds	r24, 0x00A0
     790:	84 30       	cpi	r24, 0x04	; 4
     792:	50 f0       	brcs	.+20     	; 0x7a8 <__vector_12+0x3c2>
				{
					LowBattSignal = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	80 93 a9 00 	sts	0x00A9, r24
					
					LowBattState = 1;
     79a:	80 93 a8 00 	sts	0x00A8, r24
					
					lowbatt_cnt = 0;
     79e:	10 92 a0 00 	sts	0x00A0, r1
					// If we reach 0 here, main loop will go into sleep mode
					// Restart the counter to when we step down again
					adc_ticks = ADC_DELAY;
     7a2:	8c eb       	ldi	r24, 0xBC	; 188
     7a4:	80 93 60 00 	sts	0x0060, r24
				}
				
				// Make sure conversion is running for next time through
				ADCSRA |= (1 << ADSC);
     7a8:	36 9a       	sbi	0x06, 6	; 6
			}
			
			if (LowBattState)
     7aa:	80 91 a8 00 	lds	r24, 0x00A8
     7ae:	88 23       	and	r24, r24
     7b0:	99 f0       	breq	.+38     	; 0x7d8 <__vector_12+0x3f2>
			{
				if (++wLowBattBlinkTicks == 500)		// Blink every 8 secs
     7b2:	80 91 9e 00 	lds	r24, 0x009E
     7b6:	90 91 9f 00 	lds	r25, 0x009F
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	90 93 9f 00 	sts	0x009F, r25
     7c0:	80 93 9e 00 	sts	0x009E, r24
     7c4:	84 3f       	cpi	r24, 0xF4	; 244
     7c6:	91 40       	sbci	r25, 0x01	; 1
     7c8:	39 f4       	brne	.+14     	; 0x7d8 <__vector_12+0x3f2>
				{
					LowBattBlinkSignal = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 a7 00 	sts	0x00A7, r24
					wLowBattBlinkTicks = 0;
     7d0:	10 92 9f 00 	sts	0x009F, r1
     7d4:	10 92 9e 00 	sts	0x009E, r1
			}
			
		  #endif
		} // not previously pressed
		
		pressDuration = 0;
     7d8:	10 92 b1 00 	sts	0x00B1, r1
	} // Not pressed
}
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <main>:
int main(void)
{	
	byte i;

	// Set all ports to input, and turn pull-up resistors on for the inputs we are using
	DDRB = 0x00;
     7fe:	17 ba       	out	0x17, r1	; 23
	//PORTB = (1 << SWITCH_PIN) | (1 << STAR3_PIN);

	PORTB = (1 << SWITCH_PIN);		// Only the switch is an input
     800:	88 e0       	ldi	r24, 0x08	; 8
     802:	88 bb       	out	0x18, r24	; 24

	// Set the switch as an interrupt for when we turn pin change interrupts on
	PCMSK = (1 << SWITCH_PIN);
     804:	85 bb       	out	0x15, r24	; 21
	
	// Set primary and alternate PWN pins for output
	DDRB = (1 << PWM_PIN) | (1 << ALT_PWM_PIN);
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	87 bb       	out	0x17, r24	; 23

	// Set timer to do PWM for correct output pin and set prescaler timing
	TCCR0B = 0x01; // pre-scaler for timer (1 => 1, 2 => 8, 3 => 64...)
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	83 bf       	out	0x33, r24	; 51
* ADC_on - Turn the AtoD Converter ON
* ======
**************************************************************************************/
inline void ADC_on() {
// For 13A:	ADMUX  = (1 << REFS0) | (1 << ADLAR) | ADC_CHANNEL; // 1.1v reference, left-adjust, ADC1/PB2
	ADMUX  = (1 << REFS1) | (1 << ADLAR) | ADC_CHANNEL; // 1.1v reference, left-adjust, ADC1/PB2
     80e:	81 ea       	ldi	r24, 0xA1	; 161
     810:	87 b9       	out	0x07, r24	; 7
   DIDR0 |= (1 << ADC_DIDR);							// disable digital input on ADC pin to reduce power consumption
     812:	a2 9a       	sbi	0x14, 2	; 20
	ADCSRA = (1 << ADEN ) | (1 << ADSC ) | ADC_PRSCL;   // enable, start, pre-scale
     814:	86 ec       	ldi	r24, 0xC6	; 198
     816:	86 b9       	out	0x06, r24	; 6
	#ifdef VOLTAGE_MON
	ADC_on();
	#else
	ADC_off();
	#endif
	ACSR   |=  (1<<7); //AC off
     818:	47 9a       	sbi	0x08, 7	; 8

	// Enable sleep mode set to Power Down that will be triggered by the sleep_mode() command.
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     81a:	85 b7       	in	r24, 0x35	; 53
     81c:	87 7e       	andi	r24, 0xE7	; 231
     81e:	80 61       	ori	r24, 0x10	; 16
     820:	85 bf       	out	0x35, r24	; 53
inline void LoadConfig()
{
   byte config1, config2, config3;

   // find the config data
   for (eepos=0; eepos < 128; eepos+=3)
     822:	10 92 a6 00 	sts	0x00A6, r1
     826:	10 92 a5 00 	sts	0x00A5, r1
     82a:	00 91 a5 00 	lds	r16, 0x00A5
     82e:	10 91 a6 00 	lds	r17, 0x00A6
     832:	00 38       	cpi	r16, 0x80	; 128
     834:	11 05       	cpc	r17, r1
     836:	08 f0       	brcs	.+2      	; 0x83a <main+0x3c>
     838:	34 c4       	rjmp	.+2152   	; 0x10a2 <main+0x8a4>
	{
	   config1 = eeprom_read_byte((const byte *)eepos);
     83a:	c8 01       	movw	r24, r16
     83c:	37 d4       	rcall	.+2158   	; 0x10ac <eeprom_read_byte>
     83e:	c8 2f       	mov	r28, r24
		config2 = eeprom_read_byte((const byte *)eepos+1);
     840:	c8 01       	movw	r24, r16
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	33 d4       	rcall	.+2150   	; 0x10ac <eeprom_read_byte>
     846:	d8 2f       	mov	r29, r24
		config3 = eeprom_read_byte((const byte *)eepos+2);
     848:	c8 01       	movw	r24, r16
     84a:	02 96       	adiw	r24, 0x02	; 2
     84c:	2f d4       	rcall	.+2142   	; 0x10ac <eeprom_read_byte>
     84e:	98 2f       	mov	r25, r24
		
		// A valid 'config1' can never be 0xff (0xff is an erased location)
	   if (config1 != 0xff)
     850:	cf 3f       	cpi	r28, 0xFF	; 255
     852:	39 f4       	brne	.+14     	; 0x862 <main+0x64>
inline void LoadConfig()
{
   byte config1, config2, config3;

   // find the config data
   for (eepos=0; eepos < 128; eepos+=3)
     854:	0d 5f       	subi	r16, 0xFD	; 253
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	10 93 a6 00 	sts	0x00A6, r17
     85c:	00 93 a5 00 	sts	0x00A5, r16
     860:	e4 cf       	rjmp	.-56     	; 0x82a <main+0x2c>
   }

   // unpack the config data
   if (eepos < 128)
	{
	   modeIdx = config1 & 0x7;
     862:	8c 2f       	mov	r24, r28
     864:	87 70       	andi	r24, 0x07	; 7
     866:	80 93 b3 00 	sts	0x00B3, r24
		modeSetIdx = (config1 >> 3) & 0x0f;
     86a:	c6 95       	lsr	r28
     86c:	c6 95       	lsr	r28
     86e:	c6 95       	lsr	r28
     870:	cf 70       	andi	r28, 0x0F	; 15
     872:	c0 93 66 00 	sts	0x0066, r28
		
	   highToLow = config2 & 1;
     876:	8d 2f       	mov	r24, r29
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	80 93 bd 00 	sts	0x00BD, r24
	   modeMemoryEnabled = (config2 >> 1) & 1;
     87e:	d1 fb       	bst	r29, 1
     880:	88 27       	eor	r24, r24
     882:	80 f9       	bld	r24, 0
     884:	80 93 bc 00 	sts	0x00BC, r24
		moonlightLevel = (config2 >> 2) & 0x07;
     888:	8d 2f       	mov	r24, r29
     88a:	86 95       	lsr	r24
     88c:	86 95       	lsr	r24
     88e:	87 70       	andi	r24, 0x07	; 7
     890:	80 93 63 00 	sts	0x0063, r24
		turboTimeoutMode = (config2 >> 5) & 0x07;
     894:	d2 95       	swap	r29
     896:	d6 95       	lsr	r29
     898:	d7 70       	andi	r29, 0x07	; 7
     89a:	d0 93 bb 00 	sts	0x00BB, r29
	
		OffTimeEnable = config3 & 1;
     89e:	89 2f       	mov	r24, r25
     8a0:	81 70       	andi	r24, 0x01	; 1
     8a2:	80 93 b9 00 	sts	0x00B9, r24
		onboardLedEnable = (config3 >> 1) & 1;
     8a6:	91 fb       	bst	r25, 1
     8a8:	88 27       	eor	r24, r24
     8aa:	80 f9       	bld	r24, 0
     8ac:	80 93 62 00 	sts	0x0062, r24
		locatorLedOn = (config3 >> 2) & 1;
     8b0:	92 fb       	bst	r25, 2
     8b2:	88 27       	eor	r24, r24
     8b4:	80 f9       	bld	r24, 0
     8b6:	80 93 64 00 	sts	0x0064, r24
		bvldLedOnly = (config3 >> 3) & 1;
     8ba:	93 fb       	bst	r25, 3
     8bc:	88 27       	eor	r24, r24
     8be:	80 f9       	bld	r24, 0
     8c0:	80 93 ba 00 	sts	0x00BA, r24
		moonLightEnable = (config3 >> 4) & 1;
     8c4:	92 95       	swap	r25
     8c6:	91 70       	andi	r25, 0x01	; 1
     8c8:	90 93 65 00 	sts	0x0065, r25
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
     8cc:	e0 91 66 00 	lds	r30, 0x0066
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	e2 57       	subi	r30, 0x72	; 114
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	84 91       	lpm	r24, Z
     8d8:	80 93 c9 00 	sts	0x00C9, r24

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
     8dc:	10 92 be 00 	sts	0x00BE, r1
     8e0:	10 92 cb 00 	sts	0x00CB, r1
//	mode_pwm[0] = PHASE;

	if (moonLightEnable)
     8e4:	90 91 65 00 	lds	r25, 0x0065
     8e8:	99 23       	and	r25, r25
     8ea:	41 f0       	breq	.+16     	; 0x8fc <main+0xfe>
	{
		offset = 2;
		byPrimModes[1] = 0;
     8ec:	10 92 cc 00 	sts	0x00CC, r1
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
     8f0:	90 91 63 00 	lds	r25, 0x0063
     8f4:	90 93 bf 00 	sts	0x00BF, r25
	byPrimModes[0] = bySecModes[0] = 0;
//	mode_pwm[0] = PHASE;

	if (moonLightEnable)
	{
		offset = 2;
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <main+0x100>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
     8fc:	91 e0       	ldi	r25, 0x01	; 1
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
//		mode_pwm[1] = PHASE;
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	48 2f       	mov	r20, r24
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	69 2f       	mov	r22, r25
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	24 17       	cp	r18, r20
     90c:	35 07       	cpc	r19, r21
     90e:	2c f5       	brge	.+74     	; 0x95a <main+0x15c>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
     910:	a0 91 66 00 	lds	r26, 0x0066
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	aa 0f       	add	r26, r26
     918:	bb 1f       	adc	r27, r27
     91a:	a0 58       	subi	r26, 0x80	; 128
     91c:	bf 4f       	sbci	r27, 0xFF	; 255
     91e:	ed 91       	ld	r30, X+
     920:	fc 91       	ld	r31, X
     922:	e2 0f       	add	r30, r18
     924:	f3 1f       	adc	r31, r19
     926:	e4 91       	lpm	r30, Z
     928:	e9 01       	movw	r28, r18
     92a:	c6 0f       	add	r28, r22
     92c:	d7 1f       	adc	r29, r23
     92e:	de 01       	movw	r26, r28
     930:	a5 53       	subi	r26, 0x35	; 53
     932:	bf 4f       	sbci	r27, 0xFF	; 255
     934:	ec 93       	st	X, r30
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
     936:	a0 91 66 00 	lds	r26, 0x0066
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	aa 0f       	add	r26, r26
     93e:	bb 1f       	adc	r27, r27
     940:	a8 59       	subi	r26, 0x98	; 152
     942:	bf 4f       	sbci	r27, 0xFF	; 255
     944:	ed 91       	ld	r30, X+
     946:	fc 91       	ld	r31, X
     948:	e2 0f       	add	r30, r18
     94a:	f3 1f       	adc	r31, r19
     94c:	e4 91       	lpm	r30, Z
     94e:	c2 54       	subi	r28, 0x42	; 66
     950:	df 4f       	sbci	r29, 0xFF	; 255
     952:	e8 83       	st	Y, r30
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
//		mode_pwm[1] = PHASE;
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
     954:	2f 5f       	subi	r18, 0xFF	; 255
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	d8 cf       	rjmp	.-80     	; 0x90a <main+0x10c>
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
//		mode_pwm[offset+i] = pgm_read_byte(modeTablePwm[modeSetIdx]+i);
	}

	modesCnt += offset;		// adjust to total mode count
     95a:	89 0f       	add	r24, r25
     95c:	80 93 c9 00 	sts	0x00C9, r24
	// Load config settings: mode, mode set, lo-hi, mode memory
	LoadConfig();

	DefineModeSet();

	wTurboTickLimit = pgm_read_word(turboTimeOutVals+turboTimeoutMode);
     960:	e0 91 bb 00 	lds	r30, 0x00BB
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	e2 58       	subi	r30, 0x82	; 130
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	85 91       	lpm	r24, Z+
     970:	94 91       	lpm	r25, Z
     972:	90 93 ac 00 	sts	0x00AC, r25
     976:	80 93 ab 00 	sts	0x00AB, r24
	
	if (OffTimeEnable)
     97a:	80 91 b9 00 	lds	r24, 0x00B9
     97e:	88 23       	and	r24, r24
     980:	39 f0       	breq	.+14     	; 0x990 <main+0x192>
	{
		if (!noinit_decay)
     982:	80 91 d7 00 	lds	r24, 0x00D7
     986:	81 11       	cpse	r24, r1
     988:	05 c0       	rjmp	.+10     	; 0x994 <main+0x196>
		{
			// Indicates they did a short press, go to the next mode
			next_mode(); // Will handle wrap arounds
     98a:	6b dc       	rcall	.-1834   	; 0x262 <next_mode>
			SaveConfig();
     98c:	b9 dc       	rcall	.-1678   	; 0x300 <SaveConfig>
     98e:	02 c0       	rjmp	.+4      	; 0x994 <main+0x196>
		}
	}
	else
		modeIdx = 0;
     990:	10 92 b3 00 	sts	0x00B3, r1

   TCCR0A = PHASE;		// set this once here - don't use FAST anymore
     994:	81 ea       	ldi	r24, 0xA1	; 161
     996:	8a bd       	out	0x2a, r24	; 42
		
	if (modeIdx == 0)
     998:	80 91 b3 00 	lds	r24, 0x00B3
     99c:	81 11       	cpse	r24, r1
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <main+0x1aa>
	{
//	   TCCR0A = PHASE;
		blink(2, 80);
     9a0:	60 e5       	ldi	r22, 0x50	; 80
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	ed db       	rcall	.-2086   	; 0x182 <blink>
	}

	// set noinit data for next boot
	noinit_decay = 0;  // will decay to non-zero after being off for a while
     9a8:	10 92 d7 00 	sts	0x00D7, r1

	last_modeIdx = 250;	// make it invalid for first time
     9ac:	8a ef       	ldi	r24, 0xFA	; 250
     9ae:	80 93 d5 00 	sts	0x00D5, r24
* WDT_on - Setup watchdog timer to only interrupt, not reset, every 16ms
* ======
**************************************************************************************/
inline void WDT_on() {
	// Setup watchdog timer to only interrupt, not reset, every 16ms.
	cli();							// Disable interrupts
     9b2:	f8 94       	cli
	wdt_reset();					// Reset the WDT
     9b4:	a8 95       	wdr
	WDTCR |= (1<<WDCE) | (1<<WDE);  // Start timed sequence
     9b6:	81 b5       	in	r24, 0x21	; 33
     9b8:	88 61       	ori	r24, 0x18	; 24
     9ba:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDIE);				// Enable interrupt every 16ms (was 1<<WDTIE)
     9bc:	80 e4       	ldi	r24, 0x40	; 64
     9be:	81 bd       	out	0x21, r24	; 33
	sei();							// Enable interrupts
     9c0:	78 94       	sei

	last_modeIdx = 250;	// make it invalid for first time
	
   byte byPrevLockOutSet = 0;

   byte prevConfigClicks = 0;
     9c2:	d0 e0       	ldi	r29, 0x00	; 0
	// set noinit data for next boot
	noinit_decay = 0;  // will decay to non-zero after being off for a while

	last_modeIdx = 250;	// make it invalid for first time
	
   byte byPrevLockOutSet = 0;
     9c4:	c0 e0       	ldi	r28, 0x00	; 0
						if (configClicks)
						{
							OffTimeEnable = 1 - (configClicks & 1);
							SaveConfig();
						}
						ConfigMode = 8;			// all done, go to exit
     9c6:	18 e0       	ldi	r17, 0x08	; 8
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     9c8:	0f ef       	ldi	r16, 0xFF	; 255
    // and will change the mode if needed. If this loop detects that the mode has changed,
    // run the logic for that mode while continuing to check for a mode change.
	while(1)		// run forever
	{
      //---------------------------------------------------------------------------------------
		if (ConfigMode == 0)					// Normal mode
     9ca:	80 91 b7 00 	lds	r24, 0x00B7
     9ce:	81 11       	cpse	r24, r1
     9d0:	9e c1       	rjmp	.+828    	; 0xd0e <main+0x510>
      //---------------------------------------------------------------------------------------
		{
			if (byPrevLockOutSet != byLockOutSet)
     9d2:	80 91 b8 00 	lds	r24, 0x00B8
     9d6:	c8 17       	cp	r28, r24
     9d8:	59 f0       	breq	.+22     	; 0x9f0 <main+0x1f2>
			{
				byPrevLockOutSet = byLockOutSet;
     9da:	c0 91 b8 00 	lds	r28, 0x00B8
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     9de:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     9e0:	19 bc       	out	0x29, r1	; 41
			if (byPrevLockOutSet != byLockOutSet)
			{
				byPrevLockOutSet = byLockOutSet;

				set_output(0,0);
				_delay_ms(250);
     9e2:	8a ef       	ldi	r24, 0xFA	; 250
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9f db       	rcall	.-2242   	; 0x126 <_delay_ms>
				blink(4, 60);
     9e8:	6c e3       	ldi	r22, 0x3C	; 60
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	c9 db       	rcall	.-2158   	; 0x182 <blink>
			}

			if (modeIdx != last_modeIdx)
     9f0:	90 91 b3 00 	lds	r25, 0x00B3
     9f4:	80 91 d5 00 	lds	r24, 0x00D5
     9f8:	98 17       	cp	r25, r24
     9fa:	09 f4       	brne	.+2      	; 0x9fe <main+0x200>
     9fc:	fd c0       	rjmp	.+506    	; 0xbf8 <main+0x3fa>
			{
				//---------------------------------------------------
				// Mode Handling - The WDT changed the mode
				//---------------------------------------------------
				if (modeIdx < 16)
     9fe:	80 91 b3 00 	lds	r24, 0x00B3
     a02:	80 31       	cpi	r24, 0x10	; 16
     a04:	40 f5       	brcc	.+80     	; 0xa56 <main+0x258>
				{
					set_mode(modeIdx);      // Set a solid mode here!!
     a06:	20 91 b3 00 	lds	r18, 0x00B3
**************************************************************************************/
void inline set_mode(byte mode)
{
//   TCCR0A = mode_pwm[mode];

	currOutLvl1 = byPrimModes[mode];
     a0a:	82 2f       	mov	r24, r18
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	fc 01       	movw	r30, r24
     a10:	e5 53       	subi	r30, 0x35	; 53
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	30 81       	ld	r19, Z
     a16:	30 93 ca 00 	sts	0x00CA, r19
	currOutLvl2 = bySecModes[mode];
     a1a:	fc 01       	movw	r30, r24
     a1c:	e2 54       	subi	r30, 0x42	; 66
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	80 81       	ld	r24, Z
     a22:	80 93 c8 00 	sts	0x00C8, r24
	
	PWM_LVL = currOutLvl1;
     a26:	80 91 ca 00 	lds	r24, 0x00CA
     a2a:	88 bd       	out	0x28, r24	; 40
	ALT_PWM_LVL = currOutLvl2;
     a2c:	80 91 c8 00 	lds	r24, 0x00C8
     a30:	89 bd       	out	0x29, r24	; 41
	
	if ((mode == 0) && locatorLedOn)
     a32:	21 11       	cpse	r18, r1
     a34:	06 c0       	rjmp	.+12     	; 0xa42 <main+0x244>
     a36:	80 91 64 00 	lds	r24, 0x0064
     a3a:	88 23       	and	r24, r24
     a3c:	11 f0       	breq	.+4      	; 0xa42 <main+0x244>
		TurnOnBoardLed(1);
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <main+0x24c>
	else if (last_modeIdx == 0)
     a42:	80 91 d5 00 	lds	r24, 0x00D5
     a46:	81 11       	cpse	r24, r1
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <main+0x24e>
		TurnOnBoardLed(0);
     a4a:	76 db       	rcall	.-2324   	; 0x138 <TurnOnBoardLed>
				// Mode Handling - The WDT changed the mode
				//---------------------------------------------------
				if (modeIdx < 16)
				{
					set_mode(modeIdx);      // Set a solid mode here!!
					last_modeIdx = modeIdx;
     a4c:	80 91 b3 00 	lds	r24, 0x00B3
     a50:	80 93 d5 00 	sts	0x00D5, r24
     a54:	d1 c0       	rjmp	.+418    	; 0xbf8 <main+0x3fa>
				}
				else
				{
					last_modeIdx = modeIdx;
     a56:	80 91 b3 00 	lds	r24, 0x00B3
     a5a:	80 93 d5 00 	sts	0x00D5, r24

					// If coming from a standard mode, suppress alternate PWM output
					ALT_PWM_LVL = 0;
     a5e:	19 bc       	out	0x29, r1	; 41

					if (modeIdx == BATT_CHECK_MODE)
     a60:	80 91 b3 00 	lds	r24, 0x00B3
     a64:	80 35       	cpi	r24, 0x50	; 80
     a66:	71 f5       	brne	.+92     	; 0xac4 <main+0x2c6>
					{
//						TCCR0A = PHASE;   // set all output for PHASE mode
						while (modeIdx == BATT_CHECK_MODE)	// Battery Check
     a68:	80 91 b3 00 	lds	r24, 0x00B3
     a6c:	80 35       	cpi	r24, 0x50	; 80
     a6e:	09 f0       	breq	.+2      	; 0xa72 <main+0x274>
     a70:	c3 c0       	rjmp	.+390    	; 0xbf8 <main+0x3fa>
   // Return an composite int, number of "blinks", for approximate battery charge
   // Uses the table above for return values
   // Return value is 3 bits of whole volts and 5 bits of tenths-of-a-volt
   uint8_t i, voltage;

   voltage = get_voltage();
     a72:	82 db       	rcall	.-2300   	; 0x178 <get_voltage>

   // figure out how many times to blink
   for (i=0; voltage > pgm_read_byte(voltage_blinks + i); i += 2)  ;
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	29 2f       	mov	r18, r25
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	f9 01       	movw	r30, r18
     a7c:	ec 5a       	subi	r30, 0xAC	; 172
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	e4 91       	lpm	r30, Z
     a82:	e8 17       	cp	r30, r24
     a84:	10 f4       	brcc	.+4      	; 0xa8a <main+0x28c>
     a86:	9e 5f       	subi	r25, 0xFE	; 254
     a88:	f6 cf       	rjmp	.-20     	; 0xa76 <main+0x278>
   return pgm_read_byte(voltage_blinks + i + 1);
     a8a:	f9 01       	movw	r30, r18
     a8c:	eb 5a       	subi	r30, 0xAB	; 171
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	f4 90       	lpm	r15, Z
//						TCCR0A = PHASE;   // set all output for PHASE mode
						while (modeIdx == BATT_CHECK_MODE)	// Battery Check
						{
							// blink out volts and tenths
							uint8_t result = battcheck();
							battBlink(result >> 5);
     a92:	8f 2d       	mov	r24, r15
     a94:	82 95       	swap	r24
     a96:	86 95       	lsr	r24
     a98:	87 70       	andi	r24, 0x07	; 7
     a9a:	98 db       	rcall	.-2256   	; 0x1cc <battBlink>
							if (modeIdx != BATT_CHECK_MODE)		break;
     a9c:	80 91 b3 00 	lds	r24, 0x00B3
     aa0:	80 35       	cpi	r24, 0x50	; 80
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <main+0x2a8>
     aa4:	a9 c0       	rjmp	.+338    	; 0xbf8 <main+0x3fa>
							_delay_ms(800);
     aa6:	80 e2       	ldi	r24, 0x20	; 32
     aa8:	93 e0       	ldi	r25, 0x03	; 3
     aaa:	3d db       	rcall	.-2438   	; 0x126 <_delay_ms>
							battBlink(result & 0b00011111);
     aac:	8f 2d       	mov	r24, r15
     aae:	8f 71       	andi	r24, 0x1F	; 31
     ab0:	8d db       	rcall	.-2278   	; 0x1cc <battBlink>
							if (modeIdx != BATT_CHECK_MODE)		break;
     ab2:	80 91 b3 00 	lds	r24, 0x00B3
     ab6:	80 35       	cpi	r24, 0x50	; 80
     ab8:	09 f0       	breq	.+2      	; 0xabc <main+0x2be>
     aba:	9e c0       	rjmp	.+316    	; 0xbf8 <main+0x3fa>
							_delay_ms(2000);
     abc:	80 ed       	ldi	r24, 0xD0	; 208
     abe:	97 e0       	ldi	r25, 0x07	; 7
     ac0:	32 db       	rcall	.-2460   	; 0x126 <_delay_ms>
     ac2:	d2 cf       	rjmp	.-92     	; 0xa68 <main+0x26a>
						}
					}

					else if (modeIdx == STROBE_MODE)
     ac4:	80 91 b3 00 	lds	r24, 0x00B3
     ac8:	8b 35       	cpi	r24, 0x5B	; 91
     aca:	49 f4       	brne	.+18     	; 0xade <main+0x2e0>
					{
//						TCCR0A = PHASE;   // set all output for PHASE mode
						while (modeIdx == STROBE_MODE)      // strobe at 16 Hz
     acc:	80 91 b3 00 	lds	r24, 0x00B3
     ad0:	8b 35       	cpi	r24, 0x5B	; 91
     ad2:	09 f0       	breq	.+2      	; 0xad6 <main+0x2d8>
     ad4:	91 c0       	rjmp	.+290    	; 0xbf8 <main+0x3fa>
						{
							strobe(16,47);		// 20,60 is 12.5 Hz
     ad6:	6f e2       	ldi	r22, 0x2F	; 47
     ad8:	80 e1       	ldi	r24, 0x10	; 16
     ada:	3c db       	rcall	.-2440   	; 0x154 <strobe>
     adc:	f7 cf       	rjmp	.-18     	; 0xacc <main+0x2ce>
							strobe(ms, ms);
						}
					}
#endif

					else if (modeIdx == POLICE_STROBE)
     ade:	80 91 b3 00 	lds	r24, 0x00B3
     ae2:	8c 35       	cpi	r24, 0x5C	; 92
     ae4:	01 f5       	brne	.+64     	; 0xb26 <main+0x328>
					{
//						TCCR0A = PHASE;   // set all output for PHASE mode
						while (modeIdx == POLICE_STROBE)		// police strobe
     ae6:	80 91 b3 00 	lds	r24, 0x00B3
     aea:	8c 35       	cpi	r24, 0x5C	; 92
     aec:	09 f0       	breq	.+2      	; 0xaf0 <main+0x2f2>
     aee:	84 c0       	rjmp	.+264    	; 0xbf8 <main+0x3fa>
     af0:	58 e0       	ldi	r21, 0x08	; 8
     af2:	f5 2e       	mov	r15, r21
						{
							for(i=0;i<8;i++)
							{
								if (modeIdx != POLICE_STROBE)		break;
     af4:	80 91 b3 00 	lds	r24, 0x00B3
     af8:	8c 35       	cpi	r24, 0x5C	; 92
     afa:	19 f0       	breq	.+6      	; 0xb02 <main+0x304>
     afc:	48 e0       	ldi	r20, 0x08	; 8
     afe:	f4 2e       	mov	r15, r20
     b00:	0d c0       	rjmp	.+26     	; 0xb1c <main+0x31e>
								strobe(20,40);
     b02:	68 e2       	ldi	r22, 0x28	; 40
     b04:	84 e1       	ldi	r24, 0x14	; 20
     b06:	26 db       	rcall	.-2484   	; 0x154 <strobe>
     b08:	fa 94       	dec	r15
					else if (modeIdx == POLICE_STROBE)
					{
//						TCCR0A = PHASE;   // set all output for PHASE mode
						while (modeIdx == POLICE_STROBE)		// police strobe
						{
							for(i=0;i<8;i++)
     b0a:	f1 10       	cpse	r15, r1
     b0c:	f3 cf       	rjmp	.-26     	; 0xaf4 <main+0x2f6>
     b0e:	f6 cf       	rjmp	.-20     	; 0xafc <main+0x2fe>
								strobe(20,40);
							}
							for(i=0;i<8;i++)
							{
								if (modeIdx != POLICE_STROBE)		break;
								strobe(40,80);
     b10:	60 e5       	ldi	r22, 0x50	; 80
     b12:	88 e2       	ldi	r24, 0x28	; 40
     b14:	1f db       	rcall	.-2498   	; 0x154 <strobe>
     b16:	fa 94       	dec	r15
							for(i=0;i<8;i++)
							{
								if (modeIdx != POLICE_STROBE)		break;
								strobe(20,40);
							}
							for(i=0;i<8;i++)
     b18:	ff 20       	and	r15, r15
     b1a:	29 f3       	breq	.-54     	; 0xae6 <main+0x2e8>
							{
								if (modeIdx != POLICE_STROBE)		break;
     b1c:	80 91 b3 00 	lds	r24, 0x00B3
     b20:	8c 35       	cpi	r24, 0x5C	; 92
     b22:	b1 f3       	breq	.-20     	; 0xb10 <main+0x312>
     b24:	e0 cf       	rjmp	.-64     	; 0xae6 <main+0x2e8>
								strobe(40,80);
							}
						}
					}

					else if (modeIdx == BIKING_STROBE)
     b26:	80 91 b3 00 	lds	r24, 0x00B3
     b2a:	8d 35       	cpi	r24, 0x5D	; 93
     b2c:	49 f5       	brne	.+82     	; 0xb80 <main+0x382>
					{
//						TCCR0A = PHASE;   // set all output for PHASE mode
						while (modeIdx == BIKING_STROBE)		// police strobe
     b2e:	80 91 b3 00 	lds	r24, 0x00B3
     b32:	8d 35       	cpi	r24, 0x5D	; 93
     b34:	11 f5       	brne	.+68     	; 0xb7a <main+0x37c>
     b36:	34 e0       	ldi	r19, 0x04	; 4
     b38:	f3 2e       	mov	r15, r19
						{
							// normal version
							for(i=0;i<4;i++)
							{
								if (modeIdx != BIKING_STROBE)		break;
     b3a:	80 91 b3 00 	lds	r24, 0x00B3
     b3e:	8d 35       	cpi	r24, 0x5D	; 93
     b40:	19 f0       	breq	.+6      	; 0xb48 <main+0x34a>
     b42:	2a e0       	ldi	r18, 0x0A	; 10
     b44:	f2 2e       	mov	r15, r18
     b46:	14 c0       	rjmp	.+40     	; 0xb70 <main+0x372>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     b48:	08 bd       	out	0x28, r16	; 40
	ALT_PWM_LVL = pwm2;
     b4a:	19 bc       	out	0x29, r1	; 41
							// normal version
							for(i=0;i<4;i++)
							{
								if (modeIdx != BIKING_STROBE)		break;
								set_output(255,0);
								_delay_ms(5);
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	ea da       	rcall	.-2604   	; 0x126 <_delay_ms>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     b52:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     b54:	09 bd       	out	0x29, r16	; 41
							{
								if (modeIdx != BIKING_STROBE)		break;
								set_output(255,0);
								_delay_ms(5);
								set_output(0,255);
								_delay_ms(65);
     b56:	81 e4       	ldi	r24, 0x41	; 65
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	e5 da       	rcall	.-2614   	; 0x126 <_delay_ms>
     b5c:	fa 94       	dec	r15
					{
//						TCCR0A = PHASE;   // set all output for PHASE mode
						while (modeIdx == BIKING_STROBE)		// police strobe
						{
							// normal version
							for(i=0;i<4;i++)
     b5e:	f1 10       	cpse	r15, r1
     b60:	ec cf       	rjmp	.-40     	; 0xb3a <main+0x33c>
     b62:	ef cf       	rjmp	.-34     	; 0xb42 <main+0x344>
								_delay_ms(65);
							}
							for(i=0;i<10;i++)
							{
								if (modeIdx != BIKING_STROBE)		break;
								_delay_ms(72);
     b64:	88 e4       	ldi	r24, 0x48	; 72
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	de da       	rcall	.-2628   	; 0x126 <_delay_ms>
     b6a:	fa 94       	dec	r15
								set_output(255,0);
								_delay_ms(5);
								set_output(0,255);
								_delay_ms(65);
							}
							for(i=0;i<10;i++)
     b6c:	ff 20       	and	r15, r15
     b6e:	f9 f2       	breq	.-66     	; 0xb2e <main+0x330>
							{
								if (modeIdx != BIKING_STROBE)		break;
     b70:	80 91 b3 00 	lds	r24, 0x00B3
     b74:	8d 35       	cpi	r24, 0x5D	; 93
     b76:	b1 f3       	breq	.-20     	; 0xb64 <main+0x366>
     b78:	da cf       	rjmp	.-76     	; 0xb2e <main+0x330>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     b7a:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     b7c:	19 bc       	out	0x29, r1	; 41
     b7e:	3c c0       	rjmp	.+120    	; 0xbf8 <main+0x3fa>
							}
						}
						set_output(0,0);
					}

					else if (modeIdx == BEACON_2S_MODE)
     b80:	80 91 b3 00 	lds	r24, 0x00B3
     b84:	8e 35       	cpi	r24, 0x5E	; 94
     b86:	d1 f4       	brne	.+52     	; 0xbbc <main+0x3be>
					{
//						TCCR0A = PHASE;   // set all output for PHASE mode
						while (modeIdx == BEACON_2S_MODE)		// Beacon 2 sec mode
     b88:	80 91 b3 00 	lds	r24, 0x00B3
     b8c:	8e 35       	cpi	r24, 0x5E	; 94
     b8e:	a1 f5       	brne	.+104    	; 0xbf8 <main+0x3fa>
						{
							_delay_ms(300);	// pause a little initially
     b90:	8c e2       	ldi	r24, 0x2C	; 44
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	c8 da       	rcall	.-2672   	; 0x126 <_delay_ms>
						
							strobe(125,125);		// two flash's
     b96:	6d e7       	ldi	r22, 0x7D	; 125
     b98:	8d e7       	ldi	r24, 0x7D	; 125
     b9a:	dc da       	rcall	.-2632   	; 0x154 <strobe>
							strobe(125,125);
     b9c:	6d e7       	ldi	r22, 0x7D	; 125
     b9e:	8d e7       	ldi	r24, 0x7D	; 125
     ba0:	d9 da       	rcall	.-2638   	; 0x154 <strobe>
     ba2:	9f e0       	ldi	r25, 0x0F	; 15
     ba4:	f9 2e       	mov	r15, r25
						
							for (i=0; i < 15; i++)	// 1.5 secs delay
							{
								if (modeIdx != BEACON_2S_MODE)		break;
     ba6:	80 91 b3 00 	lds	r24, 0x00B3
     baa:	8e 35       	cpi	r24, 0x5E	; 94
     bac:	69 f7       	brne	.-38     	; 0xb88 <main+0x38a>
								_delay_ms(100);
     bae:	84 e6       	ldi	r24, 0x64	; 100
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	b9 da       	rcall	.-2702   	; 0x126 <_delay_ms>
     bb4:	fa 94       	dec	r15
							_delay_ms(300);	// pause a little initially
						
							strobe(125,125);		// two flash's
							strobe(125,125);
						
							for (i=0; i < 15; i++)	// 1.5 secs delay
     bb6:	f1 10       	cpse	r15, r1
     bb8:	f6 cf       	rjmp	.-20     	; 0xba6 <main+0x3a8>
     bba:	e6 cf       	rjmp	.-52     	; 0xb88 <main+0x38a>
								_delay_ms(100);
							}
						}
					}

					else if (modeIdx == BEACON_10S_MODE)
     bbc:	80 91 b3 00 	lds	r24, 0x00B3
     bc0:	8f 35       	cpi	r24, 0x5F	; 95
     bc2:	d1 f4       	brne	.+52     	; 0xbf8 <main+0x3fa>
						while (modeIdx == BEACON_10S_MODE)		// Beacon 10 sec mode
     bc4:	80 91 b3 00 	lds	r24, 0x00B3
     bc8:	8f 35       	cpi	r24, 0x5F	; 95
     bca:	b1 f4       	brne	.+44     	; 0xbf8 <main+0x3fa>
						{
//							TCCR0A = PHASE;   // set all output for PHASE mode

							_delay_ms(300);	// pause a little initially
     bcc:	8c e2       	ldi	r24, 0x2C	; 44
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	aa da       	rcall	.-2732   	; 0x126 <_delay_ms>

							strobe(240,240);		// two slow flash's
     bd2:	60 ef       	ldi	r22, 0xF0	; 240
     bd4:	80 ef       	ldi	r24, 0xF0	; 240
     bd6:	be da       	rcall	.-2692   	; 0x154 <strobe>
							strobe(240,240);
     bd8:	60 ef       	ldi	r22, 0xF0	; 240
     bda:	80 ef       	ldi	r24, 0xF0	; 240
     bdc:	bb da       	rcall	.-2698   	; 0x154 <strobe>
     bde:	84 e6       	ldi	r24, 0x64	; 100
     be0:	f8 2e       	mov	r15, r24

							for (i=0; i < 100; i++)	// 10 secs delay
							{
								if (modeIdx != BEACON_10S_MODE)		break;
     be2:	80 91 b3 00 	lds	r24, 0x00B3
     be6:	8f 35       	cpi	r24, 0x5F	; 95
     be8:	69 f7       	brne	.-38     	; 0xbc4 <main+0x3c6>
								_delay_ms(100);
     bea:	84 e6       	ldi	r24, 0x64	; 100
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	9b da       	rcall	.-2762   	; 0x126 <_delay_ms>
     bf0:	fa 94       	dec	r15
							_delay_ms(300);	// pause a little initially

							strobe(240,240);		// two slow flash's
							strobe(240,240);

							for (i=0; i < 100; i++)	// 10 secs delay
     bf2:	f1 10       	cpse	r15, r1
     bf4:	f6 cf       	rjmp	.-20     	; 0xbe2 <main+0x3e4>
     bf6:	e6 cf       	rjmp	.-52     	; 0xbc4 <main+0x3c6>
				}
			} // mode change detected
			

			// Perform low battery indicator tests
			if (LowBattSignal)
     bf8:	80 91 a9 00 	lds	r24, 0x00A9
     bfc:	88 23       	and	r24, r24
     bfe:	21 f1       	breq	.+72     	; 0xc48 <main+0x44a>
			{
				if (modeIdx > 0)
     c00:	80 91 b3 00 	lds	r24, 0x00B3
     c04:	88 23       	and	r24, r24
     c06:	e9 f0       	breq	.+58     	; 0xc42 <main+0x444>
     c08:	b4 e0       	ldi	r27, 0x04	; 4
     c0a:	fb 2e       	mov	r15, r27
     c0c:	fa 94       	dec	r15
				{
					// Flash 3 times before lowering
					byte i = 0;
					while (i++<3)
     c0e:	ff 20       	and	r15, r15
     c10:	99 f0       	breq	.+38     	; 0xc38 <main+0x43a>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     c12:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     c14:	19 bc       	out	0x29, r1	; 41
					// Flash 3 times before lowering
					byte i = 0;
					while (i++<3)
					{
						set_output(0,0);
						_delay_ms(250);
     c16:	8a ef       	ldi	r24, 0xFA	; 250
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	85 da       	rcall	.-2806   	; 0x126 <_delay_ms>
						TurnOnBoardLed(1);
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	8c da       	rcall	.-2792   	; 0x138 <TurnOnBoardLed>
						set_output(currOutLvl1, currOutLvl2);
     c20:	80 91 c8 00 	lds	r24, 0x00C8
     c24:	90 91 ca 00 	lds	r25, 0x00CA
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     c28:	98 bd       	out	0x28, r25	; 40
	ALT_PWM_LVL = pwm2;
     c2a:	89 bd       	out	0x29, r24	; 41
					{
						set_output(0,0);
						_delay_ms(250);
						TurnOnBoardLed(1);
						set_output(currOutLvl1, currOutLvl2);
						_delay_ms(500);
     c2c:	84 ef       	ldi	r24, 0xF4	; 244
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	7a da       	rcall	.-2828   	; 0x126 <_delay_ms>
						TurnOnBoardLed(0);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	81 da       	rcall	.-2814   	; 0x138 <TurnOnBoardLed>
     c36:	ea cf       	rjmp	.-44     	; 0xc0c <main+0x40e>
					}
					
					if (modeIdx < 16)
     c38:	80 91 b3 00 	lds	r24, 0x00B3
     c3c:	80 31       	cpi	r24, 0x10	; 16
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <main+0x444>
						prev_mode();
     c40:	24 db       	rcall	.-2488   	; 0x28a <prev_mode>
				}
				LowBattSignal = 0;
     c42:	10 92 a9 00 	sts	0x00A9, r1
     c46:	34 c0       	rjmp	.+104    	; 0xcb0 <main+0x4b2>
			}
			else if (LowBattBlinkSignal)
     c48:	80 91 a7 00 	lds	r24, 0x00A7
     c4c:	88 23       	and	r24, r24
     c4e:	81 f1       	breq	.+96     	; 0xcb0 <main+0x4b2>
			{
				// Blink the Indicator LED twice
				if (onboardLedEnable)
     c50:	80 91 62 00 	lds	r24, 0x0062
     c54:	88 23       	and	r24, r24
     c56:	51 f1       	breq	.+84     	; 0xcac <main+0x4ae>
				{
					if ((modeIdx > 0) || (locatorLedOn == 0))
     c58:	80 91 b3 00 	lds	r24, 0x00B3
     c5c:	81 11       	cpse	r24, r1
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <main+0x46a>
     c60:	80 91 64 00 	lds	r24, 0x0064
     c64:	81 11       	cpse	r24, r1
     c66:	11 c0       	rjmp	.+34     	; 0xc8a <main+0x48c>
					{
						TurnOnBoardLed(1);
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	66 da       	rcall	.-2868   	; 0x138 <TurnOnBoardLed>
						_delay_ms(500);
     c6c:	84 ef       	ldi	r24, 0xF4	; 244
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	5a da       	rcall	.-2892   	; 0x126 <_delay_ms>
						TurnOnBoardLed(0);
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	61 da       	rcall	.-2878   	; 0x138 <TurnOnBoardLed>
						_delay_ms(500);
     c76:	84 ef       	ldi	r24, 0xF4	; 244
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	55 da       	rcall	.-2902   	; 0x126 <_delay_ms>
						TurnOnBoardLed(1);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	5c da       	rcall	.-2888   	; 0x138 <TurnOnBoardLed>
						_delay_ms(500);
     c80:	84 ef       	ldi	r24, 0xF4	; 244
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	50 da       	rcall	.-2912   	; 0x126 <_delay_ms>
						TurnOnBoardLed(0);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	10 c0       	rjmp	.+32     	; 0xcaa <main+0x4ac>
					}
					else
					{
						TurnOnBoardLed(0);
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	55 da       	rcall	.-2902   	; 0x138 <TurnOnBoardLed>
						_delay_ms(500);
     c8e:	84 ef       	ldi	r24, 0xF4	; 244
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	49 da       	rcall	.-2926   	; 0x126 <_delay_ms>
						TurnOnBoardLed(1);
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	50 da       	rcall	.-2912   	; 0x138 <TurnOnBoardLed>
						_delay_ms(500);
     c98:	84 ef       	ldi	r24, 0xF4	; 244
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	44 da       	rcall	.-2936   	; 0x126 <_delay_ms>
						TurnOnBoardLed(0);
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	4b da       	rcall	.-2922   	; 0x138 <TurnOnBoardLed>
						_delay_ms(500);
     ca2:	84 ef       	ldi	r24, 0xF4	; 244
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	3f da       	rcall	.-2946   	; 0x126 <_delay_ms>
						TurnOnBoardLed(1);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	46 da       	rcall	.-2932   	; 0x138 <TurnOnBoardLed>
					}
				}

				LowBattBlinkSignal = 0;
     cac:	10 92 a7 00 	sts	0x00A7, r1
			}

			// Be sure switch is not pressed and light is OFF for at least 10 secs
			word wWaitTicks = 625;	// 10 secs
			if (LowBattState)
     cb0:	80 91 a8 00 	lds	r24, 0x00A8
     cb4:	88 23       	and	r24, r24
     cb6:	29 f0       	breq	.+10     	; 0xcc2 <main+0x4c4>
				wWaitTicks = 22500;	// 6 minutes
     cb8:	a4 ee       	ldi	r26, 0xE4	; 228
     cba:	ea 2e       	mov	r14, r26
     cbc:	a7 e5       	ldi	r26, 0x57	; 87
     cbe:	fa 2e       	mov	r15, r26
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <main+0x4cc>

				LowBattBlinkSignal = 0;
			}

			// Be sure switch is not pressed and light is OFF for at least 10 secs
			word wWaitTicks = 625;	// 10 secs
     cc2:	f1 e7       	ldi	r31, 0x71	; 113
     cc4:	ef 2e       	mov	r14, r31
     cc6:	f2 e0       	ldi	r31, 0x02	; 2
     cc8:	ff 2e       	mov	r15, r31
			if (LowBattState)
				wWaitTicks = 22500;	// 6 minutes
			
			if ((modeIdx == 0) && !is_pressed() && (wIdleTicks > wWaitTicks))
     cca:	80 91 b3 00 	lds	r24, 0x00B3
     cce:	81 11       	cpse	r24, r1
     cd0:	7c ce       	rjmp	.-776    	; 0x9ca <main+0x1cc>
     cd2:	ae da       	rcall	.-2724   	; 0x230 <is_pressed>
     cd4:	89 2b       	or	r24, r25
     cd6:	09 f0       	breq	.+2      	; 0xcda <main+0x4dc>
     cd8:	78 ce       	rjmp	.-784    	; 0x9ca <main+0x1cc>
     cda:	80 91 ad 00 	lds	r24, 0x00AD
     cde:	90 91 ae 00 	lds	r25, 0x00AE
     ce2:	e8 16       	cp	r14, r24
     ce4:	f9 06       	cpc	r15, r25
     ce6:	08 f0       	brcs	.+2      	; 0xcea <main+0x4ec>
     ce8:	70 ce       	rjmp	.-800    	; 0x9ca <main+0x1cc>
			{
				// If the battery is currently low, then turn OFF the indicator LED before going to sleep
				//  to help in saving the battery
				if (get_voltage() < ADC_LOW)
     cea:	46 da       	rcall	.-2932   	; 0x178 <get_voltage>
     cec:	8d 37       	cpi	r24, 0x7D	; 125
     cee:	30 f4       	brcc	.+12     	; 0xcfc <main+0x4fe>
					if (locatorLedOn)
     cf0:	80 91 64 00 	lds	r24, 0x0064
     cf4:	88 23       	and	r24, r24
     cf6:	11 f0       	breq	.+4      	; 0xcfc <main+0x4fe>
						TurnOnBoardLed(0);
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	1e da       	rcall	.-3012   	; 0x138 <TurnOnBoardLed>
				
				wIdleTicks = 0;
     cfc:	10 92 ae 00 	sts	0x00AE, r1
     d00:	10 92 ad 00 	sts	0x00AD, r1
				_delay_ms(1); // Need this here, maybe instructions for PWM output not getting executed before shutdown?
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e da       	rcall	.-3044   	; 0x126 <_delay_ms>
				sleep_until_switch_press();	// Go to sleep
     d0a:	d1 da       	rcall	.-2654   	; 0x2ae <sleep_until_switch_press>
     d0c:	5e ce       	rjmp	.-836    	; 0x9ca <main+0x1cc>
		
      //---------------------------------------------------------------------------------------
		else                             // Configuration mode in effect
      //---------------------------------------------------------------------------------------
		{
			if (configClicks != prevConfigClicks)
     d0e:	80 91 b5 00 	lds	r24, 0x00B5
     d12:	8d 17       	cp	r24, r29
     d14:	71 f0       	breq	.+28     	; 0xd32 <main+0x534>
			{
				prevConfigClicks = configClicks;
     d16:	d0 91 b5 00 	lds	r29, 0x00B5
				if (configClicks > 0)
     d1a:	80 91 b5 00 	lds	r24, 0x00B5
     d1e:	88 23       	and	r24, r24
     d20:	41 f0       	breq	.+16     	; 0xd32 <main+0x534>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     d22:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     d24:	84 e1       	ldi	r24, 0x14	; 20
     d26:	89 bd       	out	0x29, r24	; 41
**************************************************************************************/
inline static void clickBlink()
{
//	TCCR0A = PHASE;
	set_output(0,20);
	_delay_ms(100);
     d28:	84 e6       	ldi	r24, 0x64	; 100
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	fc d9       	rcall	.-3080   	; 0x126 <_delay_ms>
void set_output(byte pwm1, byte pwm2)
 {
	// Need PHASE to properly turn off the light
//	if ((pwm1==0) && (pwm2==0))
//		TCCR0A = PHASE;
	PWM_LVL = pwm1;
     d2e:	18 bc       	out	0x28, r1	; 40
	ALT_PWM_LVL = pwm2;
     d30:	19 bc       	out	0x29, r1	; 41
				prevConfigClicks = configClicks;
				if (configClicks > 0)
					clickBlink();
			}
			
			if (ConfigMode != prevConfigMode)
     d32:	90 91 b7 00 	lds	r25, 0x00B7
     d36:	80 91 b6 00 	lds	r24, 0x00B6
     d3a:	98 17       	cp	r25, r24
     d3c:	09 f4       	brne	.+2      	; 0xd40 <main+0x542>
     d3e:	a6 c1       	rjmp	.+844    	; 0x108c <main+0x88e>
			{
				prevConfigMode = ConfigMode;
     d40:	80 91 b7 00 	lds	r24, 0x00B7
     d44:	80 93 b6 00 	sts	0x00B6, r24
				configIdleTime = 0;
     d48:	10 92 b4 00 	sts	0x00B4, r1

				switch (ConfigMode)
     d4c:	e0 91 b7 00 	lds	r30, 0x00B7
     d50:	8e 2f       	mov	r24, r30
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	fc 01       	movw	r30, r24
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	eb 31       	cpi	r30, 0x1B	; 27
     d5a:	f1 05       	cpc	r31, r1
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <main+0x562>
     d5e:	93 c1       	rjmp	.+806    	; 0x1086 <main+0x888>
     d60:	e1 5f       	subi	r30, 0xF1	; 241
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	09 94       	ijmp
						++ConfigMode;
						configClicks = 0;
						break;
						
					case 3:	// 1 - exiting mode set selection
						if ((configClicks > 0) && (configClicks <= 8))
     d66:	80 91 b5 00 	lds	r24, 0x00B5
     d6a:	88 23       	and	r24, r24
     d6c:	09 f4       	brne	.+2      	; 0xd70 <main+0x572>
     d6e:	56 c0       	rjmp	.+172    	; 0xe1c <main+0x61e>
     d70:	80 91 b5 00 	lds	r24, 0x00B5
     d74:	89 30       	cpi	r24, 0x09	; 9
     d76:	08 f0       	brcs	.+2      	; 0xd7a <main+0x57c>
     d78:	51 c0       	rjmp	.+162    	; 0xe1c <main+0x61e>
						{
							modeSetIdx = configClicks - 1;
     d7a:	80 91 b5 00 	lds	r24, 0x00B5
     d7e:	81 50       	subi	r24, 0x01	; 1
     d80:	80 93 66 00 	sts	0x0066, r24
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
     d84:	e0 91 66 00 	lds	r30, 0x0066
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	e2 57       	subi	r30, 0x72	; 114
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	84 91       	lpm	r24, Z
     d90:	80 93 c9 00 	sts	0x00C9, r24

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
     d94:	10 92 be 00 	sts	0x00BE, r1
     d98:	10 92 cb 00 	sts	0x00CB, r1
//	mode_pwm[0] = PHASE;

	if (moonLightEnable)
     d9c:	90 91 65 00 	lds	r25, 0x0065
     da0:	99 23       	and	r25, r25
     da2:	41 f0       	breq	.+16     	; 0xdb4 <main+0x5b6>
	{
		offset = 2;
		byPrimModes[1] = 0;
     da4:	10 92 cc 00 	sts	0x00CC, r1
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
     da8:	90 91 63 00 	lds	r25, 0x0063
     dac:	90 93 bf 00 	sts	0x00BF, r25
	byPrimModes[0] = bySecModes[0] = 0;
//	mode_pwm[0] = PHASE;

	if (moonLightEnable)
	{
		offset = 2;
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <main+0x5b8>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
     db4:	91 e0       	ldi	r25, 0x01	; 1
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
//		mode_pwm[1] = PHASE;
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	68 2f       	mov	r22, r24
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	e9 2e       	mov	r14, r25
     dc0:	f1 2c       	mov	r15, r1
     dc2:	26 17       	cp	r18, r22
     dc4:	37 07       	cpc	r19, r23
     dc6:	34 f5       	brge	.+76     	; 0xe14 <main+0x616>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
     dc8:	a0 91 66 00 	lds	r26, 0x0066
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	aa 0f       	add	r26, r26
     dd0:	bb 1f       	adc	r27, r27
     dd2:	a0 58       	subi	r26, 0x80	; 128
     dd4:	bf 4f       	sbci	r27, 0xFF	; 255
     dd6:	ed 91       	ld	r30, X+
     dd8:	fc 91       	ld	r31, X
     dda:	e2 0f       	add	r30, r18
     ddc:	f3 1f       	adc	r31, r19
     dde:	e4 91       	lpm	r30, Z
     de0:	a9 01       	movw	r20, r18
     de2:	4e 0d       	add	r20, r14
     de4:	5f 1d       	adc	r21, r15
     de6:	da 01       	movw	r26, r20
     de8:	a5 53       	subi	r26, 0x35	; 53
     dea:	bf 4f       	sbci	r27, 0xFF	; 255
     dec:	ec 93       	st	X, r30
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
     dee:	a0 91 66 00 	lds	r26, 0x0066
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	aa 0f       	add	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	a8 59       	subi	r26, 0x98	; 152
     dfa:	bf 4f       	sbci	r27, 0xFF	; 255
     dfc:	ed 91       	ld	r30, X+
     dfe:	fc 91       	ld	r31, X
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	e4 91       	lpm	r30, Z
     e06:	da 01       	movw	r26, r20
     e08:	a2 54       	subi	r26, 0x42	; 66
     e0a:	bf 4f       	sbci	r27, 0xFF	; 255
     e0c:	ec 93       	st	X, r30
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
//		mode_pwm[1] = PHASE;
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	3f 4f       	sbci	r19, 0xFF	; 255
     e12:	d7 cf       	rjmp	.-82     	; 0xdc2 <main+0x5c4>
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
//		mode_pwm[offset+i] = pgm_read_byte(modeTablePwm[modeSetIdx]+i);
	}

	modesCnt += offset;		// adjust to total mode count
     e14:	89 0f       	add	r24, r25
     e16:	80 93 c9 00 	sts	0x00C9, r24
					case 3:	// 1 - exiting mode set selection
						if ((configClicks > 0) && (configClicks <= 8))
						{
							modeSetIdx = configClicks - 1;
							DefineModeSet();
							SaveConfig();
     e1a:	72 da       	rcall	.-2844   	; 0x300 <SaveConfig>
						}
						configBlink(2);
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	f7 d9       	rcall	.-3090   	; 0x20e <configBlink>
						configIdleTime = 0;
     e20:	10 92 b4 00 	sts	0x00B4, r1
						break;
     e24:	30 c1       	rjmp	.+608    	; 0x1086 <main+0x888>

					case 4:	// 2 - exiting moonlight enabling
						if (configClicks)
     e26:	80 91 b5 00 	lds	r24, 0x00B5
     e2a:	88 23       	and	r24, r24
     e2c:	09 f4       	brne	.+2      	; 0xe30 <main+0x632>
     e2e:	52 c0       	rjmp	.+164    	; 0xed4 <main+0x6d6>
						{
							moonLightEnable = 1 - (configClicks & 1);
     e30:	80 91 b5 00 	lds	r24, 0x00B5
     e34:	80 95       	com	r24
     e36:	81 70       	andi	r24, 0x01	; 1
     e38:	80 93 65 00 	sts	0x0065, r24
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
     e3c:	e0 91 66 00 	lds	r30, 0x0066
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	e2 57       	subi	r30, 0x72	; 114
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	84 91       	lpm	r24, Z
     e48:	80 93 c9 00 	sts	0x00C9, r24

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
     e4c:	10 92 be 00 	sts	0x00BE, r1
     e50:	10 92 cb 00 	sts	0x00CB, r1
//	mode_pwm[0] = PHASE;

	if (moonLightEnable)
     e54:	90 91 65 00 	lds	r25, 0x0065
     e58:	99 23       	and	r25, r25
     e5a:	41 f0       	breq	.+16     	; 0xe6c <main+0x66e>
	{
		offset = 2;
		byPrimModes[1] = 0;
     e5c:	10 92 cc 00 	sts	0x00CC, r1
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
     e60:	90 91 63 00 	lds	r25, 0x0063
     e64:	90 93 bf 00 	sts	0x00BF, r25
	byPrimModes[0] = bySecModes[0] = 0;
//	mode_pwm[0] = PHASE;

	if (moonLightEnable)
	{
		offset = 2;
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <main+0x670>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
     e6c:	91 e0       	ldi	r25, 0x01	; 1
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
//		mode_pwm[1] = PHASE;
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	68 2f       	mov	r22, r24
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	e9 2e       	mov	r14, r25
     e78:	f1 2c       	mov	r15, r1
     e7a:	26 17       	cp	r18, r22
     e7c:	37 07       	cpc	r19, r23
     e7e:	34 f5       	brge	.+76     	; 0xecc <main+0x6ce>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
     e80:	a0 91 66 00 	lds	r26, 0x0066
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	aa 0f       	add	r26, r26
     e88:	bb 1f       	adc	r27, r27
     e8a:	a0 58       	subi	r26, 0x80	; 128
     e8c:	bf 4f       	sbci	r27, 0xFF	; 255
     e8e:	ed 91       	ld	r30, X+
     e90:	fc 91       	ld	r31, X
     e92:	e2 0f       	add	r30, r18
     e94:	f3 1f       	adc	r31, r19
     e96:	e4 91       	lpm	r30, Z
     e98:	a9 01       	movw	r20, r18
     e9a:	4e 0d       	add	r20, r14
     e9c:	5f 1d       	adc	r21, r15
     e9e:	da 01       	movw	r26, r20
     ea0:	a5 53       	subi	r26, 0x35	; 53
     ea2:	bf 4f       	sbci	r27, 0xFF	; 255
     ea4:	ec 93       	st	X, r30
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
     ea6:	a0 91 66 00 	lds	r26, 0x0066
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	aa 0f       	add	r26, r26
     eae:	bb 1f       	adc	r27, r27
     eb0:	a8 59       	subi	r26, 0x98	; 152
     eb2:	bf 4f       	sbci	r27, 0xFF	; 255
     eb4:	ed 91       	ld	r30, X+
     eb6:	fc 91       	ld	r31, X
     eb8:	e2 0f       	add	r30, r18
     eba:	f3 1f       	adc	r31, r19
     ebc:	e4 91       	lpm	r30, Z
     ebe:	da 01       	movw	r26, r20
     ec0:	a2 54       	subi	r26, 0x42	; 66
     ec2:	bf 4f       	sbci	r27, 0xFF	; 255
     ec4:	ec 93       	st	X, r30
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
//		mode_pwm[1] = PHASE;
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
     ec6:	2f 5f       	subi	r18, 0xFF	; 255
     ec8:	3f 4f       	sbci	r19, 0xFF	; 255
     eca:	d7 cf       	rjmp	.-82     	; 0xe7a <main+0x67c>
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
//		mode_pwm[offset+i] = pgm_read_byte(modeTablePwm[modeSetIdx]+i);
	}

	modesCnt += offset;		// adjust to total mode count
     ecc:	89 0f       	add	r24, r25
     ece:	80 93 c9 00 	sts	0x00C9, r24
					case 4:	// 2 - exiting moonlight enabling
						if (configClicks)
						{
							moonLightEnable = 1 - (configClicks & 1);
							DefineModeSet();
							SaveConfig();
     ed2:	16 da       	rcall	.-3028   	; 0x300 <SaveConfig>
						}
						configBlink(3);
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	59 c0       	rjmp	.+178    	; 0xf8a <main+0x78c>
						break;

					case 5:	// 3 - exiting mode order setting
						if (configClicks)
     ed8:	80 91 b5 00 	lds	r24, 0x00B5
     edc:	88 23       	and	r24, r24
     ede:	39 f0       	breq	.+14     	; 0xeee <main+0x6f0>
						{
							highToLow = 1 - (configClicks & 1);
     ee0:	80 91 b5 00 	lds	r24, 0x00B5
     ee4:	80 95       	com	r24
     ee6:	81 70       	andi	r24, 0x01	; 1
     ee8:	80 93 bd 00 	sts	0x00BD, r24
							SaveConfig();
     eec:	09 da       	rcall	.-3054   	; 0x300 <SaveConfig>
						}
						configBlink(4);
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	4c c0       	rjmp	.+152    	; 0xf8a <main+0x78c>
						break;

					case 6:	// 4 - exiting mode memory setting
						if (configClicks)
     ef2:	80 91 b5 00 	lds	r24, 0x00B5
     ef6:	88 23       	and	r24, r24
     ef8:	39 f0       	breq	.+14     	; 0xf08 <main+0x70a>
						{
							modeMemoryEnabled = 1 - (configClicks & 1);
     efa:	80 91 b5 00 	lds	r24, 0x00B5
     efe:	80 95       	com	r24
     f00:	81 70       	andi	r24, 0x01	; 1
     f02:	80 93 bc 00 	sts	0x00BC, r24
							SaveConfig();
     f06:	fc d9       	rcall	.-3080   	; 0x300 <SaveConfig>
						}
						configBlink(5);
     f08:	85 e0       	ldi	r24, 0x05	; 5
     f0a:	3f c0       	rjmp	.+126    	; 0xf8a <main+0x78c>
						break;
						
					case 7:	// 5 - exiting turbo timeout setting
						if ((configClicks > 0) && (configClicks <= 8))
     f0c:	80 91 b5 00 	lds	r24, 0x00B5
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <main+0x718>
     f14:	b6 c0       	rjmp	.+364    	; 0x1082 <main+0x884>
     f16:	80 91 b5 00 	lds	r24, 0x00B5
     f1a:	89 30       	cpi	r24, 0x09	; 9
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <main+0x722>
     f1e:	b1 c0       	rjmp	.+354    	; 0x1082 <main+0x884>
						{
							turboTimeoutMode = configClicks - 1;
     f20:	80 91 b5 00 	lds	r24, 0x00B5
     f24:	81 50       	subi	r24, 0x01	; 1
     f26:	80 93 bb 00 	sts	0x00BB, r24
							
							// Set the updated Turbo Tick count limit
							wTurboTickLimit = pgm_read_word(turboTimeOutVals+turboTimeoutMode);
     f2a:	e0 91 bb 00 	lds	r30, 0x00BB
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	e2 58       	subi	r30, 0x82	; 130
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	85 91       	lpm	r24, Z+
     f3a:	94 91       	lpm	r25, Z
     f3c:	90 93 ac 00 	sts	0x00AC, r25
     f40:	80 93 ab 00 	sts	0x00AB, r24
     f44:	9d c0       	rjmp	.+314    	; 0x1080 <main+0x882>
						}
						ConfigMode = 8;			// all done, go to exit
						break;

					case 8:	// exiting config mode
						ConfigMode = 0;		// Exit Config mode
     f46:	10 92 b7 00 	sts	0x00B7, r1
						blink(5, 40);
     f4a:	68 e2       	ldi	r22, 0x28	; 40
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	85 e0       	ldi	r24, 0x05	; 5
     f50:	18 d9       	rcall	.-3536   	; 0x182 <blink>
						modeIdx = 0;
     f52:	10 92 b3 00 	sts	0x00B3, r1
						break;
     f56:	97 c0       	rjmp	.+302    	; 0x1086 <main+0x888>
					//-------------------------------------------------------------------------
					//			Advanced Config Modes (from Battery Voltage Level display)
					//-------------------------------------------------------------------------
					
					case 21:	// Start Adv Config mode
						_delay_ms(400);
     f58:	80 e9       	ldi	r24, 0x90	; 144
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	e4 d8       	rcall	.-3640   	; 0x126 <_delay_ms>

						configBlink(1);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	56 d9       	rcall	.-3412   	; 0x20e <configBlink>
						++ConfigMode;
     f62:	80 91 b7 00 	lds	r24, 0x00B7
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	80 93 b7 00 	sts	0x00B7, r24
						configClicks = 0;
     f6c:	10 92 b5 00 	sts	0x00B5, r1
						break;
     f70:	8a c0       	rjmp	.+276    	; 0x1086 <main+0x888>
					
					case 23:	// 1 - exiting locator LED ON selection
						if (configClicks)
     f72:	80 91 b5 00 	lds	r24, 0x00B5
     f76:	88 23       	and	r24, r24
     f78:	39 f0       	breq	.+14     	; 0xf88 <main+0x78a>
						{
							locatorLedOn = 1 - (configClicks & 1);
     f7a:	80 91 b5 00 	lds	r24, 0x00B5
     f7e:	80 95       	com	r24
     f80:	81 70       	andi	r24, 0x01	; 1
     f82:	80 93 64 00 	sts	0x0064, r24
							SaveConfig();
     f86:	bc d9       	rcall	.-3208   	; 0x300 <SaveConfig>
						}
						configBlink(2);
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	41 d9       	rcall	.-3454   	; 0x20e <configBlink>
						break;
     f8c:	7c c0       	rjmp	.+248    	; 0x1086 <main+0x888>
						
					case 24:	// 2 - exiting moonlight level selection
						if ((configClicks > 0) && (configClicks <= 7))
     f8e:	80 91 b5 00 	lds	r24, 0x00B5
     f92:	88 23       	and	r24, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <main+0x79a>
     f96:	9e cf       	rjmp	.-196    	; 0xed4 <main+0x6d6>
     f98:	80 91 b5 00 	lds	r24, 0x00B5
     f9c:	88 30       	cpi	r24, 0x08	; 8
     f9e:	08 f0       	brcs	.+2      	; 0xfa2 <main+0x7a4>
     fa0:	99 cf       	rjmp	.-206    	; 0xed4 <main+0x6d6>
						{
							moonlightLevel = configClicks;
     fa2:	80 91 b5 00 	lds	r24, 0x00B5
     fa6:	80 93 63 00 	sts	0x0063, r24
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;

	modesCnt = pgm_read_byte(modeSetCnts+modeSetIdx);
     faa:	e0 91 66 00 	lds	r30, 0x0066
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	e2 57       	subi	r30, 0x72	; 114
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	84 91       	lpm	r24, Z
     fb6:	80 93 c9 00 	sts	0x00C9, r24

	// Set OFF mode states (index 0)
	byPrimModes[0] = bySecModes[0] = 0;
     fba:	10 92 be 00 	sts	0x00BE, r1
     fbe:	10 92 cb 00 	sts	0x00CB, r1
//	mode_pwm[0] = PHASE;

	if (moonLightEnable)
     fc2:	90 91 65 00 	lds	r25, 0x0065
     fc6:	99 23       	and	r25, r25
     fc8:	41 f0       	breq	.+16     	; 0xfda <main+0x7dc>
	{
		offset = 2;
		byPrimModes[1] = 0;
     fca:	10 92 cc 00 	sts	0x00CC, r1
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
     fce:	90 91 63 00 	lds	r25, 0x0063
     fd2:	90 93 bf 00 	sts	0x00BF, r25
	byPrimModes[0] = bySecModes[0] = 0;
//	mode_pwm[0] = PHASE;

	if (moonLightEnable)
	{
		offset = 2;
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <main+0x7de>
* DefineModeSet
* =============
**************************************************************************************/
inline void DefineModeSet()
{
	byte offset = 1;
     fda:	91 e0       	ldi	r25, 0x01	; 1
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
//		mode_pwm[1] = PHASE;
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	68 2f       	mov	r22, r24
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	e9 2e       	mov	r14, r25
     fe6:	f1 2c       	mov	r15, r1
     fe8:	26 17       	cp	r18, r22
     fea:	37 07       	cpc	r19, r23
     fec:	0c f0       	brlt	.+2      	; 0xff0 <main+0x7f2>
     fee:	6e cf       	rjmp	.-292    	; 0xecc <main+0x6ce>
	{
		byPrimModes[offset+i] = pgm_read_byte(modeTableFet[modeSetIdx]+i);
     ff0:	a0 91 66 00 	lds	r26, 0x0066
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	aa 0f       	add	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	a0 58       	subi	r26, 0x80	; 128
     ffc:	bf 4f       	sbci	r27, 0xFF	; 255
     ffe:	ed 91       	ld	r30, X+
    1000:	fc 91       	ld	r31, X
    1002:	e2 0f       	add	r30, r18
    1004:	f3 1f       	adc	r31, r19
    1006:	e4 91       	lpm	r30, Z
    1008:	a9 01       	movw	r20, r18
    100a:	4e 0d       	add	r20, r14
    100c:	5f 1d       	adc	r21, r15
    100e:	da 01       	movw	r26, r20
    1010:	a5 53       	subi	r26, 0x35	; 53
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	ec 93       	st	X, r30
		bySecModes[offset+i] = pgm_read_byte(modeTable7135[modeSetIdx]+i);
    1016:	a0 91 66 00 	lds	r26, 0x0066
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	aa 0f       	add	r26, r26
    101e:	bb 1f       	adc	r27, r27
    1020:	a8 59       	subi	r26, 0x98	; 152
    1022:	bf 4f       	sbci	r27, 0xFF	; 255
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	e2 0f       	add	r30, r18
    102a:	f3 1f       	adc	r31, r19
    102c:	e4 91       	lpm	r30, Z
    102e:	da 01       	movw	r26, r20
    1030:	a2 54       	subi	r26, 0x42	; 66
    1032:	bf 4f       	sbci	r27, 0xFF	; 255
    1034:	ec 93       	st	X, r30
		bySecModes[1] = moonlightLevel;	// PWM value to use for moonlight mode
//		mode_pwm[1] = PHASE;
	}

	// Populate the RAM based current mode set
	for (int i = 0; i < modesCnt; i++) 
    1036:	2f 5f       	subi	r18, 0xFF	; 255
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	d6 cf       	rjmp	.-84     	; 0xfe8 <main+0x7ea>
						}
						configBlink(3);
						break;

					case 25:	// 3 - exiting BVLD LED config selection
						if (configClicks)
    103c:	80 91 b5 00 	lds	r24, 0x00B5
    1040:	88 23       	and	r24, r24
    1042:	09 f4       	brne	.+2      	; 0x1046 <main+0x848>
    1044:	54 cf       	rjmp	.-344    	; 0xeee <main+0x6f0>
						{
							bvldLedOnly = 1 - (configClicks & 1);
    1046:	80 91 b5 00 	lds	r24, 0x00B5
    104a:	80 95       	com	r24
    104c:	81 70       	andi	r24, 0x01	; 1
    104e:	80 93 ba 00 	sts	0x00BA, r24
    1052:	4c cf       	rjmp	.-360    	; 0xeec <main+0x6ee>
						}
						configBlink(4);
						break;
					
					case 26:	// 4 - exiting Indicator LED enable selection
						if (configClicks)
    1054:	80 91 b5 00 	lds	r24, 0x00B5
    1058:	88 23       	and	r24, r24
    105a:	09 f4       	brne	.+2      	; 0x105e <main+0x860>
    105c:	55 cf       	rjmp	.-342    	; 0xf08 <main+0x70a>
						{
							onboardLedEnable = 1 - (configClicks & 1);
    105e:	80 91 b5 00 	lds	r24, 0x00B5
    1062:	80 95       	com	r24
    1064:	81 70       	andi	r24, 0x01	; 1
    1066:	80 93 62 00 	sts	0x0062, r24
    106a:	4d cf       	rjmp	.-358    	; 0xf06 <main+0x708>
						}
						configBlink(5);
						break;
					
					case 27:	// 5 - power tail switch modes w/mem selection
						if (configClicks)
    106c:	80 91 b5 00 	lds	r24, 0x00B5
    1070:	88 23       	and	r24, r24
    1072:	39 f0       	breq	.+14     	; 0x1082 <main+0x884>
						{
							OffTimeEnable = 1 - (configClicks & 1);
    1074:	80 91 b5 00 	lds	r24, 0x00B5
    1078:	80 95       	com	r24
    107a:	81 70       	andi	r24, 0x01	; 1
    107c:	80 93 b9 00 	sts	0x00B9, r24
							SaveConfig();
    1080:	3f d9       	rcall	.-3458   	; 0x300 <SaveConfig>
						}
						ConfigMode = 8;			// all done, go to exit
    1082:	10 93 b7 00 	sts	0x00B7, r17
						break;
					
				} // switch on new config mode
				
				configClicks = 0;
    1086:	10 92 b5 00 	sts	0x00B5, r1
    108a:	9f cc       	rjmp	.-1730   	; 0x9ca <main+0x1cc>

			} // ConfigMode changed

			else if (configIdleTime > 250)		// 4 secs
    108c:	80 91 b4 00 	lds	r24, 0x00B4
    1090:	8b 3f       	cpi	r24, 0xFB	; 251
    1092:	08 f4       	brcc	.+2      	; 0x1096 <main+0x898>
    1094:	9a cc       	rjmp	.-1740   	; 0x9ca <main+0x1cc>
			{
				++ConfigMode;
    1096:	80 91 b7 00 	lds	r24, 0x00B7
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	80 93 b7 00 	sts	0x00B7, r24
    10a0:	94 cc       	rjmp	.-1752   	; 0x9ca <main+0x1cc>
		locatorLedOn = (config3 >> 2) & 1;
		bvldLedOnly = (config3 >> 3) & 1;
		moonLightEnable = (config3 >> 4) & 1;
	}
	else
		eepos = 0;
    10a2:	10 92 a6 00 	sts	0x00A6, r1
    10a6:	10 92 a5 00 	sts	0x00A5, r1
    10aa:	10 cc       	rjmp	.-2016   	; 0x8cc <main+0xce>

000010ac <eeprom_read_byte>:
    10ac:	e1 99       	sbic	0x1c, 1	; 28
    10ae:	fe cf       	rjmp	.-4      	; 0x10ac <eeprom_read_byte>
    10b0:	9f bb       	out	0x1f, r25	; 31
    10b2:	8e bb       	out	0x1e, r24	; 30
    10b4:	e0 9a       	sbi	0x1c, 0	; 28
    10b6:	99 27       	eor	r25, r25
    10b8:	8d b3       	in	r24, 0x1d	; 29
    10ba:	08 95       	ret

000010bc <_exit>:
    10bc:	f8 94       	cli

000010be <__stop_program>:
    10be:	ff cf       	rjmp	.-2      	; 0x10be <__stop_program>
